;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "projDefines.h"
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 16
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0002 0035 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0036 char status,data;
; 0002 0037 status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0002 0038 data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0002 0039 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0002 003A    {
; 0002 003B    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0002 003C #if RX_BUFFER_SIZE == 256
; 0002 003D    // special case for receiver buffer size=256
; 0002 003E    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0002 003F #else
; 0002 0040    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0002 0041    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0002 0042       {
; 0002 0043       rx_counter=0;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0002 0044       rx_buffer_overflow=1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0002 0045       }
; 0002 0046 #endif
; 0002 0047    }
;PCODE: $0000002B VOL: 0
; 0002 0048 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0002 004F {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0002 0050 char data;
; 0002 0051 dontWDR = 1;
;PCODE: $00000033 VOL: 0
;	data -> R17
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 0052 while (rx_counter==0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0002 0053 data=rx_buffer[rx_rd_index++];
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0002 0054 #if RX_BUFFER_SIZE != 256
; 0002 0055 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 0056 #endif
; 0002 0057 #asm("cli")
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
	cli
;PCODE: $00000047 VOL: 0
; 0002 0058 --rx_counter;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 0059 #asm("sei")
;PCODE: $0000004B VOL: 0
	sei
;PCODE: $0000004C VOL: 0
; 0002 005A dontWDR = 0;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0002 005B return data;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0002 005C }
;PCODE: $00000052 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 16
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0002 006C {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0002 006D if (tx_counter)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 006E    {
; 0002 006F    --tx_counter;
;PCODE: $00000057 VOL: 0
; 0002 0070    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0002 0071 #if TX_BUFFER_SIZE != 256
; 0002 0072    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0002 0073 #endif
; 0002 0074    }
;PCODE: $00000062 VOL: 0
; 0002 0075 }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0002 007C {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0002 007D while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000069 VOL: 0
;	c -> Y+0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0002 007E #asm("cli")
;PCODE: $00000070 VOL: 0
	cli
;PCODE: $00000071 VOL: 0
; 0002 007F if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0002 0080    {
; 0002 0081    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0002 0082 #if TX_BUFFER_SIZE != 256
; 0002 0083    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0002 0084 #endif
; 0002 0085    ++tx_counter;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0002 0086    }
; 0002 0087 else
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0002 0088    UDR=c;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0002 0089 #asm("sei")
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
	sei
;PCODE: $0000008B VOL: 0
; 0002 008A }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;#pragma used-
;#endif
;
;void uart_init(void)
; 0002 008F {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0002 0090     // USART initialization
; 0002 0091     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0092     // USART Receiver: On
; 0002 0093     // USART Transmitter: On
; 0002 0094     // USART Mode: Asynchronous
; 0002 0095     // USART Baud Rate: 9600
; 0002 0096     UCSRA=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0002 0097     UCSRB=0xD8;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0002 0098     UCSRC=0x86;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0002 0099     UBRRH=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0002 009A     UBRRL=0x33;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0002 009B }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
