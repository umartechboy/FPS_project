;#include "GPS_GT511x_comDefs.h"
;#include "projDefines.h"
;#include "projHeaders.h"
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdint.h>
;#include <stdbool.h>
;#include <stdio.h>
;#include <string.h>
;#include <alcd.h>
;
;#define lowByte(u16) (u16 % 256)
;#define highByte(u16) ((u16 >> 8) % 256)
;#define UseLCDDebug 0
;
;uint8_t txPacket []= 	{0x55, 0xAA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0, 0x00, 0x0, 0x00};

	.DSEG
;uint8_t rxPacket [12];
;
;#define rxData (x_)  rxPacket[4 + x_]
;void getCommand(uint16_t com, uint32_t data)
; 0004 0015 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0004 0016 	uint16_t chkSum_ = 0, rd_data = 0, i;
; 0004 0017     cpuHaltAllowed = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	com -> Y+10
;	data -> Y+6
;	chkSum_ -> R16,R17
;	rd_data -> R18,R19
;	i -> R20,R21
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0004 0018 #if UseLCDDebug
; 0004 0019 	lcd_clear();
; 0004 001A     lcd_putsf("Sent\n");
; 0004 001B #endif
; 0004 001C 	for (i = 0; i < 4; i++)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0004 001D 	{
; 0004 001E 		txPacket[4 + i] = data % 256; data /= 256;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0004 001F 	}
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0004 0020 	txPacket[8] = com % 256; com /= 256;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0004 0021 	txPacket[9] = com % 256;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0004 0022 
; 0004 0023 	for(i = 0; i < 10; i++)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0004 0024 		chkSum_ += txPacket[i];
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0004 0025 txPacket[10] = chkSum_ % 256; chkSum_ /= 256;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0004 0026 	txPacket[11] = chkSum_ ;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0004 0027 
; 0004 0028 	for(i = 0; i < 12; i++)
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0004 0029 	{
; 0004 002A 		putchar(txPacket[i]);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0004 002B 	}
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0004 002C #if UseLCDDebug
; 0004 002D 	lcd_clear();
; 0004 002E 	lcd_putsf("Got Back.");
; 0004 002F #endif
; 0004 0030 	for (i = 0; i < 12; i++)
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0004 0031 	{
; 0004 0032 		//while(rx_counter == 0);
; 0004 0033 		rd_data = getchar();
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0004 0034 
; 0004 0035 		rxPacket[i] = rd_data;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0004 0036 	}
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0004 0037     cpuHaltAllowed = 1;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0004 0038 }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;
;uint8_t setCmosLED(uint8_t state_)
; 0004 003B {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0004 003C 	getCommand(CmosLed, state_);
;PCODE: $00000085 VOL: 0
;	state_ -> Y+0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0004 003D 	return rxPacket[10] == 0x30; // ACK
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0004 003E }
;PCODE: $00000093 VOL: 0
;
;uint8_t FPS_open(void)
; 0004 0041 {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0004 0042     delay_ms(100);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0004 0043 	getCommand(FPSOpen, 0);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0004 0044 	return rxPacket[10] == 0x30; // ACK
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0004 0045 }
;PCODE: $000000A2 VOL: 0
;uint8_t FPS_close(void)
; 0004 0047 {
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0004 0048 	getCommand(FPSClose, 0);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0004 0049 	return rxPacket[10] == 0x30; // ACK
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0004 004A }
;PCODE: $000000AE VOL: 0
;void FPS_reset(void)
; 0004 004C {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0004 004D 	FPS_open();
;PCODE: $000000B1 VOL: 0
; 0004 004E     delay_ms(1000);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0004 004F 	FPS_close();
;PCODE: $000000B4 VOL: 0
; 0004 0050 }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;uint32_t FPS_getInt(uint32_t com)
; 0004 0052 {
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0004 0053 	uint32_t ans = 0, i = 0;
; 0004 0054 	getCommand(com, 0);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;	com -> Y+8
;	ans -> Y+4
;	i -> Y+0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0004 0055 	for (i = 0; i < 4; i++)
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0004 0056 	{
; 0004 0057 		ans += rxPacket[4 + i] << (8 * i);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0004 0058 	}
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0004 0059 	return ans;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0004 005A }
;PCODE: $000000EE VOL: 0
;uint8_t fingerPressed(void)
; 0004 005C {
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0004 005D 	getCommand(IsPressFinger, 0);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0004 005E 	return rxPacket[4] ? 0: 1;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0004 005F }
;PCODE: $00000100 VOL: 0
;uint32_t getEnrolledCount(void)
; 0004 0061 {
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0004 0062 	return FPS_getInt(GetEnrollCount);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0004 0063 }
;PCODE: $00000106 VOL: 0
;uint8_t isEnrolled(uint8_t id)
; 0004 0065 {
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0004 0066 #if UseLCDDebug
; 0004 0067 	lcd_clear();
; 0004 0068 	lcd_putsf("CheckEnrolled");
; 0004 0069 #endif
; 0004 006A 	getCommand(CheckEnrolled, id);
;PCODE: $00000109 VOL: 0
;	id -> Y+0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0004 006B 	return rxPacket[4] ? 0: 1;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0004 006C }
;PCODE: $0000011D VOL: 0
;uint8_t deleteID(uint8_t id)
; 0004 006E {
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0004 006F #if UseLCDDebug
; 0004 0070 	lcd_clear();
; 0004 0071 	lcd_putsf("delete ID");
; 0004 0072 #endif
; 0004 0073 	getCommand(DeleteID, id);
;PCODE: $00000120 VOL: 0
;	id -> Y+0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0004 0074 	return rxPacket[4] ? 0: 1;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0004 0075 }
;PCODE: $00000134 VOL: 0
;uint8_t getFingerId(void)
; 0004 0077 {
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0004 0078 	uint32_t ans = 0;
; 0004 0079 	//lcd_clear();
; 0004 007A 	//lcd_putsf("Place your finger.");
; 0004 007B 	setCmosLED(1);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;	ans -> Y+0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0004 007C 	while (!fingerPressed());
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0004 007D 	ans = FPS_getInt(Identify1_N);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0004 007E 	setCmosLED(0);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0004 007F 	if (rxPacket[10] == Nack)
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0004 0080 	{
; 0004 0081 	    lcd_clear();
;PCODE: $00000151 VOL: 0
; 0004 0082 	    lcd_putsf("Failed");
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0004 0083 		return 21;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0004 0084 	}
; 0004 0085 	return ans;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0004 0086 }
;PCODE: $0000015C VOL: 0
;uint8_t deleteAllIds(void)
; 0004 0088 {
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0004 0089 	uint32_t ans = 0;
; 0004 008A 
; 0004 008B 	ans = FPS_getInt(DeleteAll);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;	ans -> Y+0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0004 008C 
; 0004 008D     if (rxPacket[10] == Nack)
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0004 008E 	{
; 0004 008F 	    lcd_clear();
;PCODE: $0000016F VOL: 0
; 0004 0090 	    lcd_putsf("Failed");
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0004 0091 		return 21;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0004 0092 	}
; 0004 0093 	return ans;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0004 0094 }
;PCODE: $0000017A VOL: 0
;
;uint8_t getAFreeId(void)
; 0004 0097 {
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0004 0098 	uint8_t i = 0;
; 0004 0099 	for (i = 0; i < 8; i++)
;PCODE: $0000017D VOL: 0
;	i -> R17
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0004 009A 	{
; 0004 009B 		if (!isEnrolled(i))
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0004 009C 			return i;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0004 009D 	}
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0004 009E 	return i;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0004 009F }
;PCODE: $00000199 VOL: 0
;uint8_t enrollAFinger(uint8_t id)
; 0004 00A1 {
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0004 00A2 	lcd_clear();
;PCODE: $0000019C VOL: 0
;	id -> Y+0
;PCODE: $0000019D VOL: 0
; 0004 00A3     bips(4);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0004 00A4 	lcd_putsf("Place finger ");
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0004 00A5     lcd_gotoxy(0,1);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0004 00A6     lcd_putsf("(1/3)");
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0004 00A7     delay_ms(1000);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0004 00A8 	setCmosLED(1);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0004 00A9 	while (!fingerPressed()) {if (cancel_PB is pressed) return 2;}
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0004 00AA 	delay_ms(1000);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0004 00AB 
; 0004 00AC 	getCommand(EnrollStart, id);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0004 00AD 	getCommand(Enroll1, 0);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0004 00AE 	if (rxPacket[10] == Nack)
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0004 00AF 	{
; 0004 00B0 	    lcd_clear();
;PCODE: $000001CC VOL: 0
; 0004 00B1 	    lcd_putsf("Failed. ");
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0004 00B2         lcd_gotoxy(0,1);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0004 00B3         lcd_putsf("Reseting FPS.");
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0004 00B4 		FPS_reset();
;PCODE: $000001D7 VOL: 0
; 0004 00B5 		return 0;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0004 00B6 	}
; 0004 00B7     delay_ms(1000);
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0004 00B8 	lcd_clear();
;PCODE: $000001DE VOL: 0
; 0004 00B9 
; 0004 00BA 	lcd_putsf("Take of the ");
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0004 00BB     lcd_gotoxy(0,1);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0004 00BC     lcd_putsf("finger.");
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0004 00BD     soundOK();
;PCODE: $000001E9 VOL: 0
; 0004 00BE 	while (fingerPressed()){if (cancel_PB is pressed) return 2;}
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0004 00BF 
; 0004 00C0 
; 0004 00C1 	lcd_clear();
;PCODE: $000001F7 VOL: 0
; 0004 00C2     bip();
;PCODE: $000001F8 VOL: 0
; 0004 00C3 	lcd_putsf("Place finger ");
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0004 00C4     lcd_gotoxy(0,1);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0004 00C5     lcd_putsf("(2/3)");
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0004 00C6     delay_ms(1000);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0004 00C7 	while (!fingerPressed()) {if (cancel_PB is pressed) return 2;}
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0004 00C8 	delay_ms(1000);
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0004 00C9 
; 0004 00CA 	getCommand(Enroll2, 0);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0004 00CB 	if (rxPacket[10] == Nack)
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0004 00CC 	{
; 0004 00CD 	    lcd_clear();
;PCODE: $0000021C VOL: 0
; 0004 00CE 	    lcd_putsf("Failed. Reseting ");
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0004 00CF         lcd_gotoxy(0,1);
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0004 00D0         lcd_putsf("FPS.");
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0004 00D1 		FPS_reset();
;PCODE: $00000227 VOL: 0
; 0004 00D2 		return 0;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0004 00D3 	}
; 0004 00D4     delay_ms(1000);
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0004 00D5 	lcd_clear();
;PCODE: $0000022E VOL: 0
; 0004 00D6 	lcd_putsf("Take of the ");
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0004 00D7     lcd_gotoxy(0,1);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0004 00D8     lcd_putsf("finger.");
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0004 00D9     soundOK();
;PCODE: $00000239 VOL: 0
; 0004 00DA 	while (fingerPressed()){if (cancel_PB is pressed) return 2;}
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0004 00DB 
; 0004 00DC 	lcd_clear();
;PCODE: $00000247 VOL: 0
; 0004 00DD     bip();
;PCODE: $00000248 VOL: 0
; 0004 00DE 	lcd_putsf("Place finger ");
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0004 00DF     lcd_gotoxy(0,1);
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0004 00E0     lcd_putsf("(3/3)");
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0004 00E1     delay_ms(2000);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0004 00E2 	while (!fingerPressed()) {if (cancel_PB is pressed) return 2;}
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0004 00E3 	delay_ms(1000);
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0004 00E4 
; 0004 00E5 	getCommand(Enroll3, 0);
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0004 00E6 	if (rxPacket[10] == Nack)
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0004 00E7 	{
; 0004 00E8 	    lcd_clear();
;PCODE: $0000026C VOL: 0
; 0004 00E9 	    lcd_putsf("Failed. Reseting ");
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0004 00EA         lcd_gotoxy(0,1);
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0004 00EB         lcd_putsf("FPS.");
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0004 00EC 		FPS_reset();
;PCODE: $00000277 VOL: 0
; 0004 00ED 		return 0;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0004 00EE 	}
; 0004 00EF     delay_ms(1000);
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0004 00F0 	lcd_clear();
;PCODE: $0000027E VOL: 0
; 0004 00F1 	lcd_putsf("Take of the ");
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0004 00F2     lcd_gotoxy(0,1);
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0004 00F3     lcd_putsf("finger.");
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0004 00F4     soundOK();
;PCODE: $00000289 VOL: 0
; 0004 00F5 	while (fingerPressed()){if (cancel_PB is pressed) return 2;}
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0004 00F6 	setCmosLED(0);
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0004 00F7 	lcd_clear();
;PCODE: $00000299 VOL: 0
; 0004 00F8 	lcd_putsf("Enrollment ");
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0004 00F9     delay_ms(500);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0004 00FA 	return 1;
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0004 00FB }
;PCODE: $000002A2 VOL: 0
