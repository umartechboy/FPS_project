;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "projHeaders.h"
;#include "projDefines.h"
;#include <alcd.h>
;#include <delay.h>
;#include "customCharsCG.h"
;
;char cpuHaltAllowed;
;// Timer 0 overflow interrupt service routine
;//used for charge and LCD contrast controller
;int mV;
;char powerMode;
;unsigned char dontWDR;
;eeprom unsigned int fpsCount;
;
;void normalizeContrast(void)
; 0003 0011 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 0012     if (mV > 4800)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0003 0013         OCR2 = 0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0003 0014     else if (mV > 4600)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0003 0015         OCR2 = 50;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0003 0016     else if (mV > 4300)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0003 0017         OCR2 = 100;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0003 0018     else if (mV > 4100)
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0003 0019         OCR2 = 200;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0003 001A     else
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0003 001B         OCR2 = 249;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0003 001C }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;unsigned int elapsed_us;
;unsigned int elapsed_ms;
;unsigned int elapsed_sec;
;unsigned char junkFreeTimer;
;unsigned char autoSleepTimer;
;
;
;void incTime (void)
; 0003 0025 {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0003 0026     elapsed_us += 800;// precisely 192
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0003 0027     elapsed_ms += 8;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0003 0028     if (elapsed_us >= 1000) { elapsed_ms ++;    elapsed_us %= 1000; }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0003 0029     if (elapsed_ms >= 1000)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0003 002A     {
; 0003 002B         elapsed_sec ++;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0003 002C         elapsed_ms %= 1000;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0003 002D 
; 0003 002E         if (junkFreeTimer < 60)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0003 002F             junkFreeTimer++;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0003 0030         if (autoSleepTimer < 255)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0003 0031             autoSleepTimer++;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0003 0032     }
;PCODE: $0000005F VOL: 0
; 0003 0033     if (elapsed_sec >= 1000)  { elapsed_sec = 0;    }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0003 0034 
; 0003 0035 }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;bit inPowerLoop = 0;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0003 0038 {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0003 0039     incTime();
;PCODE: $0000006B VOL: 0
; 0003 003A     if(inPowerLoop) return;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0003 003B     inPowerLoop = 1;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0003 003C 
; 0003 003D     notLED = !((elapsed_sec % 3 == 0) && (elapsed_ms < 50));
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0003 003E     if (cpuHaltAllowed)
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0003 003F     {
; 0003 0040         mV = a2v(read_adc(0)) * 1000;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0003 0041     }
; 0003 0042 
; 0003 0043 
; 0003 0044     if (powerMode is FORCE_CHARGE)
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0003 0045     {
; 0003 0046         charging be ON;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0003 0047         normalizeContrast();
;PCODE: $000000A2 VOL: 0
; 0003 0048     }
; 0003 0049     else if (mV > maxRated)
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0003 004A     {
; 0003 004B         powerMode = POWER_OVERFLOW;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0003 004C         // just try to reduce the power by overloading
; 0003 004D         charging be ON;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0003 004E         OCR2 = 0;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0003 004F     }
; 0003 0050     else if (mV > batteryFull)
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0003 0051     {
; 0003 0052         if (powerMode == 0) // system start
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0003 0053         {
; 0003 0054             charging be ON;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0003 0055             OCR2 = 160;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0003 0056             powerMode be ON_CHARGING;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0003 0057         }
; 0003 0058         else
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0003 0059         {
; 0003 005A             if (charging is ON)
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0003 005B             {
; 0003 005C                 //Battery full, disconnect
; 0003 005D                 charging be OFF;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0003 005E                 powerMode = ON_EXTERNAL;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0003 005F                 OCR2 = 0;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0003 0060             }
; 0003 0061             else    // over charged Battery, can't do anything
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0003 0062                 powerMode = ON_EXTERNAL;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0003 0063         }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0003 0064     }
; 0003 0065     else if (mV > onBattery)
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0003 0066     {
; 0003 0067         charging be ON;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0003 0068         //either discharging in high state or charging normally, lets c
; 0003 0069         if (mV > noExternal) //was not discharging
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0003 006A             powerMode = ON_CHARGING;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0003 006B         else
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0003 006C             powerMode = ON_BATTERY;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0003 006D         //let the contrast adjust on next cycle
; 0003 006E 
; 0003 006F         //only if returns in same branch
; 0003 0070         normalizeContrast();
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0003 0071     }
; 0003 0072     else if (mV > batteryLow)
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0003 0073     {
; 0003 0074         if (charging is ON)
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0003 0075         {
; 0003 0076             //either too low battery or discharging already
; 0003 0077             powerMode = ON_BATTERY;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0003 0078         }
; 0003 0079         else
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0003 007A         {
; 0003 007B             //power falure
; 0003 007C             charging be ON;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0003 007D 
; 0003 007E             if (powerMode != ON_BATTERY) //first time in branch
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0003 007F             {
; 0003 0080                 OCR2 = 200;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0003 0081                 //soundPowerFailure();
; 0003 0082             }
; 0003 0083             powerMode = ON_BATTERY;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0003 0084         }
;PCODE: $000000F5 VOL: 0
; 0003 0085         normalizeContrast();
;PCODE: $000000F6 VOL: 0
; 0003 0086     }
; 0003 0087     else // battery too low.
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0003 0088     {
; 0003 0089         if (powerMode is ON_BATTERY)
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0003 008A         {
; 0003 008B             charging be ON;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0003 008C             powerMode = BATTERY_LOW;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0003 008D             //soundBatteryLow();
; 0003 008E         }
; 0003 008F         else
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0003 0090         //power failed
; 0003 0091         {
; 0003 0092             charging be ON;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0003 0093             powerMode = ON_BATTERY;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0003 0094             OCR2 = 210;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0003 0095             //soundPowerFailure();
; 0003 0096         }
;PCODE: $00000108 VOL: 0
; 0003 0097     }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0003 0098     if (!dontWDR)
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0003 0099         #asm("WDR")
;PCODE: $00000111 VOL: 0
	WDR
;PCODE: $00000112 VOL: 0
; 0003 009A     inPowerLoop = 0;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0003 009B }
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;
;
;void controller_init(void)
; 0003 009F {
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0003 00A0     delay_ms(100);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0003 00A1     //OSCCAL = 0xFF; // double the internal oscillator speed
; 0003 00A2     cpuHaltAllowed = 0;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0003 00A3     adc_init();
;PCODE: $00000121 VOL: 0
; 0003 00A4     lcd_init(16);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0003 00A5     uart_init();
;PCODE: $00000124 VOL: 0
; 0003 00A6 
; 0003 00A7     init_fingerPrint_char();
;PCODE: $00000125 VOL: 0
; 0003 00A8     init_battery_char();
;PCODE: $00000126 VOL: 0
; 0003 00A9     init_switch_char();
;PCODE: $00000127 VOL: 0
; 0003 00AA     init_locked_char();
;PCODE: $00000128 VOL: 0
; 0003 00AB     init_unlocked_char();
;PCODE: $00000129 VOL: 0
; 0003 00AC     init_smilie_char();
;PCODE: $0000012A VOL: 0
; 0003 00AD     dontWDR = 0;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0003 00AE 
; 0003 00AF     DDRB.0 = 1;     //battery charge
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0003 00B0     PORTB.0 = 0;    //battery charge
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0003 00B1 
; 0003 00B2     DDRB.1 = 1; //buzzer
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0003 00B3     PORTB.1 = 0;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0003 00B4 
; 0003 00B5     DDRB.2 = 1;     //not LED
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0003 00B6     DDRB.2 = 1;     //not LED
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0003 00B7 
; 0003 00B8     DDRB.3 = 1;     //chargepump
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0003 00B9 
; 0003 00BA     DDRB.7 = 1;     //motor
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0003 00BB     PORTB.7 = 0;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0003 00BC 
; 0003 00BD 
; 0003 00BE     DDRC.0 = 0;     //VCC/Vref
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0003 00BF     PORTC.0 = 0;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0003 00C0 
; 0003 00C1     DDRD &= ~0xE0; // buttons
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0003 00C2     PORTD |= 0xE0; // buttons
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0003 00C3 
; 0003 00C4     DDRD.0 = 0; //uart
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0003 00C5     DDRD.1 = 1;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0003 00C6     PORTD.0 = 0;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0003 00C7     PORTD.1 = 1;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0003 00C8 
; 0003 00C9     DDRD.2 = 1;  //FPS power
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0003 00CA     PORTD.2 = 0; //FPS power
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0003 00CB 
; 0003 00CC     DDRD.3 = 0;  //IRD
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0003 00CD     PORTD.3 = 0;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0003 00CE 
; 0003 00CF     //LCD contrast
; 0003 00D0 
; 0003 00D1     // Timer/Counter 2 initialization
; 0003 00D2     // Clock source: System Clock
; 0003 00D3     // Clock value: 1000.000 kHz
; 0003 00D4     // Mode: Fast PWM top=0xFF
; 0003 00D5     // OC2 output: Inverted PWM
; 0003 00D6     ASSR=0x00;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0003 00D7     TCCR2=0x7B;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0003 00D8     TCNT2=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0003 00D9     OCR2=0x7F;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0003 00DA 
; 0003 00DB     // Timer/Counter 0 initialization
; 0003 00DC     // Clock source: System Clock
; 0003 00DD     // Clock value: 31.250 kHz
; 0003 00DE     TCCR0=0x04;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0003 00DF     TCNT0=0x00;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0003 00E0     TIMSK |= 0x01;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0003 00E1 
; 0003 00E2     lcd_clear();
;PCODE: $00000168 VOL: 0
; 0003 00E3     cpuHaltAllowed = 1;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0003 00E4     notLED be iOFF;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0003 00E5     powerMode = FORCE_CHARGE;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0003 00E6 
; 0003 00E7     // Watchdog Timer initialization
; 0003 00E8     // Watchdog Timer Prescaler: OSC/512k
; 0003 00E9     #pragma optsize-
; 0003 00EA     WDTCR=0x1F;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0003 00EB     WDTCR=0x0F;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0003 00EC     #ifdef _OPTIMIZE_SIZE_
; 0003 00ED     #pragma optsize+
; 0003 00EE     #endif
; 0003 00EF 
; 0003 00F0 
; 0003 00F1     #asm("sei");
;PCODE: $00000173 VOL: 0
	sei
;PCODE: $00000174 VOL: 0
; 0003 00F2 
; 0003 00F3     lcd_putsf("techCREATIONS");
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0003 00F4     delay_ms(500);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0003 00F5     failedCount = 0;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0003 00F6     powerMode = ON_CHARGING;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0003 00F7     lcd_clear();
;PCODE: $0000017F VOL: 0
; 0003 00F8     delay_ms(10);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0003 00F9 }
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
