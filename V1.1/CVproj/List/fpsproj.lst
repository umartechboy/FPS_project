
AVRASM ver. 2.1.30  D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm Mon Sep 29 11:01:12 2014

D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1070): warning: Register r5 already defined by the .DEF directive
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1071): warning: Register r4 already defined by the .DEF directive
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1072): warning: Register r6 already defined by the .DEF directive
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1073): warning: Register r9 already defined by the .DEF directive
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1074): warning: Register r8 already defined by the .DEF directive
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1075): warning: Register r11 already defined by the .DEF directive
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1076): warning: Register r10 already defined by the .DEF directive
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1077): warning: Register r13 already defined by the .DEF directive
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1078): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega8L
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _menuOpt=R5
                 	.DEF _refreshMenu=R4
                 	.DEF _adc_data=R6
                 	.DEF _rx_wr_index=R9
                 	.DEF _rx_rd_index=R8
                 	.DEF _tx_wr_index=R11
                 	.DEF _tx_rd_index=R10
                 	.DEF _tx_counter=R13
                 	.DEF __lcd_x=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c145      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c568      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0x00
00000b c493      	RJMP _usart_rx_isr
00000c cff3      	RJMP 0x00
00000d c4d6      	RJMP _usart_tx_isr
00000e c3c3      	RJMP _adc_isr
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _fingerPrint_charTable:
000013 514e
000014 5455
000015 5057
000016 c04f      	.DB  0x4E,0x51,0x55,0x54,0x57,0x50,0x4F,0xC0
                 _power_charTable:
000017 4442
000018 4e48
000019 4442
00001a c048      	.DB  0x42,0x44,0x48,0x4E,0x42,0x44,0x48,0xC0
                 _battery_charTable:
00001b 514e
00001c 5f51
00001d 5f5f
00001e c05f      	.DB  0x4E,0x51,0x51,0x5F,0x5F,0x5F,0x5F,0xC0
                 _switch_charTable:
00001f 4942
000020 4146
000021 4846
000022 c044      	.DB  0x42,0x49,0x46,0x41,0x46,0x48,0x44,0xC0
                 _locked_charTable:
000023 514e
000024 5f51
000025 5b5b
000026 c05f      	.DB  0x4E,0x51,0x51,0x5F,0x5B,0x5B,0x5F,0xC0
                 _unlocked_charTable:
000027 504e
000028 5e50
000029 5b5b
00002a c05f      	.DB  0x4E,0x50,0x50,0x5E,0x5B,0x5B,0x5F,0xC0
                 _smilie_charTable:
00002b 4a40
00002c 4040
00002d 4e51
00002e c040      	.DB  0x40,0x4A,0x40,0x40,0x51,0x4E,0x40,0xC0
                 _tbl10_G100:
00002f 2710
000030 03e8
000031 0064
000032 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000033 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000034 1000
000035 0100
000036 0010
000037 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000038 0000      	.DW  0x0000
                 
                 _0xB6:
000039 ff01      	.DB  0x1,0xFF
                 _0x0:
00003a 694b
00003b 646e
00003c 796c
00003d 4720      	.DB  0x4B,0x69,0x6E,0x64,0x6C,0x79,0x20,0x47
00003e 7669
00003f 2065
000040 6f79
000041 7275      	.DB  0x69,0x76,0x65,0x20,0x79,0x6F,0x75,0x72
000042 6100
000043 7475
000044 6568
000045 746e      	.DB  0x0,0x61,0x75,0x74,0x68,0x65,0x6E,0x74
000046 6369
000047 7461
000048 6f69
000049 006e      	.DB  0x69,0x63,0x61,0x74,0x69,0x6F,0x6E,0x0
00004a 6c50
00004b 6361
00004c 2065
00004d 6874      	.DB  0x50,0x6C,0x61,0x63,0x65,0x20,0x74,0x68
00004e 2065
00004f 6966
000050 676e
000051 7265      	.DB  0x65,0x20,0x66,0x69,0x6E,0x67,0x65,0x72
000052 5400
000053 6168
000054 6b6e
000055 7920      	.DB  0x0,0x54,0x68,0x61,0x6E,0x6B,0x20,0x79
000056 756f
000057 203a
000058 4100
000059 6363      	.DB  0x6F,0x75,0x3A,0x20,0x0,0x41,0x63,0x63
00005a 7365
00005b 2073
00005c 6564
00005d 696e      	.DB  0x65,0x73,0x73,0x20,0x64,0x65,0x6E,0x69
00005e 6465
00005f 203a
000060 4d00
000061 6d65      	.DB  0x65,0x64,0x3A,0x20,0x0,0x4D,0x65,0x6D
000062 726f
000063 2079
000064 7546
000065 6c6c      	.DB  0x6F,0x72,0x79,0x20,0x46,0x75,0x6C,0x6C
000066 0021
000067 6544
000068 656c
000069 6574      	.DB  0x21,0x0,0x44,0x65,0x6C,0x65,0x74,0x65
00006a 6120
00006b 206e
00006c 4449
00006d 4900      	.DB  0x20,0x61,0x6E,0x20,0x49,0x44,0x0,0x49
00006e 2044
00006f 7661
000070 6961
000071 616c      	.DB  0x44,0x20,0x61,0x76,0x61,0x69,0x6C,0x61
000072 6c62
000073 3a65
000074 0020
000075 6552      	.DB  0x62,0x6C,0x65,0x3A,0x20,0x0,0x52,0x65
000076 616d
000077 6e69
000078 6e69
000079 3a67      	.DB  0x6D,0x61,0x69,0x6E,0x69,0x6E,0x67,0x3A
00007a 0020
00007b 6166
00007c 6c69
00007d 6465      	.DB  0x20,0x0,0x66,0x61,0x69,0x6C,0x65,0x64
00007e 002e
00007f 7553
000080 6363
000081 6565      	.DB  0x2E,0x0,0x53,0x75,0x63,0x63,0x65,0x65
000082 6564
000083 0064
000084 6153
000085 6576      	.DB  0x64,0x65,0x64,0x0,0x53,0x61,0x76,0x65
000086 2064
000087 7461
000088 203a
000089 5000      	.DB  0x64,0x20,0x61,0x74,0x3A,0x20,0x0,0x50
00008a 616c
00008b 6563
00008c 7420
00008d 6568      	.DB  0x6C,0x61,0x63,0x65,0x20,0x74,0x68,0x65
00008e 5500
00008f 6b6e
000090 6f6e
000091 6e77      	.DB  0x0,0x55,0x6E,0x6B,0x6E,0x6F,0x77,0x6E
000092 4920
000093 0044
000094 5245
000095 4f52      	.DB  0x20,0x49,0x44,0x0,0x45,0x52,0x52,0x4F
000096 0052
000097 6f43
000098 666e
000099 7269      	.DB  0x52,0x0,0x43,0x6F,0x6E,0x66,0x69,0x72
00009a 3f6d
00009b 4400
00009c 6c65
00009d 7465      	.DB  0x6D,0x3F,0x0,0x44,0x65,0x6C,0x65,0x74
00009e 6465
00009f 3e00
0000a0 4d20
0000a1 6e65      	.DB  0x65,0x64,0x0,0x3E,0x20,0x4D,0x65,0x6E
0000a2 0075
0000a3 6553
0000a4 7563
0000a5 6972      	.DB  0x75,0x0,0x53,0x65,0x63,0x75,0x72,0x69
0000a6 7974
0000a7 003a
0000a8 4722
0000a9 206f      	.DB  0x74,0x79,0x3A,0x0,0x22,0x47,0x6F,0x20
0000aa 6d53
0000ab 7261
0000ac 2274
0000ad 2200      	.DB  0x53,0x6D,0x61,0x72,0x74,0x22,0x0,0x22
0000ae 704f
0000af 6e65
0000b0 6620
0000b1 726f      	.DB  0x4F,0x70,0x65,0x6E,0x20,0x66,0x6F,0x72
0000b2 6120
0000b3 6c6c
0000b4 0022
0000b5 4c22      	.DB  0x20,0x61,0x6C,0x6C,0x22,0x0,0x22,0x4C
0000b6 636f
0000b7 206b
0000b8 6874
0000b9 2065      	.DB  0x6F,0x63,0x6B,0x20,0x74,0x68,0x65,0x20
0000ba 6f44
0000bb 726f
0000bc 0022
0000bd 6552      	.DB  0x44,0x6F,0x6F,0x72,0x22,0x0,0x52,0x65
0000be 6567
0000bf 7369
0000c0 6574
0000c1 2072      	.DB  0x67,0x65,0x69,0x73,0x74,0x65,0x72,0x20
0000c2 6e61
0000c3 4920
0000c4 0044
0000c5 6544      	.DB  0x61,0x6E,0x20,0x49,0x44,0x0,0x44,0x65
0000c6 656c
0000c7 6574
0000c8 6120
0000c9 6c6c      	.DB  0x6C,0x65,0x74,0x65,0x20,0x61,0x6C,0x6C
0000ca 4920
0000cb 7344
0000cc 5300
0000cd 7379      	.DB  0x20,0x49,0x44,0x73,0x0,0x53,0x79,0x73
0000ce 6574
0000cf 206d
0000d0 7453
0000d1 7461      	.DB  0x74,0x65,0x6D,0x20,0x53,0x74,0x61,0x74
0000d2 7375
0000d3 5000
0000d4 6572
0000d5 7373      	.DB  0x75,0x73,0x0,0x50,0x72,0x65,0x73,0x73
0000d6 2220
0000d7 6553
0000d8 656c
0000d9 7463      	.DB  0x20,0x22,0x53,0x65,0x6C,0x65,0x63,0x74
0000da 0022
0000db 4449
0000dc 2073
0000dd 6f63      	.DB  0x22,0x0,0x49,0x44,0x73,0x20,0x63,0x6F
0000de 6e75
0000df 3a74
0000e0 0020
0000e1 6f56      	.DB  0x75,0x6E,0x74,0x3A,0x20,0x0,0x56,0x6F
0000e2 746c
0000e3 6761
0000e4 3a65
0000e5 0020      	.DB  0x6C,0x74,0x61,0x67,0x65,0x3A,0x20,0x0
0000e6 0056
0000e7 5046
0000e8 2053
0000e9 6f63      	.DB  0x56,0x0,0x46,0x50,0x53,0x20,0x63,0x6F
0000ea 6e75
0000eb 3a74
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1178): warning: .cseg .db misalignment - padding zero byte
0000ec 0000      	.DB  0x75,0x6E,0x74,0x3A,0x0
                 _0x60000:
0000ed 6574
0000ee 6863
0000ef 5243
0000f0 4145      	.DB  0x74,0x65,0x63,0x68,0x43,0x52,0x45,0x41
0000f1 4954
0000f2 4e4f
0000f3 0053      	.DB  0x54,0x49,0x4F,0x4E,0x53,0x0
                 _0x80003:
0000f4 aa55
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1183): warning: .cseg .db misalignment - padding zero byte
0000f5 0001      	.DB  0x55,0xAA,0x1
                 _0x80000:
0000f6 6146
0000f7 6c69
0000f8 6465
0000f9 5000      	.DB  0x46,0x61,0x69,0x6C,0x65,0x64,0x0,0x50
0000fa 616c
0000fb 6563
0000fc 6620
0000fd 6e69      	.DB  0x6C,0x61,0x63,0x65,0x20,0x66,0x69,0x6E
0000fe 6567
0000ff 2072
000100 2800
000101 2f31      	.DB  0x67,0x65,0x72,0x20,0x0,0x28,0x31,0x2F
000102 2933
000103 4600
000104 6961
000105 656c      	.DB  0x33,0x29,0x0,0x46,0x61,0x69,0x6C,0x65
000106 2e64
000107 0020
000108 6552
000109 6573      	.DB  0x64,0x2E,0x20,0x0,0x52,0x65,0x73,0x65
00010a 6974
00010b 676e
00010c 4620
00010d 5350      	.DB  0x74,0x69,0x6E,0x67,0x20,0x46,0x50,0x53
00010e 002e
00010f 6154
000110 656b
000111 6f20      	.DB  0x2E,0x0,0x54,0x61,0x6B,0x65,0x20,0x6F
000112 2066
000113 6874
000114 2065
000115 6600      	.DB  0x66,0x20,0x74,0x68,0x65,0x20,0x0,0x66
000116 6e69
000117 6567
000118 2e72
000119 2800      	.DB  0x69,0x6E,0x67,0x65,0x72,0x2E,0x0,0x28
00011a 2f32
00011b 2933
00011c 4600
00011d 6961      	.DB  0x32,0x2F,0x33,0x29,0x0,0x46,0x61,0x69
00011e 656c
00011f 2e64
000120 5220
000121 7365      	.DB  0x6C,0x65,0x64,0x2E,0x20,0x52,0x65,0x73
000122 7465
000123 6e69
000124 2067
000125 2800      	.DB  0x65,0x74,0x69,0x6E,0x67,0x20,0x0,0x28
000126 2f33
000127 2933
000128 4500
000129 726e      	.DB  0x33,0x2F,0x33,0x29,0x0,0x45,0x6E,0x72
00012a 6c6f
00012b 6d6c
00012c 6e65
00012d 2074      	.DB  0x6F,0x6C,0x6C,0x6D,0x65,0x6E,0x74,0x20
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1199): warning: .cseg .db misalignment - padding zero byte
00012e 0000      	.DB  0x0
                 _0x2020003:
00012f c080      	.DB  0x80,0xC0
                 _0x2040060:
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1203): warning: .cseg .db misalignment - padding zero byte
000130 0001      	.DB  0x1
                 _0x2040000:
000131 4e2d
000132 4e41
000133 4900
000134 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Important\Projects\TC\FPS Doorlock\CVproj\List\fpsproj.asm(1206): warning: .cseg .db misalignment - padding zero byte
000135 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000136 0001      	.DW  0x01
000137 0002      	.DW  0x02
000138 0070      	.DW  __REG_BIT_VARS*2
                 
000139 0002      	.DW  0x02
00013a 0004      	.DW  0x04
00013b 0072      	.DW  _0xB6*2
                 
00013c 0003      	.DW  0x03
00013d 018e      	.DW  _txPacket
00013e 01e8      	.DW  _0x80003*2
                 
00013f 0002      	.DW  0x02
000140 01a6      	.DW  __base_y_G101
000141 025e      	.DW  _0x2020003*2
                 
000142 0001      	.DW  0x01
000143 01ac      	.DW  __seed_G102
000144 0260      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000145 0000      	.DW  0
                 
                 __RESET:
000146 94f8      	CLI
000147 27ee      	CLR  R30
000148 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000149 e0f1      	LDI  R31,1
00014a bffb      	OUT  GICR,R31
00014b bfeb      	OUT  GICR,R30
00014c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00014d e1f8      	LDI  R31,0x18
00014e bdf1      	OUT  WDTCR,R31
00014f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000150 e08d      	LDI  R24,(14-2)+1
000151 e0a2      	LDI  R26,2
000152 27bb      	CLR  R27
                 __CLEAR_REG:
000153 93ed      	ST   X+,R30
000154 958a      	DEC  R24
000155 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000156 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000157 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000158 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000159 93ed      	ST   X+,R30
00015a 9701      	SBIW R24,1
00015b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00015c e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00015d e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00015e 9185      	LPM  R24,Z+
00015f 9195      	LPM  R25,Z+
000160 9700      	SBIW R24,0
000161 f061      	BREQ __GLOBAL_INI_END
000162 91a5      	LPM  R26,Z+
000163 91b5      	LPM  R27,Z+
000164 9005      	LPM  R0,Z+
000165 9015      	LPM  R1,Z+
000166 01bf      	MOVW R22,R30
000167 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000168 9005      	LPM  R0,Z+
000169 920d      	ST   X+,R0
00016a 9701      	SBIW R24,1
00016b f7e1      	BRNE __GLOBAL_INI_LOOP
00016c 01fb      	MOVW R30,R22
00016d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00016e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00016f bfed      	OUT  SPL,R30
000170 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000171 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000172 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000173 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000174 c103      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include "projHeaders.h"
                 ;#include "projDefines.h"
                 ;#include "FPS_GT511Cx.h"
                 ;#include "GPS_GT511x_comDefs.h"
                 ;#include "customCharsCG.h"
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;// Declare your global variables here
                 ;eeprom char securityMethod;
                 ;eeprom char failedCount;
                 ;
                 ;//not tested
                 ;unsigned char askAuthentication(void)
                 ; 0000 0012 {
                 
                 	.CSEG
                 _askAuthentication:
                 ; 0000 0013     unsigned char i = 20;
                 ; 0000 0014     lcd_clear();
000175 931a      	ST   -Y,R17
                 ;	i -> R17
000176 e114      	LDI  R17,20
000177 d7c7      	RCALL _lcd_clear
                 ; 0000 0015     lcd_putsf("Kindly Give your");
                +
000178 e7a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000179 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
00017a d844      	RCALL SUBOPT_0x0
                 ; 0000 0016     lcd_gotoxy(0,1);
                 ; 0000 0017     lcd_putsf("authentication");
                +
00017b e8a5     +LDI R26 , LOW ( 2 * _0x0 + ( 17 ) )
00017c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW2FN _0x0,17
00017d d846      	RCALL SUBOPT_0x1
                 ; 0000 0018     delay_ms(1000);
                 ; 0000 0019     i = getIdFinally(3, 0);
00017e d849      	RCALL SUBOPT_0x2
                 ; 0000 001A     return  ((i < 8) || (i == 10));
00017f f020      	BRLO _0x3
000180 301a      	CPI  R17,10
000181 f011      	BREQ _0x3
000182 e0e0      	LDI  R30,0
000183 c001      	RJMP _0x4
                 _0x3:
000184 e0e1      	LDI  R30,1
                 _0x4:
000185 c651      	RJMP _0x20C000A
                 ; 0000 001B }
                 ;//not tested
                 ;unsigned char getIdFinally(unsigned char retries, unsigned char isForDoor)
                 ; 0000 001E {
                 _getIdFinally:
                 ; 0000 001F     unsigned char i = 0, id = 10, j = 0;
                 ; 0000 0020     bip();
000186 93aa      	ST   -Y,R26
000187 dc84      	RCALL __SAVELOCR4
                 ;	retries -> Y+5
                 ;	isForDoor -> Y+4
                 ;	i -> R17
                 ;	id -> R16
                 ;	j -> R19
000188 e010      	LDI  R17,0
000189 e00a      	LDI  R16,10
00018a e030      	LDI  R19,0
00018b d6b7      	RCALL _bip
                 ; 0000 0021     if (!isForDoor)
00018c d842      	RCALL SUBOPT_0x3
00018d f421      	BRNE _0x5
                 ; 0000 0022     {
                 ; 0000 0023         lcd_clear();
00018e d7b0      	RCALL _lcd_clear
                 ; 0000 0024         lcd_putsf("Place the finger");
                +
00018f e9a4     +LDI R26 , LOW ( 2 * _0x0 + ( 32 ) )
000190 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 32 ) )
                 	__POINTW2FN _0x0,32
000191 d7d3      	RCALL _lcd_putsf
                 ; 0000 0025         //delay_ms(2000);
                 ; 0000 0026     }
                 ; 0000 0027 
                 ; 0000 0028     FPS_power be ON;
                 _0x5:
000192 d83f      	RCALL SUBOPT_0x4
                 ; 0000 0029     FPS_open();
                 ; 0000 002A     for (i = 0; i < retries; i++)
000193 e010      	LDI  R17,LOW(0)
                 _0x9:
000194 81ed      	LDD  R30,Y+5
000195 171e      	CP   R17,R30
000196 f008      	BRLO PC+2
000197 c04d      	RJMP _0xA
                 ; 0000 002B     {
                 ; 0000 002C         autoSleepTimer = 0;
000198 e0e0      	LDI  R30,LOW(0)
000199 93e0 0166 	STS  _autoSleepTimer,R30
                 ; 0000 002D         if (failedCount >= 5 && junkFreeTimer < 60)
00019b d838      	RCALL SUBOPT_0x5
00019c f020      	BRLO _0xC
00019d 91a0 0165 	LDS  R26,_junkFreeTimer
00019f 33ac      	CPI  R26,LOW(0x3C)
0001a0 f008      	BRLO _0xD
                 _0xC:
0001a1 c005      	RJMP _0xB
                 _0xD:
                 ; 0000 002E         {
                 ; 0000 002F             FPS_power be OFF;
0001a2 9892      	CBI  0x12,2
                 ; 0000 0030             lcd_clear();
0001a3 d79b      	RCALL _lcd_clear
                 ; 0000 0031             soundAlarm();
0001a4 d66b      	RCALL _soundAlarm
                 ; 0000 0032             return 11;
0001a5 e0eb      	LDI  R30,LOW(11)
0001a6 c03f      	RJMP _0x20C000E
                 ; 0000 0033         }
                 ; 0000 0034         else if (failedCount >= 5)
                 _0xB:
0001a7 d82c      	RCALL SUBOPT_0x5
0001a8 f008      	BRLO _0x11
                 ; 0000 0035         {
                 ; 0000 0036             failedCount = 0;
0001a9 d82f      	RCALL SUBOPT_0x6
                 ; 0000 0037         }
                 ; 0000 0038 
                 ; 0000 0039         setCmosLED(1);
                 _0x11:
0001aa d833      	RCALL SUBOPT_0x7
                 ; 0000 003A         while (!fingerPressed())
                 _0x12:
0001ab d834      	RCALL SUBOPT_0x8
0001ac f451      	BRNE _0x14
                 ; 0000 003B         {
                 ; 0000 003C             if (cancel_PB is pressed || autoSleepTimer > 5)
0001ad d835      	RCALL SUBOPT_0x9
0001ae f021      	BREQ _0x16
0001af 91a0 0166 	LDS  R26,_autoSleepTimer
0001b1 30a6      	CPI  R26,LOW(0x6)
0001b2 f018      	BRLO _0x15
                 _0x16:
                 ; 0000 003D             {
                 ; 0000 003E                 FPS_power be OFF;
0001b3 9892      	CBI  0x12,2
                 ; 0000 003F                 return 9;
0001b4 e0e9      	LDI  R30,LOW(9)
0001b5 c030      	RJMP _0x20C000E
                 ; 0000 0040             }
                 ; 0000 0041         }
                 _0x15:
0001b6 cff4      	RJMP _0x12
                 _0x14:
                 ; 0000 0042         setCmosLED(1);
0001b7 d826      	RCALL SUBOPT_0x7
                 ; 0000 0043         //delay_ms(250);
                 ; 0000 0044         for (j = 0; j < 10 ; j++)
0001b8 e030      	LDI  R19,LOW(0)
                 _0x1B:
0001b9 303a      	CPI  R19,10
0001ba f438      	BRSH _0x1C
                 ; 0000 0045         {
                 ; 0000 0046             id = getFingerId();
0001bb d574      	RCALL _getFingerId
0001bc 2f0e      	MOV  R16,R30
                 ; 0000 0047             if (id < 8)
0001bd 3008      	CPI  R16,8
0001be f408      	BRSH _0x1D
                 ; 0000 0048             {
                 ; 0000 0049                 j = 10;
0001bf e03a      	LDI  R19,LOW(10)
                 ; 0000 004A             }
                 ; 0000 004B             else
                 _0x1D:
                 ; 0000 004C             {
                 ; 0000 004D                 //delay_ms(100);
                 ; 0000 004E             }
                 ; 0000 004F         }
0001c0 5f3f      	SUBI R19,-1
0001c1 cff7      	RJMP _0x1B
                 _0x1C:
                 ; 0000 0050         if (id < 8)
0001c2 3008      	CPI  R16,8
0001c3 f480      	BRSH _0x1F
                 ; 0000 0051         {
                 ; 0000 0052             FPS_power be OFF;
0001c4 9892      	CBI  0x12,2
                 ; 0000 0053             failedCount = 0;
0001c5 d813      	RCALL SUBOPT_0x6
                 ; 0000 0054 
                 ; 0000 0055             if (!isForDoor)
0001c6 d808      	RCALL SUBOPT_0x3
0001c7 f449      	BRNE _0x22
                 ; 0000 0056             {
                 ; 0000 0057                 if (!isForDoor)
0001c8 d806      	RCALL SUBOPT_0x3
0001c9 f421      	BRNE _0x23
                 ; 0000 0058                 {
                 ; 0000 0059                     lcd_clear();
0001ca d774      	RCALL _lcd_clear
                 ; 0000 005A                     lcd_putsf("Thank you: ");
                +
0001cb eaa5     +LDI R26 , LOW ( 2 * _0x0 + ( 49 ) )
0001cc e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 49 ) )
                 	__POINTW2FN _0x0,49
0001cd d81a      	RCALL SUBOPT_0xA
                 ; 0000 005B 
                 ; 0000 005C                     lcd_putchar('0' + id);
                 ; 0000 005D                 }
                 ; 0000 005E                 soundOK();
                 _0x23:
0001ce d639      	RCALL _soundOK
                 ; 0000 005F                 delay_ms(1000);
0001cf d81c      	RCALL SUBOPT_0xB
                 ; 0000 0060             }
                 ; 0000 0061             else
0001d0 c001      	RJMP _0x24
                 _0x22:
                 ; 0000 0062             bip();
0001d1 d671      	RCALL _bip
                 ; 0000 0063 
                 ; 0000 0064             return id;
                 _0x24:
0001d2 2fe0      	MOV  R30,R16
0001d3 c012      	RJMP _0x20C000E
                 ; 0000 0065         }
                 ; 0000 0066         else
                 _0x1F:
                 ; 0000 0067         {
                 ; 0000 0068             if (!isForDoor)
0001d4 d7fa      	RCALL SUBOPT_0x3
0001d5 f421      	BRNE _0x26
                 ; 0000 0069             {
                 ; 0000 006A                 lcd_clear();
0001d6 d768      	RCALL _lcd_clear
                 ; 0000 006B                 lcd_putsf("Access denied: ");
                +
0001d7 eba1     +LDI R26 , LOW ( 2 * _0x0 + ( 61 ) )
0001d8 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 61 ) )
                 	__POINTW2FN _0x0,61
0001d9 d80e      	RCALL SUBOPT_0xA
                 ; 0000 006C 
                 ; 0000 006D                 lcd_putchar('0' + id);
                 ; 0000 006E             }
                 ; 0000 006F             failedCount ++;
                 _0x26:
0001da e0a1      	LDI  R26,LOW(_failedCount)
0001db e0b0      	LDI  R27,HIGH(_failedCount)
0001dc d812      	RCALL SUBOPT_0xC
                 ; 0000 0070             if (failedCount >=5)
0001dd d7f6      	RCALL SUBOPT_0x5
0001de f018      	BRLO _0x27
                 ; 0000 0071                 junkFreeTimer = 0;
0001df e0e0      	LDI  R30,LOW(0)
0001e0 93e0 0165 	STS  _junkFreeTimer,R30
                 ; 0000 0072         }
                 _0x27:
                 ; 0000 0073         soundError();
0001e2 d641      	RCALL _soundError
                 ; 0000 0074     }
0001e3 5f1f      	SUBI R17,-1
0001e4 cfaf      	RJMP _0x9
                 _0xA:
                 ; 0000 0075     return 12;
0001e5 e0ec      	LDI  R30,LOW(12)
                 _0x20C000E:
0001e6 dc2c      	RCALL __LOADLOCR4
0001e7 9626      	ADIW R28,6
0001e8 9508      	RET
                 ; 0000 0076 }
                 ;
                 ;//not tested
                 ;unsigned int registerID(void)
                 ; 0000 007A {
                 _registerID:
                 ; 0000 007B     char i = 0, j = 0, k = 0;
                 ; 0000 007C     lcd_clear();
0001e9 dc22      	RCALL __SAVELOCR4
                 ;	i -> R17
                 ;	j -> R16
                 ;	k -> R19
0001ea e010      	LDI  R17,0
0001eb e000      	LDI  R16,0
0001ec e030      	LDI  R19,0
0001ed d751      	RCALL _lcd_clear
                 ; 0000 007D     FPS_power be ON;
0001ee d7e3      	RCALL SUBOPT_0x4
                 ; 0000 007E     FPS_open();
                 ; 0000 007F     i = getEnrolledCount();
0001ef d524      	RCALL _getEnrolledCount
0001f0 2f1e      	MOV  R17,R30
                 ; 0000 0080     if (i >= 8)
0001f1 3018      	CPI  R17,8
0001f2 f050      	BRLO _0x2A
                 ; 0000 0081     {
                 ; 0000 0082         FPS_power be OFF;
0001f3 9892      	CBI  0x12,2
                 ; 0000 0083         lcd_putsf("Memory Full!");
                +
0001f4 eca1     +LDI R26 , LOW ( 2 * _0x0 + ( 77 ) )
0001f5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 77 ) )
                 	__POINTW2FN _0x0,77
0001f6 d7c8      	RCALL SUBOPT_0x0
                 ; 0000 0084         lcd_gotoxy(0,1);
                 ; 0000 0085         lcd_putsf("Delete an ID");
                +
0001f7 ecae     +LDI R26 , LOW ( 2 * _0x0 + ( 90 ) )
0001f8 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 90 ) )
                 	__POINTW2FN _0x0,90
0001f9 d7fa      	RCALL SUBOPT_0xD
                 ; 0000 0086         delay_ms(2000);
                 ; 0000 0087         return 10;
0001fa d7fd      	RCALL SUBOPT_0xE
0001fb dc17      	RCALL __LOADLOCR4
0001fc c549      	RJMP _0x20C000B
                 ; 0000 0088     }
                 ; 0000 0089     i = getAFreeId();
                 _0x2A:
0001fd d54a      	RCALL _getAFreeId
0001fe 2f1e      	MOV  R17,R30
                 ; 0000 008A     j = getEnrolledCount();
0001ff d514      	RCALL _getEnrolledCount
000200 2f0e      	MOV  R16,R30
                 ; 0000 008B     lcd_clear();
000201 d73d      	RCALL _lcd_clear
                 ; 0000 008C     lcd_putsf("ID available: ");
                +
000202 edab     +LDI R26 , LOW ( 2 * _0x0 + ( 103 ) )
000203 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 103 ) )
                 	__POINTW2FN _0x0,103
000204 d7f6      	RCALL SUBOPT_0xF
                 ; 0000 008D     lcd_putchar('0' + i);
                 ; 0000 008E     lcd_gotoxy(0,1);
                 ; 0000 008F     lcd_putsf("Remaining: ");
                 ; 0000 0090     lcd_putchar(8 - j + '0');
000205 1be0      	SUB  R30,R16
000206 d801      	RCALL SUBOPT_0x10
                 ; 0000 0091     delay_ms(2000);
                 ; 0000 0092     i = enrollAFinger(i);
000207 2fa1      	MOV  R26,R17
000208 d54c      	RCALL _enrollAFinger
000209 2f1e      	MOV  R17,R30
                 ; 0000 0093     while (cancel_PB is pressed);
                 _0x2D:
00020a 9b85      	SBIS 0x10,5
00020b cffe      	RJMP _0x2D
                 ; 0000 0094     if (i == 2)
00020c 3012      	CPI  R17,2
00020d f411      	BRNE _0x30
                 ; 0000 0095     {
                 ; 0000 0096         soundCancel();
00020e d61a      	RCALL _soundCancel
                 ; 0000 0097     }
                 ; 0000 0098     else
00020f c013      	RJMP _0x31
                 _0x30:
                 ; 0000 0099     {
                 ; 0000 009A         k = getEnrolledCount();
000210 d503      	RCALL _getEnrolledCount
000211 2f3e      	MOV  R19,R30
                 ; 0000 009B         if (j == k) // failed
000212 1730      	CP   R19,R16
000213 f429      	BRNE _0x32
                 ; 0000 009C         {
                 ; 0000 009D             lcd_putsf("failed.");
                +
000214 efa6     +LDI R26 , LOW ( 2 * _0x0 + ( 130 ) )
000215 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 130 ) )
                 	__POINTW2FN _0x0,130
000216 d74e      	RCALL _lcd_putsf
                 ; 0000 009E             soundError();
000217 d60c      	RCALL _soundError
                 ; 0000 009F         }
                 ; 0000 00A0         else
000218 c003      	RJMP _0x33
                 _0x32:
                 ; 0000 00A1         {
                 ; 0000 00A2             lcd_putsf("Succeeded");
                +
000219 efae     +LDI R26 , LOW ( 2 * _0x0 + ( 138 ) )
00021a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 138 ) )
                 	__POINTW2FN _0x0,138
00021b d749      	RCALL _lcd_putsf
                 ; 0000 00A3         }
                 _0x33:
                 ; 0000 00A4         delay_ms(1000);
00021c d7cf      	RCALL SUBOPT_0xB
                 ; 0000 00A5         lcd_clear();
00021d d721      	RCALL _lcd_clear
                 ; 0000 00A6         lcd_putsf("Saved at: ");
                +
00021e e0a8     +LDI R26 , LOW ( 2 * _0x0 + ( 148 ) )
00021f e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 148 ) )
                 	__POINTW2FN _0x0,148
000220 d7da      	RCALL SUBOPT_0xF
                 ; 0000 00A7         lcd_putchar(i + '0');
                 ; 0000 00A8         lcd_gotoxy(0,1);
                 ; 0000 00A9         lcd_putsf("Remaining: ");
                 ; 0000 00AA         lcd_putchar(8 - k + '0');
000221 1be3      	SUB  R30,R19
000222 d7e5      	RCALL SUBOPT_0x10
                 ; 0000 00AB         delay_ms(2000);
                 ; 0000 00AC 
                 ; 0000 00AD     }
                 _0x31:
                 ; 0000 00AE     FPS_power be OFF;
000223 9892      	CBI  0x12,2
                 ; 0000 00AF     return i;
000224 2fe1      	MOV  R30,R17
000225 d7e8      	RCALL SUBOPT_0x11
000226 dbec      	RCALL __LOADLOCR4
000227 c51e      	RJMP _0x20C000B
                 ; 0000 00B0 }
                 ;//not tested
                 ;void deleteIdByFinger(unsigned char all)
                 ; 0000 00B3 {
                 _deleteIdByFinger:
                 ; 0000 00B4     char i = 0;
                 ; 0000 00B5     lcd_clear();
000228 93aa      	ST   -Y,R26
000229 931a      	ST   -Y,R17
                 ;	all -> Y+1
                 ;	i -> R17
00022a e010      	LDI  R17,0
00022b d713      	RCALL _lcd_clear
                 ; 0000 00B6     lcd_putsf("Place the");
                +
00022c e1a3     +LDI R26 , LOW ( 2 * _0x0 + ( 159 ) )
00022d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 159 ) )
                 	__POINTW2FN _0x0,159
00022e d790      	RCALL SUBOPT_0x0
                 ; 0000 00B7     lcd_gotoxy(0,1);
                 ; 0000 00B8     lcd_putsf("finger");
                +
00022f e9ae     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
000230 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
000231 d733      	RCALL _lcd_putsf
                 ; 0000 00B9     i = getIdFinally(3, 0);
000232 d795      	RCALL SUBOPT_0x2
                 ; 0000 00BA     if (i == 8)
000233 f431      	BRNE _0x36
                 ; 0000 00BB     {
                 ; 0000 00BC         soundError();
000234 d5ef      	RCALL _soundError
                 ; 0000 00BD         lcd_putsf("Unknown ID");
                +
000235 e1ad     +LDI R26 , LOW ( 2 * _0x0 + ( 169 ) )
000236 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 169 ) )
                 	__POINTW2FN _0x0,169
000237 d7bc      	RCALL SUBOPT_0xD
                 ; 0000 00BE         delay_ms(2000);
                 ; 0000 00BF         return;
000238 8118      	LDD  R17,Y+0
000239 c703      	RJMP _0x20C0002
                 ; 0000 00C0     }
                 ; 0000 00C1     else if (i > 8)
                 _0x36:
00023a 3019      	CPI  R17,9
00023b f030      	BRLO _0x38
                 ; 0000 00C2     {
                 ; 0000 00C3         soundError();
00023c d5e7      	RCALL _soundError
                 ; 0000 00C4         lcd_putsf("ERROR");
                +
00023d e2a8     +LDI R26 , LOW ( 2 * _0x0 + ( 180 ) )
00023e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 180 ) )
                 	__POINTW2FN _0x0,180
00023f d7b4      	RCALL SUBOPT_0xD
                 ; 0000 00C5         delay_ms(2000);
                 ; 0000 00C6         return;
000240 8118      	LDD  R17,Y+0
000241 c6fb      	RJMP _0x20C0002
                 ; 0000 00C7     }
                 ; 0000 00C8 
                 ; 0000 00C9     while(options_PB is pressed or cancel_PB is pressed or select_PB is pressed);
                 _0x38:
                 _0x39:
000242 d7cd      	RCALL SUBOPT_0x12
000243 f039      	BREQ _0x3C
000244 d79e      	RCALL SUBOPT_0x9
000245 f029      	BREQ _0x3C
000246 e0a0      	LDI  R26,0
000247 9986      	SBIC 0x10,6
000248 e0a1      	LDI  R26,1
000249 30a0      	CPI  R26,LOW(0x0)
00024a f409      	BRNE _0x3B
                 _0x3C:
00024b cff6      	RJMP _0x39
                 _0x3B:
                 ; 0000 00CA 
                 ; 0000 00CB     lcd_clear();
00024c d6f2      	RCALL _lcd_clear
                 ; 0000 00CC     lcd_putsf("Confirm?");
                +
00024d e2ae     +LDI R26 , LOW ( 2 * _0x0 + ( 186 ) )
00024e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 186 ) )
                 	__POINTW2FN _0x0,186
00024f d715      	RCALL _lcd_putsf
                 ; 0000 00CD     soundQuestion();
000250 d5ba      	RCALL _soundQuestion
                 ; 0000 00CE     while(options_PB is unpressed and cancel_PB is unpressed and select_PB is unpressed);
                 _0x3E:
000251 9b87      	SBIS 0x10,7
000252 c004      	RJMP _0x41
000253 9b85      	SBIS 0x10,5
000254 c002      	RJMP _0x41
000255 9986      	SBIC 0x10,6
000256 c001      	RJMP _0x42
                 _0x41:
000257 c001      	RJMP _0x40
                 _0x42:
000258 cff8      	RJMP _0x3E
                 _0x40:
                 ; 0000 00CF     if (select_PB is pressed)
000259 9986      	SBIC 0x10,6
00025a c01a      	RJMP _0x43
                 ; 0000 00D0     {
                 ; 0000 00D1         FPS_power be ON;
00025b d776      	RCALL SUBOPT_0x4
                 ; 0000 00D2         FPS_open();
                 ; 0000 00D3 
                 ; 0000 00D4         if(all)
00025c 81e9      	LDD  R30,Y+1
00025d 30e0      	CPI  R30,0
00025e f061      	BREQ _0x46
                 ; 0000 00D5         {
                 ; 0000 00D6             for(all = 0; all < 8; all++)
00025f d7b5      	RCALL SUBOPT_0x13
                 _0x48:
000260 81a9      	LDD  R26,Y+1
000261 30a8      	CPI  R26,LOW(0x8)
000262 f438      	BRSH _0x49
                 ; 0000 00D7             {
                 ; 0000 00D8                 if (all != i)
000263 171a      	CP   R17,R26
000264 f009      	BREQ _0x4A
                 ; 0000 00D9                     deleteID(all);
000265 d4bf      	RCALL _deleteID
                 ; 0000 00DA             }
                 _0x4A:
000266 81e9      	LDD  R30,Y+1
000267 5fef      	SUBI R30,-LOW(1)
000268 83e9      	STD  Y+1,R30
000269 cff6      	RJMP _0x48
                 _0x49:
                 ; 0000 00DB         }
                 ; 0000 00DC         else
00026a c002      	RJMP _0x4B
                 _0x46:
                 ; 0000 00DD             deleteID(i);
00026b 2fa1      	MOV  R26,R17
00026c d4b8      	RCALL _deleteID
                 ; 0000 00DE         FPS_power be OFF;
                 _0x4B:
00026d 9892      	CBI  0x12,2
                 ; 0000 00DF         lcd_clear();
00026e d6d0      	RCALL _lcd_clear
                 ; 0000 00E0         lcd_putsf("Deleted");
                +
00026f e3a7     +LDI R26 , LOW ( 2 * _0x0 + ( 195 ) )
000270 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 195 ) )
                 	__POINTW2FN _0x0,195
000271 d6f3      	RCALL _lcd_putsf
                 ; 0000 00E1         soundSuccess();
000272 d5a4      	RCALL _soundSuccess
                 ; 0000 00E2         delay_ms(1000);
000273 d778      	RCALL SUBOPT_0xB
                 ; 0000 00E3     }
                 ; 0000 00E4     else
000274 c001      	RJMP _0x4E
                 _0x43:
                 ; 0000 00E5     {
                 ; 0000 00E6         soundCancel();
000275 d5b3      	RCALL _soundCancel
                 ; 0000 00E7     }
                 _0x4E:
                 ; 0000 00E8 }
000276 8118      	LDD  R17,Y+0
000277 c6c5      	RJMP _0x20C0002
                 ;signed char menuOpt = -1, refreshMenu = 1;
                 ;void main(void)
                 ; 0000 00EB {
                 _main:
                 ; 0000 00EC     char i = 0, notSpace = 15, alreadyFresh = 0;;
                 ; 0000 00ED     //Init Block
                 ; 0000 00EE     {
                 ;	i -> R17
                 ;	notSpace -> R16
                 ;	alreadyFresh -> R19
000278 e010      	LDI  R17,0
000279 e00f      	LDI  R16,15
00027a e030      	LDI  R19,0
                 ; 0000 00EF         controller_init();
00027b d3a3      	RCALL _controller_init
                 ; 0000 00F0 
                 ; 0000 00F1         if (resetByWDT == 1)
                 ; 0000 00F2         {
                 ; 0000 00F3             resetByWDT = 0;
                 ; 0000 00F4             goto resumeSession;
                 ; 0000 00F5         }
                 ; 0000 00F6         resetByWDT = 0;
                 _0xB2:
00027c e0a0      	LDI  R26,LOW(_resetByWDT)
00027d e0b0      	LDI  R27,HIGH(_resetByWDT)
00027e e0e0      	LDI  R30,LOW(0)
00027f db6b      	RCALL __EEPROMWRB
                 ; 0000 00F7 
                 ; 0000 00F8     }
                 ; 0000 00F9 
                 ; 0000 00FA     resumeSession:
                 ; 0000 00FB 
                 ; 0000 00FC     failedCount = 0;
000280 d758      	RCALL SUBOPT_0x6
                 ; 0000 00FD 
                 ; 0000 00FE     while(1)
                 _0x51:
                 ; 0000 00FF     {
                 ; 0000 0100         if (lockMotor is ON || FPS_power is ON)
000281 99c7      	SBIC 0x18,7
000282 c002      	RJMP _0x55
000283 9b92      	SBIS 0x12,2
000284 c001      	RJMP _0x54
                 _0x55:
                 ; 0000 0101         {
                 ; 0000 0102             controllerReset();
000285 d553      	RCALL _controllerReset
                 ; 0000 0103         }
                 ; 0000 0104 
                 ; 0000 0105         if (elapsed_sec % 10 == 0 && menuOpt == -1 && !alreadyFresh)
                 _0x54:
000286 d791      	RCALL SUBOPT_0x14
000287 d795      	RCALL SUBOPT_0x15
000288 9730      	SBIW R30,0
000289 f429      	BRNE _0x58
00028a efef      	LDI  R30,LOW(255)
00028b 15e5      	CP   R30,R5
00028c f411      	BRNE _0x58
00028d 3030      	CPI  R19,0
00028e f009      	BREQ _0x59
                 _0x58:
00028f c003      	RJMP _0x57
                 _0x59:
                 ; 0000 0106         {
                 ; 0000 0107             refreshMenu = 1;
000290 d78f      	RCALL SUBOPT_0x16
                 ; 0000 0108             alreadyFresh = 1;
000291 e031      	LDI  R19,LOW(1)
                 ; 0000 0109         }
                 ; 0000 010A         else
000292 c001      	RJMP _0x5A
                 _0x57:
                 ; 0000 010B         {
                 ; 0000 010C             alreadyFresh = 0;
000293 e030      	LDI  R19,LOW(0)
                 ; 0000 010D         }
                 _0x5A:
                 ; 0000 010E         if (refreshMenu)
000294 2044      	TST  R4
000295 f409      	BRNE PC+2
000296 c09c      	RJMP _0x5B
                 ; 0000 010F         {
                 ; 0000 0110             notSpace = 15;
000297 e00f      	LDI  R16,LOW(15)
                 ; 0000 0111             refreshMenu = 0;
000298 2444      	CLR  R4
                 ; 0000 0112             lcd_clear();
000299 d6a5      	RCALL _lcd_clear
                 ; 0000 0113             switch (menuOpt)
00029a d788      	RCALL SUBOPT_0x17
                 ; 0000 0114             {
                 ; 0000 0115                 case -1: //no menu
00029b 3fef      	CPI  R30,LOW(0xFFFFFFFF)
00029c efaf      	LDI  R26,HIGH(0xFFFFFFFF)
00029d 07fa      	CPC  R31,R26
00029e f541      	BRNE _0x5F
                 ; 0000 0116                     lcd_gotoxy(10,0);
00029f e0ea      	LDI  R30,LOW(10)
0002a0 93ea      	ST   -Y,R30
0002a1 d786      	RCALL SUBOPT_0x18
                 ; 0000 0117                     if (mV < 4500)
0002a2 d787      	RCALL SUBOPT_0x19
0002a3 39a4      	CPI  R26,LOW(0x1194)
0002a4 e1e1      	LDI  R30,HIGH(0x1194)
0002a5 07be      	CPC  R27,R30
0002a6 f424      	BRGE _0x60
                 ; 0000 0118                     {
                 ; 0000 0119                         lcd_gotoxy(notSpace, 0);
0002a7 d787      	RCALL SUBOPT_0x1A
                 ; 0000 011A                         notSpace --;
0002a8 5001      	SUBI R16,1
                 ; 0000 011B                         lcd_putchar(2);
0002a9 e0a2      	LDI  R26,LOW(2)
0002aa d6a3      	RCALL _lcd_putchar
                 ; 0000 011C                     }
                 ; 0000 011D                     if (mV > 4300)
                 _0x60:
0002ab d785      	RCALL SUBOPT_0x1B
0002ac f024      	BRLT _0x61
                 ; 0000 011E                     {
                 ; 0000 011F                         lcd_gotoxy(notSpace, 0);
0002ad d781      	RCALL SUBOPT_0x1A
                 ; 0000 0120                         notSpace --;
0002ae 5001      	SUBI R16,1
                 ; 0000 0121                         lcd_putchar(3);
0002af e0a3      	LDI  R26,LOW(3)
0002b0 d69d      	RCALL _lcd_putchar
                 ; 0000 0122                     }
                 ; 0000 0123                     lcd_gotoxy(notSpace, 0);
                 _0x61:
0002b1 d77d      	RCALL SUBOPT_0x1A
                 ; 0000 0124                     notSpace --;
0002b2 5001      	SUBI R16,1
                 ; 0000 0125                     if (securityMethod == 1)
0002b3 d782      	RCALL SUBOPT_0x1C
0002b4 30e1      	CPI  R30,LOW(0x1)
0002b5 f411      	BRNE _0x62
                 ; 0000 0126                     {
                 ; 0000 0127                         lcd_putchar(6);
0002b6 e0a6      	LDI  R26,LOW(6)
0002b7 c006      	RJMP _0xB3
                 ; 0000 0128                     }
                 ; 0000 0129                     else if (securityMethod == 2)
                 _0x62:
0002b8 d77d      	RCALL SUBOPT_0x1C
0002b9 30e2      	CPI  R30,LOW(0x2)
0002ba f411      	BRNE _0x64
                 ; 0000 012A                     {
                 ; 0000 012B                         lcd_putchar(5);
0002bb e0a5      	LDI  R26,LOW(5)
0002bc c001      	RJMP _0xB3
                 ; 0000 012C                     }
                 ; 0000 012D                     else
                 _0x64:
                 ; 0000 012E                     {
                 ; 0000 012F                         lcd_putchar(4);
0002bd e0a4      	LDI  R26,LOW(4)
                 _0xB3:
0002be d68f      	RCALL _lcd_putchar
                 ; 0000 0130                     }
                 ; 0000 0131 
                 ; 0000 0132                     lcd_gotoxy(0,1);
0002bf e0e0      	LDI  R30,LOW(0)
0002c0 93ea      	ST   -Y,R30
0002c1 e0a1      	LDI  R26,LOW(1)
0002c2 d66d      	RCALL _lcd_gotoxy
                 ; 0000 0133                     lcd_putsf("> Menu");
                +
0002c3 e3af     +LDI R26 , LOW ( 2 * _0x0 + ( 203 ) )
0002c4 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 203 ) )
                 	__POINTW2FN _0x0,203
0002c5 d69f      	RCALL _lcd_putsf
                 ; 0000 0134                 break;
0002c6 c06c      	RJMP _0x5E
                 ; 0000 0135 
                 ; 0000 0136                 case 0:
                 _0x5F:
0002c7 9730      	SBIW R30,0
0002c8 f499      	BRNE _0x66
                 ; 0000 0137                     lcd_putsf("Security:");
                +
0002c9 e4a6     +LDI R26 , LOW ( 2 * _0x0 + ( 210 ) )
0002ca e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 210 ) )
                 	__POINTW2FN _0x0,210
0002cb d6f3      	RCALL SUBOPT_0x0
                 ; 0000 0138                     lcd_gotoxy(0,1);
                 ; 0000 0139                     if (securityMethod == 1)
0002cc d769      	RCALL SUBOPT_0x1C
0002cd 30e1      	CPI  R30,LOW(0x1)
0002ce f419      	BRNE _0x67
                 ; 0000 013A                         lcd_putsf("\"Go Smart\"");
                +
0002cf e5a0     +LDI R26 , LOW ( 2 * _0x0 + ( 220 ) )
0002d0 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 220 ) )
                 	__POINTW2FN _0x0,220
0002d1 c008      	RJMP _0xB4
                 ; 0000 013B                     else if (securityMethod == 2)
                 _0x67:
0002d2 d763      	RCALL SUBOPT_0x1C
0002d3 30e2      	CPI  R30,LOW(0x2)
0002d4 f419      	BRNE _0x69
                 ; 0000 013C                         lcd_putsf("\"Open for all\"");
                +
0002d5 e5ab     +LDI R26 , LOW ( 2 * _0x0 + ( 231 ) )
0002d6 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 231 ) )
                 	__POINTW2FN _0x0,231
0002d7 c002      	RJMP _0xB4
                 ; 0000 013D                     else
                 _0x69:
                 ; 0000 013E                         lcd_putsf("\"Lock the Door\"");
                +
0002d8 e6aa     +LDI R26 , LOW ( 2 * _0x0 + ( 246 ) )
0002d9 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 246 ) )
                 	__POINTW2FN _0x0,246
                 _0xB4:
0002da d68a      	RCALL _lcd_putsf
                 ; 0000 013F                 break;
0002db c057      	RJMP _0x5E
                 ; 0000 0140 
                 ; 0000 0141                 case 1:
                 _0x66:
0002dc d75d      	RCALL SUBOPT_0x1D
0002dd f421      	BRNE _0x6B
                 ; 0000 0142                     lcd_putsf("Regeister an ID");
                +
0002de e7aa     +LDI R26 , LOW ( 2 * _0x0 + ( 262 ) )
0002df e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 262 ) )
                 	__POINTW2FN _0x0,262
0002e0 d684      	RCALL _lcd_putsf
                 ; 0000 0143                 break;
0002e1 c051      	RJMP _0x5E
                 ; 0000 0144 
                 ; 0000 0145                 case 2:
                 _0x6B:
0002e2 d75b      	RCALL SUBOPT_0x1E
0002e3 f421      	BRNE _0x6C
                 ; 0000 0146                     lcd_putsf("Delete an ID");
                +
0002e4 ecae     +LDI R26 , LOW ( 2 * _0x0 + ( 90 ) )
0002e5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 90 ) )
                 	__POINTW2FN _0x0,90
0002e6 d67e      	RCALL _lcd_putsf
                 ; 0000 0147                 break;
0002e7 c04b      	RJMP _0x5E
                 ; 0000 0148                 case 3:
                 _0x6C:
0002e8 d759      	RCALL SUBOPT_0x1F
0002e9 f421      	BRNE _0x6D
                 ; 0000 0149                     lcd_putsf("Delete all IDs");
                +
0002ea e8aa     +LDI R26 , LOW ( 2 * _0x0 + ( 278 ) )
0002eb e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 278 ) )
                 	__POINTW2FN _0x0,278
0002ec d678      	RCALL _lcd_putsf
                 ; 0000 014A                 break;
0002ed c045      	RJMP _0x5E
                 ; 0000 014B                 case 4:
                 _0x6D:
0002ee 30e4      	CPI  R30,LOW(0x4)
0002ef e0a0      	LDI  R26,HIGH(0x4)
0002f0 07fa      	CPC  R31,R26
0002f1 f009      	BREQ PC+2
0002f2 c040      	RJMP _0x5E
                 ; 0000 014C                     switch(i % 4)
0002f3 d752      	RCALL SUBOPT_0x20
                 ; 0000 014D                     {
                 ; 0000 014E                         case 0:
0002f4 9730      	SBIW R30,0
0002f5 f439      	BRNE _0x72
                 ; 0000 014F                             lcd_putsf("System Status");
                +
0002f6 e9a9     +LDI R26 , LOW ( 2 * _0x0 + ( 293 ) )
0002f7 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 293 ) )
                 	__POINTW2FN _0x0,293
0002f8 d6c6      	RCALL SUBOPT_0x0
                 ; 0000 0150                             lcd_gotoxy(0,1);
                 ; 0000 0151                             lcd_putsf("Press \"Select\"");
                +
0002f9 eaa7     +LDI R26 , LOW ( 2 * _0x0 + ( 307 ) )
0002fa e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 307 ) )
                 	__POINTW2FN _0x0,307
0002fb d669      	RCALL _lcd_putsf
                 ; 0000 0152                         break;
0002fc c036      	RJMP _0x71
                 ; 0000 0153 
                 ; 0000 0154                         case 1:
                 _0x72:
0002fd d73c      	RCALL SUBOPT_0x1D
0002fe f441      	BRNE _0x73
                 ; 0000 0155                             lcd_putsf("IDs count: ");
                +
0002ff eba6     +LDI R26 , LOW ( 2 * _0x0 + ( 322 ) )
000300 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 322 ) )
                 	__POINTW2FN _0x0,322
000301 d663      	RCALL _lcd_putsf
                 ; 0000 0156                             FPS_power be ON;
000302 d6cf      	RCALL SUBOPT_0x4
                 ; 0000 0157                             FPS_open();
                 ; 0000 0158                             lcd_putchar(getEnrolledCount() + '0');
000303 d410      	RCALL _getEnrolledCount
000304 d747      	RCALL SUBOPT_0x21
                 ; 0000 0159                             FPS_power be OFF;
000305 9892      	CBI  0x12,2
                 ; 0000 015A                         break;
000306 c02c      	RJMP _0x71
                 ; 0000 015B                         case 2:
                 _0x73:
000307 d736      	RCALL SUBOPT_0x1E
000308 f4a9      	BRNE _0x78
                 ; 0000 015C                             lcd_putsf("Voltage: ");
                +
000309 eca2     +LDI R26 , LOW ( 2 * _0x0 + ( 334 ) )
00030a e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 334 ) )
                 	__POINTW2FN _0x0,334
00030b d659      	RCALL _lcd_putsf
                 ; 0000 015D                             lcd_putchar((mV / 1000) % 10 + '0');
00030c d71d      	RCALL SUBOPT_0x19
00030d d741      	RCALL SUBOPT_0x22
00030e d743      	RCALL SUBOPT_0x23
                 ; 0000 015E                             lcd_putchar('.');
00030f e2ae      	LDI  R26,LOW(46)
000310 d63d      	RCALL _lcd_putchar
                 ; 0000 015F                             lcd_putchar((mV / 100) % 10 + '0');
000311 d718      	RCALL SUBOPT_0x19
000312 e6e4      	LDI  R30,LOW(100)
000313 e0f0      	LDI  R31,HIGH(100)
000314 d73d      	RCALL SUBOPT_0x23
                 ; 0000 0160                             lcd_putchar((mV / 10) % 10 + '0');
000315 d714      	RCALL SUBOPT_0x19
000316 d6e1      	RCALL SUBOPT_0xE
000317 d73a      	RCALL SUBOPT_0x23
                 ; 0000 0161                             lcd_putsf("V");
                +
000318 ecac     +LDI R26 , LOW ( 2 * _0x0 + ( 344 ) )
000319 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 344 ) )
                 	__POINTW2FN _0x0,344
00031a d64a      	RCALL _lcd_putsf
                 ; 0000 0162 
                 ; 0000 0163                             refreshMenu = 1;
00031b d704      	RCALL SUBOPT_0x16
                 ; 0000 0164                             delay_ms(500);
00031c d73a      	RCALL SUBOPT_0x24
                 ; 0000 0165                         break;
00031d c015      	RJMP _0x71
                 ; 0000 0166                         case 3:
                 _0x78:
00031e d723      	RCALL SUBOPT_0x1F
00031f f499      	BRNE _0x71
                 ; 0000 0167                             lcd_putsf("FPS count:");
                +
000320 ecae     +LDI R26 , LOW ( 2 * _0x0 + ( 346 ) )
000321 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 346 ) )
                 	__POINTW2FN _0x0,346
000322 d69c      	RCALL SUBOPT_0x0
                 ; 0000 0168                             lcd_gotoxy(0,1);
                 ; 0000 0169                             lcd_putchar((fpsCount / 1000) % 10 + '0');
000323 d736      	RCALL SUBOPT_0x25
000324 d72a      	RCALL SUBOPT_0x22
000325 d739      	RCALL SUBOPT_0x26
000326 d725      	RCALL SUBOPT_0x21
                 ; 0000 016A                             lcd_putchar((fpsCount / 100) % 10 + '0');
000327 d732      	RCALL SUBOPT_0x25
000328 e6e4      	LDI  R30,LOW(100)
000329 e0f0      	LDI  R31,HIGH(100)
00032a d734      	RCALL SUBOPT_0x26
00032b d720      	RCALL SUBOPT_0x21
                 ; 0000 016B                             lcd_putchar((fpsCount / 10) % 10 + '0');
00032c d72d      	RCALL SUBOPT_0x25
00032d d6ca      	RCALL SUBOPT_0xE
00032e d730      	RCALL SUBOPT_0x26
00032f d71c      	RCALL SUBOPT_0x21
                 ; 0000 016C                             lcd_putchar((fpsCount / 1) % 10 + '0');
000330 d729      	RCALL SUBOPT_0x25
000331 d6eb      	RCALL SUBOPT_0x15
000332 d719      	RCALL SUBOPT_0x21
                 ; 0000 016D 
                 ; 0000 016E                         break;
                 ; 0000 016F                     }
                 _0x71:
                 ; 0000 0170                 break;
                 ; 0000 0171             }
                 _0x5E:
                 ; 0000 0172         }
                 ; 0000 0173 
                 ; 0000 0174         if (cancel_PB is pressed && options_PB is pressed)
                 _0x5B:
000333 d6af      	RCALL SUBOPT_0x9
000334 f411      	BRNE _0x7B
000335 d6da      	RCALL SUBOPT_0x12
000336 f009      	BREQ _0x7C
                 _0x7B:
000337 c001      	RJMP _0x7A
                 _0x7C:
                 ; 0000 0175             controllerReset();
000338 d4a0      	RCALL _controllerReset
                 ; 0000 0176 
                 ; 0000 0177         if (options_PB is pressed)
                 _0x7A:
000339 9987      	SBIC 0x10,7
00033a c018      	RJMP _0x7D
                 ; 0000 0178         {
                 ; 0000 0179             soundTick();
00033b d50b      	RCALL _soundTick
                 ; 0000 017A             while(options_PB is pressed);
                 _0x7E:
00033c 9b87      	SBIS 0x10,7
00033d cffe      	RJMP _0x7E
                 ; 0000 017B             if (menuOpt == -1)
00033e efef      	LDI  R30,LOW(255)
00033f 15e5      	CP   R30,R5
000340 f451      	BRNE _0x81
                 ; 0000 017C             {
                 ; 0000 017D                 if (askAuthentication())
000341 de33      	RCALL _askAuthentication
000342 30e0      	CPI  R30,0
000343 f019      	BREQ _0x82
                 ; 0000 017E                 {
                 ; 0000 017F                     soundOK();
000344 d4c3      	RCALL _soundOK
                 ; 0000 0180                     menuOpt = 0;
000345 2455      	CLR  R5
                 ; 0000 0181                     refreshMenu = 1;
000346 c001      	RJMP _0xB5
                 ; 0000 0182                 }
                 ; 0000 0183                 else
                 _0x82:
                 ; 0000 0184                 {
                 ; 0000 0185                     soundCancel();
000347 d4e1      	RCALL _soundCancel
                 ; 0000 0186                     refreshMenu = 1;
                 _0xB5:
000348 e0e1      	LDI  R30,LOW(1)
000349 2e4e      	MOV  R4,R30
                 ; 0000 0187                 }
                 ; 0000 0188             }
                 ; 0000 0189             else
00034a c007      	RJMP _0x84
                 _0x81:
                 ; 0000 018A             {
                 ; 0000 018B                 refreshMenu = 1;
00034b d6d4      	RCALL SUBOPT_0x16
                 ; 0000 018C                 menuOpt++;
00034c 9453      	INC  R5
                 ; 0000 018D                 i = 0;
00034d e010      	LDI  R17,LOW(0)
                 ; 0000 018E                 if (menuOpt == 5)
00034e e0e5      	LDI  R30,LOW(5)
00034f 15e5      	CP   R30,R5
000350 f409      	BRNE _0x85
                 ; 0000 018F                     menuOpt = 0;
000351 2455      	CLR  R5
                 ; 0000 0190             }
                 _0x85:
                 _0x84:
                 ; 0000 0191         }
                 ; 0000 0192         else if (select_PB is pressed)
000352 c07c      	RJMP _0x86
                 _0x7D:
000353 9986      	SBIC 0x10,6
000354 c049      	RJMP _0x87
                 ; 0000 0193         {
                 ; 0000 0194             if (menuOpt >= 0)
000355 e0e0      	LDI  R30,LOW(0)
000356 165e      	CP   R5,R30
000357 f40c      	BRGE PC+2
000358 c044      	RJMP _0x88
                 ; 0000 0195             {
                 ; 0000 0196                 refreshMenu = 1;
000359 d6c6      	RCALL SUBOPT_0x16
                 ; 0000 0197                 if ((i % 4) == 3 && menuOpt == 4)
00035a d6eb      	RCALL SUBOPT_0x20
00035b 9733      	SBIW R30,3
00035c f419      	BRNE _0x8A
00035d e0e4      	LDI  R30,LOW(4)
00035e 15e5      	CP   R30,R5
00035f f009      	BREQ _0x8B
                 _0x8A:
000360 c014      	RJMP _0x89
                 _0x8B:
                 ; 0000 0198                 {
                 ; 0000 0199                     delay_ms(500);
000361 d6f5      	RCALL SUBOPT_0x24
                 ; 0000 019A                     if (select_PB is pressed)
000362 9986      	SBIC 0x10,6
000363 c003      	RJMP _0x8C
                 ; 0000 019B                         delay_ms(2000);
000364 eda0      	LDI  R26,LOW(2000)
000365 e0b7      	LDI  R27,HIGH(2000)
000366 d7dc      	RCALL _delay_ms
                 ; 0000 019C                     if (select_PB is pressed)
                 _0x8C:
000367 9986      	SBIC 0x10,6
000368 c008      	RJMP _0x8D
                 ; 0000 019D                     {
                 ; 0000 019E                         fpsCount = 0;
000369 e0a2      	LDI  R26,LOW(_fpsCount)
00036a e0b0      	LDI  R27,HIGH(_fpsCount)
00036b e0e0      	LDI  R30,LOW(0)
00036c e0f0      	LDI  R31,HIGH(0)
00036d da75      	RCALL __EEPROMWRW
                 ; 0000 019F                         i--;
00036e 5011      	SUBI R17,1
                 ; 0000 01A0                         soundSuccess();
00036f d4a7      	RCALL _soundSuccess
                 ; 0000 01A1                     }
                 ; 0000 01A2                     else
000370 c003      	RJMP _0x8E
                 _0x8D:
                 ; 0000 01A3                     {
                 ; 0000 01A4                         soundOK();
000371 d496      	RCALL _soundOK
                 ; 0000 01A5                         while(select_PB is pressed);
                 _0x8F:
000372 9b86      	SBIS 0x10,6
000373 cffe      	RJMP _0x8F
                 ; 0000 01A6                     }
                 _0x8E:
                 ; 0000 01A7                 }
                 ; 0000 01A8                 else
000374 c003      	RJMP _0x92
                 _0x89:
                 ; 0000 01A9                 {
                 ; 0000 01AA                     soundOK();
000375 d492      	RCALL _soundOK
                 ; 0000 01AB                     while(select_PB is pressed);
                 _0x93:
000376 9b86      	SBIS 0x10,6
000377 cffe      	RJMP _0x93
                 ; 0000 01AC                 }
                 _0x92:
                 ; 0000 01AD 
                 ; 0000 01AE                 switch(menuOpt)
000378 d6aa      	RCALL SUBOPT_0x17
                 ; 0000 01AF                 {
                 ; 0000 01B0                     case 0: // securityOpt
000379 9730      	SBIW R30,0
00037a f471      	BRNE _0x99
                 ; 0000 01B1                         if (securityMethod == 0 || securityMethod == 1)
00037b d6ba      	RCALL SUBOPT_0x1C
00037c 30e0      	CPI  R30,0
00037d f011      	BREQ _0x9B
00037e 30e1      	CPI  R30,LOW(0x1)
00037f f421      	BRNE _0x9A
                 _0x9B:
                 ; 0000 01B2                             securityMethod++;
000380 e0a4      	LDI  R26,LOW(_securityMethod)
000381 e0b0      	LDI  R27,HIGH(_securityMethod)
000382 d66c      	RCALL SUBOPT_0xC
                 ; 0000 01B3                         else
000383 c004      	RJMP _0x9D
                 _0x9A:
                 ; 0000 01B4                             securityMethod = 0;
000384 e0a4      	LDI  R26,LOW(_securityMethod)
000385 e0b0      	LDI  R27,HIGH(_securityMethod)
000386 e0e0      	LDI  R30,LOW(0)
000387 da63      	RCALL __EEPROMWRB
                 ; 0000 01B5                     break;
                 _0x9D:
000388 c014      	RJMP _0x98
                 ; 0000 01B6 
                 ; 0000 01B7                     case 1:
                 _0x99:
000389 d6b0      	RCALL SUBOPT_0x1D
00038a f411      	BRNE _0x9E
                 ; 0000 01B8                         registerID();
00038b de5d      	RCALL _registerID
                 ; 0000 01B9                     break;
00038c c010      	RJMP _0x98
                 ; 0000 01BA                     case 2:
                 _0x9E:
00038d d6b0      	RCALL SUBOPT_0x1E
00038e f419      	BRNE _0x9F
                 ; 0000 01BB                         deleteIdByFinger(0);
00038f e0a0      	LDI  R26,LOW(0)
000390 de97      	RCALL _deleteIdByFinger
                 ; 0000 01BC                     break;
000391 c00b      	RJMP _0x98
                 ; 0000 01BD                     case 3:
                 _0x9F:
000392 d6af      	RCALL SUBOPT_0x1F
000393 f419      	BRNE _0xA0
                 ; 0000 01BE                         deleteIdByFinger(1);
000394 e0a1      	LDI  R26,LOW(1)
000395 de92      	RCALL _deleteIdByFinger
                 ; 0000 01BF                     break;
000396 c006      	RJMP _0x98
                 ; 0000 01C0                     case 4:
                 _0xA0:
000397 30e4      	CPI  R30,LOW(0x4)
000398 e0a0      	LDI  R26,HIGH(0x4)
000399 07fa      	CPC  R31,R26
00039a f411      	BRNE _0x98
                 ; 0000 01C1                         i ++;
00039b 5f1f      	SUBI R17,-1
                 ; 0000 01C2                         refreshMenu = 1;
00039c d683      	RCALL SUBOPT_0x16
                 ; 0000 01C3                     break;
                 ; 0000 01C4                 }
                 _0x98:
                 ; 0000 01C5             }
                 ; 0000 01C6         }
                 _0x88:
                 ; 0000 01C7         else if (cancel_PB is pressed && menuOpt >= 0)
00039d c031      	RJMP _0xA2
                 _0x87:
00039e d644      	RCALL SUBOPT_0x9
00039f f419      	BRNE _0xA4
0003a0 e0e0      	LDI  R30,LOW(0)
0003a1 165e      	CP   R5,R30
0003a2 f40c      	BRGE _0xA5
                 _0xA4:
0003a3 c005      	RJMP _0xA3
                 _0xA5:
                 ; 0000 01C8         {
                 ; 0000 01C9             soundCancel();
0003a4 d484      	RCALL _soundCancel
                 ; 0000 01CA             menuOpt = -1;
0003a5 efef      	LDI  R30,LOW(255)
0003a6 2e5e      	MOV  R5,R30
                 ; 0000 01CB             refreshMenu = 1;
0003a7 d678      	RCALL SUBOPT_0x16
                 ; 0000 01CC         }
                 ; 0000 01CD 
                 ; 0000 01CE         else // open the door
0003a8 c026      	RJMP _0xA6
                 _0xA3:
                 ; 0000 01CF         {
                 ; 0000 01D0             if (userHand is present && menuOpt == -1)
0003a9 d424      	RCALL _getProximity
0003aa 30e1      	CPI  R30,LOW(0x1)
0003ab f419      	BRNE _0xA8
0003ac efef      	LDI  R30,LOW(255)
0003ad 15e5      	CP   R30,R5
0003ae f009      	BREQ _0xA9
                 _0xA8:
0003af c01f      	RJMP _0xA7
                 _0xA9:
                 ; 0000 01D1             {
                 ; 0000 01D2                 i = 0;
0003b0 e010      	LDI  R17,LOW(0)
                 ; 0000 01D3                 if (securityMethod == 1) // smart security
0003b1 d684      	RCALL SUBOPT_0x1C
0003b2 30e1      	CPI  R30,LOW(0x1)
0003b3 f489      	BRNE _0xAA
                 ; 0000 01D4                 {
                 ; 0000 01D5                     {
                 ; 0000 01D6                         lcd_gotoxy(notSpace, 0);
0003b4 d67a      	RCALL SUBOPT_0x1A
                 ; 0000 01D7                         lcd_putchar(0);
0003b5 e0a0      	LDI  R26,LOW(0)
0003b6 d597      	RCALL _lcd_putchar
                 ; 0000 01D8                     }
                 ; 0000 01D9                     if (getIdFinally(3, 1) < 8)
0003b7 e0e3      	LDI  R30,LOW(3)
0003b8 93ea      	ST   -Y,R30
0003b9 e0a1      	LDI  R26,LOW(1)
0003ba ddcb      	RCALL _getIdFinally
0003bb 30e8      	CPI  R30,LOW(0x8)
0003bc f418      	BRSH _0xAB
                 ; 0000 01DA                     {
                 ; 0000 01DB                         i = 1;
0003bd e011      	LDI  R17,LOW(1)
                 ; 0000 01DC                         bip();
0003be d484      	RCALL _bip
                 ; 0000 01DD                     }
                 ; 0000 01DE                     else
0003bf c004      	RJMP _0xAC
                 _0xAB:
                 ; 0000 01DF                     {
                 ; 0000 01E0                         i = 0;
0003c0 e010      	LDI  R17,LOW(0)
                 ; 0000 01E1                         delay_ms(2000);
0003c1 eda0      	LDI  R26,LOW(2000)
0003c2 e0b7      	LDI  R27,HIGH(2000)
0003c3 d77f      	RCALL _delay_ms
                 ; 0000 01E2                     }
                 _0xAC:
                 ; 0000 01E3                 }
                 ; 0000 01E4                 else if (securityMethod == 2)// open always
0003c4 c007      	RJMP _0xAD
                 _0xAA:
0003c5 d670      	RCALL SUBOPT_0x1C
0003c6 30e2      	CPI  R30,LOW(0x2)
0003c7 f411      	BRNE _0xAE
                 ; 0000 01E5                     i = 1;
0003c8 e011      	LDI  R17,LOW(1)
                 ; 0000 01E6                 else
0003c9 c002      	RJMP _0xAF
                 _0xAE:
                 ; 0000 01E7                 {
                 ; 0000 01E8                     soundError();
0003ca d459      	RCALL _soundError
                 ; 0000 01E9                     i = 0;
0003cb e010      	LDI  R17,LOW(0)
                 ; 0000 01EA                 }
                 _0xAF:
                 _0xAD:
                 ; 0000 01EB                 if (i == 1)
0003cc 3011      	CPI  R17,1
0003cd f409      	BRNE _0xB0
                 ; 0000 01EC                 {
                 ; 0000 01ED                     lockMotorRoutine();
0003ce d410      	RCALL _lockMotorRoutine
                 ; 0000 01EE                     //open door
                 ; 0000 01EF                 }
                 ; 0000 01F0             }
                 _0xB0:
                 ; 0000 01F1         }
                 _0xA7:
                 _0xA6:
                 _0xA2:
                 _0x86:
                 ; 0000 01F2         #asm("WDR")
0003cf 95a8      	WDR
                 ; 0000 01F3     }
0003d0 ceb0      	RJMP _0x51
                 ; 0000 01F4 }
                 _0xB1:
0003d1 cfff      	RJMP _0xB1
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;
                 ;unsigned int adc_data;
                 ;#define ADC_VREF_TYPE 0xC0
                 ;
                 ;// ADC interrupt service routine
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0001 000A {
                 
                 	.CSEG
                 _adc_isr:
                 ; 0001 000B // Read the AD conversion result
                 ; 0001 000C adc_data=ADCW;
                +
0003d2 b064     +IN R6 , 4
0003d3 b075     +IN R7 , 4 + 1
                 	__INWR 6,7,4
                 ; 0001 000D }
0003d4 9518      	RETI
                 ;
                 ;// Read the AD conversion result
                 ;// with noise canceling
                 ;unsigned int read_adc_(unsigned char adc_input)
                 ; 0001 0012 {
                 _read_adc_:
                 ; 0001 0013 #asm("sei");
0003d5 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0003d6 9478      	sei
                 ; 0001 0014 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
0003d7 81e8      	LD   R30,Y
0003d8 6ce0      	ORI  R30,LOW(0xC0)
0003d9 b9e7      	OUT  0x7,R30
                 ; 0001 0015 // Delay needed for the stabilization of the ADC input voltage
                 ; 0001 0016 delay_us(10);
                +
0003da e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0003db 958a     +DEC R24
0003dc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0001 0017 #asm
                 ; 0001 0018     in   r30,mcucr
0003dd b7e5          in   r30,mcucr
                 ; 0001 0019     cbr  r30,__sm_mask
0003de 78ef          cbr  r30,__sm_mask
                 ; 0001 001A     sbr  r30,__se_bit | __sm_adc_noise_red
0003df 69e0          sbr  r30,__se_bit | __sm_adc_noise_red
                 ; 0001 001B     out  mcucr,r30
0003e0 bfe5          out  mcucr,r30
                 ; 0001 001C     sleep
0003e1 9588          sleep
                 ; 0001 001D     cbr  r30,__se_bit
0003e2 77ef          cbr  r30,__se_bit
                 ; 0001 001E     out  mcucr,r30
0003e3 bfe5          out  mcucr,r30
                 ; 0001 001F #endasm
                 ; 0001 0020 return adc_data;
0003e4 01f3      	MOVW R30,R6
0003e5 c5ba      	RJMP _0x20C0001
                 ; 0001 0021 }
                 ;unsigned int read_adc__(unsigned char adc_input)
                 ; 0001 0023 {
                 _read_adc__:
                 ; 0001 0024     signed long num = 0;
                 ; 0001 0025     signed int temp = 0;
                 ; 0001 0026     char i = 0, rc = 0;
                 ; 0001 0027     //return read_adc_(adc_input);
                 ; 0001 0028     for (i = 0; i < 10; i++)
0003e6 93aa      	ST   -Y,R26
0003e7 d67a      	RCALL SUBOPT_0x27
0003e8 d67d      	RCALL SUBOPT_0x28
0003e9 da22      	RCALL __SAVELOCR4
                 ;	adc_input -> Y+8
                 ;	num -> Y+4
                 ;	temp -> R16,R17
                 ;	i -> R19
                 ;	rc -> R18
                +
0003ea e000     +LDI R16 , LOW ( 0 )
0003eb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0003ec e030      	LDI  R19,0
0003ed e020      	LDI  R18,0
0003ee e030      	LDI  R19,LOW(0)
                 _0x20004:
0003ef 303a      	CPI  R19,10
0003f0 f440      	BRSH _0x20005
                 ; 0001 0029     {
                 ; 0001 002A         num += read_adc_(adc_input);
0003f1 85a8      	LDD  R26,Y+8
0003f2 dfe2      	RCALL _read_adc_
0003f3 d676      	RCALL SUBOPT_0x29
0003f4 2766      	CLR  R22
0003f5 2777      	CLR  R23
0003f6 d678      	RCALL SUBOPT_0x2A
                 ; 0001 002B     }
0003f7 5f3f      	SUBI R19,-1
0003f8 cff6      	RJMP _0x20004
                 _0x20005:
                 ; 0001 002C     num /= 10;
0003f9 d670      	RCALL SUBOPT_0x29
0003fa d67a      	RCALL SUBOPT_0x2B
                 ; 0001 002D     //we have the initial
                 ; 0001 002E     while (rc < 3)
                 _0x20006:
0003fb 3023      	CPI  R18,3
0003fc f558      	BRSH _0x20008
                 ; 0001 002F     {
                 ; 0001 0030         temp = read_adc_(adc_input);
0003fd 85a8      	LDD  R26,Y+8
0003fe dfd6      	RCALL _read_adc_
0003ff 018f      	MOVW R16,R30
                 ; 0001 0031         if (temp > num + 5 || temp < num - 5)
000400 d67e      	RCALL SUBOPT_0x2C
                +
000401 5feb     +SUBI R30 , LOW ( - 5 )
000402 4fff     +SBCI R31 , HIGH ( - 5 )
000403 4f6f     +SBCI R22 , BYTE3 ( - 5 )
000404 4f7f     +SBCI R23 , BYTE4 ( - 5 )
                 	__ADDD1N 5
000405 01d8      	MOVW R26,R16
000406 d8f2      	RCALL __CWD2
000407 d9f8      	RCALL __CPD12
000408 f04c      	BRLT _0x2000A
000409 d675      	RCALL SUBOPT_0x2C
                +
00040a 50e5     +SUBI R30 , LOW ( 5 )
00040b 40f0     +SBCI R31 , HIGH ( 5 )
00040c 4060     +SBCI R22 , BYTE3 ( 5 )
00040d 4070     +SBCI R23 , BYTE4 ( 5 )
                 	__SUBD1N 5
00040e 01d8      	MOVW R26,R16
00040f d8e9      	RCALL __CWD2
000410 d9f4      	RCALL __CPD21
000411 f414      	BRGE _0x20009
                 _0x2000A:
                 ; 0001 0032             rc--;
000412 5021      	SUBI R18,1
                 ; 0001 0033         else rc++;
000413 c001      	RJMP _0x2000C
                 _0x20009:
000414 5f2f      	SUBI R18,-1
                 ; 0001 0034         if (rc <= 3)
                 _0x2000C:
000415 3024      	CPI  R18,4
000416 f438      	BRSH _0x2000D
                 ; 0001 0035         {
                 ; 0001 0036             num = ((num * 1) + (temp * 9)) / 10;
000417 01f8      	MOVW R30,R16
000418 e0a9      	LDI  R26,LOW(9)
000419 e0b0      	LDI  R27,HIGH(9)
00041a d910      	RCALL __MULW12
00041b d64e      	RCALL SUBOPT_0x29
00041c d667      	RCALL SUBOPT_0x2D
                 ; 0001 0037             rc = 0;
00041d e020      	LDI  R18,LOW(0)
                 ; 0001 0038         }
                 ; 0001 0039         num = (long)((num * 9) + (long)(temp * 1)) / 10;
                 _0x2000D:
00041e d660      	RCALL SUBOPT_0x2C
                +
00041f e0a9     +LDI R26 , LOW ( 0x9 )
000420 e0b0     +LDI R27 , HIGH ( 0x9 )
000421 e080     +LDI R24 , BYTE3 ( 0x9 )
000422 e090     +LDI R25 , BYTE4 ( 0x9 )
                 	__GETD2N 0x9
000423 d90c      	RCALL __MULD12
000424 d662      	RCALL SUBOPT_0x2E
000425 01f8      	MOVW R30,R16
000426 d65d      	RCALL SUBOPT_0x2D
                 ; 0001 003A     }
000427 cfd3      	RJMP _0x20006
                 _0x20008:
                 ; 0001 003B     return num;
000428 81ec      	LDD  R30,Y+4
000429 81fd      	LDD  R31,Y+4+1
00042a d9e8      	RCALL __LOADLOCR4
00042b 9629      	ADIW R28,9
00042c 9508      	RET
                 ; 0001 003C     //return (read_adc_(adc_input) + read_adc_(adc_input) + read_adc_(adc_input)) / 3;
                 ; 0001 003D }
                 ;#define adcSamples 5
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0001 0040 {
                 _read_adc:
                 ; 0001 0041     signed int samples[adcSamples];
                 ; 0001 0042     signed int avg = 0, ans = 0;
                 ; 0001 0043     signed int minV = 1024, maxV = 0;
                 ; 0001 0044     char i = 0, valCount = 0;
                 ; 0001 0045 
                 ; 0001 0046     for (i = 0; i < adcSamples; i++)
00042d 93aa      	ST   -Y,R26
00042e 972e      	SBIW R28,14
00042f e0e0      	LDI  R30,LOW(0)
000430 83e8      	ST   Y,R30
000431 d5e3      	RCALL SUBOPT_0x13
000432 d633      	RCALL SUBOPT_0x28
000433 d656      	RCALL SUBOPT_0x2F
                 ;	adc_input -> Y+20
                 ;	samples -> Y+10
                 ;	avg -> R16,R17
                 ;	ans -> R18,R19
                 ;	minV -> R20,R21
                 ;	maxV -> Y+8
                 ;	i -> Y+7
                 ;	valCount -> Y+6
                +
000434 e040     +LDI R20 , LOW ( 1024 )
000435 e054     +LDI R21 , HIGH ( 1024 )
                 	__GETWRN 20,21,1024
000436 d659      	RCALL SUBOPT_0x30
                 _0x2000F:
000437 d65b      	RCALL SUBOPT_0x31
000438 f468      	BRSH _0x20010
                 ; 0001 0047     {
                 ; 0001 0048         //delay_ms(10);
                 ; 0001 0049         samples[i] = read_adc__(adc_input);
000439 d65c      	RCALL SUBOPT_0x32
00043a 0fea      	ADD  R30,R26
00043b 1ffb      	ADC  R31,R27
00043c 93ff      	PUSH R31
00043d 93ef      	PUSH R30
00043e 89ac      	LDD  R26,Y+20
00043f dfa6      	RCALL _read_adc__
000440 91af      	POP  R26
000441 91bf      	POP  R27
000442 93ed      	ST   X+,R30
000443 93fc      	ST   X,R31
                 ; 0001 004A     }
000444 d658      	RCALL SUBOPT_0x33
000445 cff1      	RJMP _0x2000F
                 _0x20010:
                 ; 0001 004B 
                 ; 0001 004C     for (i = 0; i < adcSamples; i++)
000446 d649      	RCALL SUBOPT_0x30
                 _0x20012:
000447 d64b      	RCALL SUBOPT_0x31
000448 f430      	BRSH _0x20013
                 ; 0001 004D     {
                 ; 0001 004E         avg += samples[i];
000449 d64c      	RCALL SUBOPT_0x32
00044a d656      	RCALL SUBOPT_0x34
                +
00044b 0f0e     +ADD R16 , R30
00044c 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 ; 0001 004F     }
00044d d64f      	RCALL SUBOPT_0x33
00044e cff8      	RJMP _0x20012
                 _0x20013:
                 ; 0001 0050     avg /= adcSamples;
00044f 01d8      	MOVW R26,R16
000450 e0e5      	LDI  R30,LOW(5)
000451 e0f0      	LDI  R31,HIGH(5)
000452 d8f5      	RCALL __DIVW21
000453 018f      	MOVW R16,R30
                 ; 0001 0051     for (i = 0; i < adcSamples; i++)
000454 d63b      	RCALL SUBOPT_0x30
                 _0x20015:
000455 d63d      	RCALL SUBOPT_0x31
000456 f4d0      	BRSH _0x20016
                 ; 0001 0052     {
                 ; 0001 0053         if (abs(samples[i] - avg) >= maxV)
000457 d63e      	RCALL SUBOPT_0x32
000458 d648      	RCALL SUBOPT_0x34
000459 d64b      	RCALL SUBOPT_0x35
00045a 01df      	MOVW R26,R30
00045b 85e8      	LDD  R30,Y+8
00045c 85f9      	LDD  R31,Y+8+1
00045d 17ae      	CP   R26,R30
00045e 07bf      	CPC  R27,R31
00045f f028      	BRLO _0x20017
                 ; 0001 0054             maxV = abs(samples[i] - avg);
000460 d635      	RCALL SUBOPT_0x32
000461 d63f      	RCALL SUBOPT_0x34
000462 d642      	RCALL SUBOPT_0x35
000463 87e8      	STD  Y+8,R30
000464 87f9      	STD  Y+8+1,R31
                 ; 0001 0055         if (abs(samples[i] - avg) <= minV)
                 _0x20017:
000465 d630      	RCALL SUBOPT_0x32
000466 d63a      	RCALL SUBOPT_0x34
000467 d63d      	RCALL SUBOPT_0x35
000468 174e      	CP   R20,R30
000469 075f      	CPC  R21,R31
00046a f020      	BRLO _0x20018
                 ; 0001 0056             minV = abs(samples[i] - avg);
00046b d62a      	RCALL SUBOPT_0x32
00046c d634      	RCALL SUBOPT_0x34
00046d d637      	RCALL SUBOPT_0x35
00046e 01af      	MOVW R20,R30
                 ; 0001 0057     }
                 _0x20018:
00046f d62d      	RCALL SUBOPT_0x33
000470 cfe4      	RJMP _0x20015
                 _0x20016:
                 ; 0001 0058     minV = (minV * 8 + maxV * 2) / 10;
000471 01fa      	MOVW R30,R20
000472 d87a      	RCALL __LSLW3
000473 01df      	MOVW R26,R30
000474 85e8      	LDD  R30,Y+8
000475 85f9      	LDD  R31,Y+8+1
000476 0fee      	LSL  R30
000477 1fff      	ROL  R31
000478 0fae      	ADD  R26,R30
000479 1fbf      	ADC  R27,R31
00047a d57d      	RCALL SUBOPT_0xE
00047b d8cc      	RCALL __DIVW21
00047c 01af      	MOVW R20,R30
                 ; 0001 0059     for (i = 0; i < adcSamples; i++)
00047d d612      	RCALL SUBOPT_0x30
                 _0x2001A:
00047e d614      	RCALL SUBOPT_0x31
00047f f478      	BRSH _0x2001B
                 ; 0001 005A     {
                 ; 0001 005B         if (abs(samples[i] - avg) <= minV)
000480 d615      	RCALL SUBOPT_0x32
000481 d61f      	RCALL SUBOPT_0x34
000482 d622      	RCALL SUBOPT_0x35
000483 174e      	CP   R20,R30
000484 075f      	CPC  R21,R31
000485 f038      	BRLO _0x2001C
                 ; 0001 005C         {
                 ; 0001 005D             ans += samples[i];
000486 d60f      	RCALL SUBOPT_0x32
000487 d619      	RCALL SUBOPT_0x34
                +
000488 0f2e     +ADD R18 , R30
000489 1f3f     +ADC R19 , R31
                 	__ADDWRR 18,19,30,31
                 ; 0001 005E             valCount++;
00048a 81ee      	LDD  R30,Y+6
00048b 5fef      	SUBI R30,-LOW(1)
00048c 83ee      	STD  Y+6,R30
                 ; 0001 005F         }
                 ; 0001 0060     }
                 _0x2001C:
00048d d60f      	RCALL SUBOPT_0x33
00048e cfef      	RJMP _0x2001A
                 _0x2001B:
                 ; 0001 0061     return ans / valCount;
00048f 81ee      	LDD  R30,Y+6
000490 d57d      	RCALL SUBOPT_0x11
000491 01d9      	MOVW R26,R18
000492 d8b5      	RCALL __DIVW21
000493 d97d      	RCALL __LOADLOCR6
000494 9665      	ADIW R28,21
000495 9508      	RET
                 ; 0001 0062 }
                 ;
                 ;void adc_init(void)
                 ; 0001 0065 {
                 _adc_init:
                 ; 0001 0066 
                 ; 0001 0067 // Analog Comparator initialization
                 ; 0001 0068 // Analog Comparator: Off
                 ; 0001 0069 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 006A ACSR=0x80;
000496 e8e0      	LDI  R30,LOW(128)
000497 b9e8      	OUT  0x8,R30
                 ; 0001 006B SFIOR=0x00;
000498 e0e0      	LDI  R30,LOW(0)
000499 bfe0      	OUT  0x30,R30
                 ; 0001 006C 
                 ; 0001 006D // ADC initialization
                 ; 0001 006E // ADC Clock frequency: 1000.000 kHz
                 ; 0001 006F // ADC Voltage Reference: Int., cap. on AREF
                 ; 0001 0070 ADMUX=ADC_VREF_TYPE & 0xff;
00049a ece0      	LDI  R30,LOW(192)
00049b b9e7      	OUT  0x7,R30
                 ; 0001 0071 ADCSRA=0x8B;
00049c e8eb      	LDI  R30,LOW(139)
00049d b9e6      	OUT  0x6,R30
                 ; 0001 0072 }
00049e 9508      	RET
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "projDefines.h"
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 16
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0002 0035 {
                 
                 	.CSEG
                 _usart_rx_isr:
00049f 93aa      	ST   -Y,R26
0004a0 93ea      	ST   -Y,R30
0004a1 93fa      	ST   -Y,R31
0004a2 b7ef      	IN   R30,SREG
0004a3 93ea      	ST   -Y,R30
                 ; 0002 0036 char status,data;
                 ; 0002 0037 status=UCSRA;
0004a4 d969      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
0004a5 b11b      	IN   R17,11
                 ; 0002 0038 data=UDR;
0004a6 b10c      	IN   R16,12
                 ; 0002 0039 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0004a7 2fe1      	MOV  R30,R17
0004a8 71ec      	ANDI R30,LOW(0x1C)
0004a9 f4b1      	BRNE _0x40003
                 ; 0002 003A    {
                 ; 0002 003B    rx_buffer[rx_wr_index++]=data;
0004aa 2de9      	MOV  R30,R9
0004ab 9493      	INC  R9
0004ac d561      	RCALL SUBOPT_0x11
0004ad 59e6      	SUBI R30,LOW(-_rx_buffer)
0004ae 4ffe      	SBCI R31,HIGH(-_rx_buffer)
0004af 8300      	ST   Z,R16
                 ; 0002 003C #if RX_BUFFER_SIZE == 256
                 ; 0002 003D    // special case for receiver buffer size=256
                 ; 0002 003E    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0002 003F #else
                 ; 0002 0040    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0004b0 e1e0      	LDI  R30,LOW(16)
0004b1 15e9      	CP   R30,R9
0004b2 f409      	BRNE _0x40004
0004b3 2499      	CLR  R9
                 ; 0002 0041    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x40004:
0004b4 91a0 0160 	LDS  R26,_rx_counter
0004b6 5faf      	SUBI R26,-LOW(1)
0004b7 93a0 0160 	STS  _rx_counter,R26
0004b9 31a0      	CPI  R26,LOW(0x10)
0004ba f429      	BRNE _0x40005
                 ; 0002 0042       {
                 ; 0002 0043       rx_counter=0;
0004bb e0e0      	LDI  R30,LOW(0)
0004bc 93e0 0160 	STS  _rx_counter,R30
                 ; 0002 0044       rx_buffer_overflow=1;
0004be 9468      	SET
0004bf f820      	BLD  R2,0
                 ; 0002 0045       }
                 ; 0002 0046 #endif
                 ; 0002 0047    }
                 _0x40005:
                 ; 0002 0048 }
                 _0x40003:
0004c0 d957      	RCALL __LOADLOCR2P
0004c1 91e9      	LD   R30,Y+
0004c2 bfef      	OUT  SREG,R30
0004c3 91f9      	LD   R31,Y+
0004c4 91e9      	LD   R30,Y+
0004c5 91a9      	LD   R26,Y+
0004c6 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0002 004F {
                 _getchar:
                 ; 0002 0050 char data;
                 ; 0002 0051 dontWDR = 1;
0004c7 931a      	ST   -Y,R17
                 ;	data -> R17
0004c8 e0e1      	LDI  R30,LOW(1)
0004c9 93e0 0167 	STS  _dontWDR,R30
                 ; 0002 0052 while (rx_counter==0);
                 _0x40006:
0004cb 91e0 0160 	LDS  R30,_rx_counter
0004cd 30e0      	CPI  R30,0
0004ce f3e1      	BREQ _0x40006
                 ; 0002 0053 data=rx_buffer[rx_rd_index++];
0004cf 2de8      	MOV  R30,R8
0004d0 9483      	INC  R8
0004d1 d53c      	RCALL SUBOPT_0x11
0004d2 59e6      	SUBI R30,LOW(-_rx_buffer)
0004d3 4ffe      	SBCI R31,HIGH(-_rx_buffer)
0004d4 8110      	LD   R17,Z
                 ; 0002 0054 #if RX_BUFFER_SIZE != 256
                 ; 0002 0055 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0004d5 e1e0      	LDI  R30,LOW(16)
0004d6 15e8      	CP   R30,R8
0004d7 f409      	BRNE _0x40009
0004d8 2488      	CLR  R8
                 ; 0002 0056 #endif
                 ; 0002 0057 #asm("cli")
                 _0x40009:
0004d9 94f8      	cli
                 ; 0002 0058 --rx_counter;
0004da 91e0 0160 	LDS  R30,_rx_counter
0004dc 50e1      	SUBI R30,LOW(1)
0004dd 93e0 0160 	STS  _rx_counter,R30
                 ; 0002 0059 #asm("sei")
0004df 9478      	sei
                 ; 0002 005A dontWDR = 0;
0004e0 e0e0      	LDI  R30,LOW(0)
0004e1 93e0 0167 	STS  _dontWDR,R30
                 ; 0002 005B return data;
0004e3 c2f2      	RJMP _0x20C0009
                 ; 0002 005C }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 16
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index,tx_rd_index,tx_counter;
                 ;#else
                 ;unsigned int tx_wr_index,tx_rd_index,tx_counter;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0002 006C {
                 _usart_tx_isr:
0004e4 93ea      	ST   -Y,R30
0004e5 93fa      	ST   -Y,R31
0004e6 b7ef      	IN   R30,SREG
0004e7 93ea      	ST   -Y,R30
                 ; 0002 006D if (tx_counter)
0004e8 20dd      	TST  R13
0004e9 f061      	BREQ _0x4000A
                 ; 0002 006E    {
                 ; 0002 006F    --tx_counter;
0004ea 94da      	DEC  R13
                 ; 0002 0070    UDR=tx_buffer[tx_rd_index++];
0004eb 2dea      	MOV  R30,R10
0004ec 94a3      	INC  R10
0004ed d520      	RCALL SUBOPT_0x11
0004ee 58e6      	SUBI R30,LOW(-_tx_buffer)
0004ef 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0004f0 81e0      	LD   R30,Z
0004f1 b9ec      	OUT  0xC,R30
                 ; 0002 0071 #if TX_BUFFER_SIZE != 256
                 ; 0002 0072    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0004f2 e1e0      	LDI  R30,LOW(16)
0004f3 15ea      	CP   R30,R10
0004f4 f409      	BRNE _0x4000B
0004f5 24aa      	CLR  R10
                 ; 0002 0073 #endif
                 ; 0002 0074    }
                 _0x4000B:
                 ; 0002 0075 }
                 _0x4000A:
0004f6 91e9      	LD   R30,Y+
0004f7 bfef      	OUT  SREG,R30
0004f8 91f9      	LD   R31,Y+
0004f9 91e9      	LD   R30,Y+
0004fa 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0002 007C {
                 _putchar:
                 ; 0002 007D while (tx_counter == TX_BUFFER_SIZE);
0004fb 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x4000C:
0004fc e1e0      	LDI  R30,LOW(16)
0004fd 15ed      	CP   R30,R13
0004fe f3e9      	BREQ _0x4000C
                 ; 0002 007E #asm("cli")
0004ff 94f8      	cli
                 ; 0002 007F if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
000500 20dd      	TST  R13
000501 f411      	BRNE _0x40010
000502 995d      	SBIC 0xB,5
000503 c00d      	RJMP _0x4000F
                 _0x40010:
                 ; 0002 0080    {
                 ; 0002 0081    tx_buffer[tx_wr_index++]=c;
000504 2deb      	MOV  R30,R11
000505 94b3      	INC  R11
000506 d507      	RCALL SUBOPT_0x11
000507 58e6      	SUBI R30,LOW(-_tx_buffer)
000508 4ffe      	SBCI R31,HIGH(-_tx_buffer)
000509 81a8      	LD   R26,Y
00050a 83a0      	STD  Z+0,R26
                 ; 0002 0082 #if TX_BUFFER_SIZE != 256
                 ; 0002 0083    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
00050b e1e0      	LDI  R30,LOW(16)
00050c 15eb      	CP   R30,R11
00050d f409      	BRNE _0x40012
00050e 24bb      	CLR  R11
                 ; 0002 0084 #endif
                 ; 0002 0085    ++tx_counter;
                 _0x40012:
00050f 94d3      	INC  R13
                 ; 0002 0086    }
                 ; 0002 0087 else
000510 c002      	RJMP _0x40013
                 _0x4000F:
                 ; 0002 0088    UDR=c;
000511 81e8      	LD   R30,Y
000512 b9ec      	OUT  0xC,R30
                 ; 0002 0089 #asm("sei")
                 _0x40013:
000513 9478      	sei
                 ; 0002 008A }
000514 c48b      	RJMP _0x20C0001
                 ;#pragma used-
                 ;#endif
                 ;
                 ;void uart_init(void)
                 ; 0002 008F {
                 _uart_init:
                 ; 0002 0090     // USART initialization
                 ; 0002 0091     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0002 0092     // USART Receiver: On
                 ; 0002 0093     // USART Transmitter: On
                 ; 0002 0094     // USART Mode: Asynchronous
                 ; 0002 0095     // USART Baud Rate: 9600
                 ; 0002 0096     UCSRA=0x00;
000515 e0e0      	LDI  R30,LOW(0)
000516 b9eb      	OUT  0xB,R30
                 ; 0002 0097     UCSRB=0xD8;
000517 ede8      	LDI  R30,LOW(216)
000518 b9ea      	OUT  0xA,R30
                 ; 0002 0098     UCSRC=0x86;
000519 e8e6      	LDI  R30,LOW(134)
00051a bde0      	OUT  0x20,R30
                 ; 0002 0099     UBRRH=0x00;
00051b e0e0      	LDI  R30,LOW(0)
00051c bde0      	OUT  0x20,R30
                 ; 0002 009A     UBRRL=0x33;
00051d e3e3      	LDI  R30,LOW(51)
00051e b9e9      	OUT  0x9,R30
                 ; 0002 009B }
00051f 9508      	RET
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "projHeaders.h"
                 ;#include "projDefines.h"
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include "customCharsCG.h"
                 ;
                 ;char cpuHaltAllowed;
                 ;// Timer 0 overflow interrupt service routine
                 ;//used for charge and LCD contrast controller
                 ;int mV;
                 ;char powerMode;
                 ;unsigned char dontWDR;
                 ;eeprom unsigned int fpsCount;
                 ;
                 ;void normalizeContrast(void)
                 ; 0003 0011 {
                 
                 	.CSEG
                 _normalizeContrast:
                 ; 0003 0012     if (mV > 4800)
000520 d588      	RCALL SUBOPT_0x36
000521 f014      	BRLT _0x60003
                 ; 0003 0013         OCR2 = 0;
000522 e0e0      	LDI  R30,LOW(0)
000523 c010      	RJMP _0x60064
                 ; 0003 0014     else if (mV > 4600)
                 _0x60003:
000524 d505      	RCALL SUBOPT_0x19
000525 3fa9      	CPI  R26,LOW(0x11F9)
000526 e1e1      	LDI  R30,HIGH(0x11F9)
000527 07be      	CPC  R27,R30
000528 f014      	BRLT _0x60005
                 ; 0003 0015         OCR2 = 50;
000529 e3e2      	LDI  R30,LOW(50)
00052a c009      	RJMP _0x60064
                 ; 0003 0016     else if (mV > 4300)
                 _0x60005:
00052b d505      	RCALL SUBOPT_0x1B
00052c f014      	BRLT _0x60007
                 ; 0003 0017         OCR2 = 100;
00052d e6e4      	LDI  R30,LOW(100)
00052e c005      	RJMP _0x60064
                 ; 0003 0018     else if (mV > 4100)
                 _0x60007:
00052f d57e      	RCALL SUBOPT_0x37
000530 f014      	BRLT _0x60009
                 ; 0003 0019         OCR2 = 200;
000531 ece8      	LDI  R30,LOW(200)
000532 c001      	RJMP _0x60064
                 ; 0003 001A     else
                 _0x60009:
                 ; 0003 001B         OCR2 = 249;
000533 efe9      	LDI  R30,LOW(249)
                 _0x60064:
000534 bde3      	OUT  0x23,R30
                 ; 0003 001C }
000535 9508      	RET
                 ;unsigned int elapsed_us;
                 ;unsigned int elapsed_ms;
                 ;unsigned int elapsed_sec;
                 ;unsigned char junkFreeTimer;
                 ;unsigned char autoSleepTimer;
                 ;
                 ;
                 ;void incTime (void)
                 ; 0003 0025 {
                 _incTime:
                 ; 0003 0026     elapsed_us += 800;// precisely 192
000536 91e0 018a 	LDS  R30,_elapsed_us
000538 91f0 018b 	LDS  R31,_elapsed_us+1
00053a 5ee0      	SUBI R30,LOW(-800)
00053b 4ffc      	SBCI R31,HIGH(-800)
00053c d576      	RCALL SUBOPT_0x38
                 ; 0003 0027     elapsed_ms += 8;
00053d 91e0 018c 	LDS  R30,_elapsed_ms
00053f 91f0 018d 	LDS  R31,_elapsed_ms+1
000541 9638      	ADIW R30,8
000542 d575      	RCALL SUBOPT_0x39
                 ; 0003 0028     if (elapsed_us >= 1000) { elapsed_ms ++;    elapsed_us %= 1000; }
000543 d579      	RCALL SUBOPT_0x3A
000544 d57d      	RCALL SUBOPT_0x3B
000545 f038      	BRLO _0x6000B
000546 e8ac      	LDI  R26,LOW(_elapsed_ms)
000547 e0b1      	LDI  R27,HIGH(_elapsed_ms)
000548 d57d      	RCALL SUBOPT_0x3C
000549 d573      	RCALL SUBOPT_0x3A
00054a d504      	RCALL SUBOPT_0x22
00054b d82b      	RCALL __MODW21U
00054c d566      	RCALL SUBOPT_0x38
                 ; 0003 0029     if (elapsed_ms >= 1000)
                 _0x6000B:
00054d d57e      	RCALL SUBOPT_0x3D
00054e d573      	RCALL SUBOPT_0x3B
00054f f0c8      	BRLO _0x6000C
                 ; 0003 002A     {
                 ; 0003 002B         elapsed_sec ++;
000550 e6a8      	LDI  R26,LOW(_elapsed_sec)
000551 e0b1      	LDI  R27,HIGH(_elapsed_sec)
000552 d573      	RCALL SUBOPT_0x3C
                 ; 0003 002C         elapsed_ms %= 1000;
000553 d578      	RCALL SUBOPT_0x3D
000554 d4fa      	RCALL SUBOPT_0x22
000555 d821      	RCALL __MODW21U
000556 d561      	RCALL SUBOPT_0x39
                 ; 0003 002D 
                 ; 0003 002E         if (junkFreeTimer < 60)
000557 91a0 0165 	LDS  R26,_junkFreeTimer
000559 33ac      	CPI  R26,LOW(0x3C)
00055a f428      	BRSH _0x6000D
                 ; 0003 002F             junkFreeTimer++;
00055b 91e0 0165 	LDS  R30,_junkFreeTimer
00055d 5fef      	SUBI R30,-LOW(1)
00055e 93e0 0165 	STS  _junkFreeTimer,R30
                 ; 0003 0030         if (autoSleepTimer < 255)
                 _0x6000D:
000560 91a0 0166 	LDS  R26,_autoSleepTimer
000562 3faf      	CPI  R26,LOW(0xFF)
000563 f428      	BRSH _0x6000E
                 ; 0003 0031             autoSleepTimer++;
000564 91e0 0166 	LDS  R30,_autoSleepTimer
000566 5fef      	SUBI R30,-LOW(1)
000567 93e0 0166 	STS  _autoSleepTimer,R30
                 ; 0003 0032     }
                 _0x6000E:
                 ; 0003 0033     if (elapsed_sec >= 1000)  { elapsed_sec = 0;    }
                 _0x6000C:
000569 d4ae      	RCALL SUBOPT_0x14
00056a d557      	RCALL SUBOPT_0x3B
00056b f028      	BRLO _0x6000F
00056c e0e0      	LDI  R30,LOW(0)
00056d 93e0 0168 	STS  _elapsed_sec,R30
00056f 93e0 0169 	STS  _elapsed_sec+1,R30
                 ; 0003 0034 
                 ; 0003 0035 }
                 _0x6000F:
000571 9508      	RET
                 ;bit inPowerLoop = 0;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0003 0038 {
                 _timer0_ovf_isr:
000572 920a      	ST   -Y,R0
000573 921a      	ST   -Y,R1
000574 92fa      	ST   -Y,R15
000575 936a      	ST   -Y,R22
000576 937a      	ST   -Y,R23
000577 938a      	ST   -Y,R24
000578 939a      	ST   -Y,R25
000579 93aa      	ST   -Y,R26
00057a 93ba      	ST   -Y,R27
00057b 93ea      	ST   -Y,R30
00057c 93fa      	ST   -Y,R31
00057d b7ef      	IN   R30,SREG
00057e 93ea      	ST   -Y,R30
                 ; 0003 0039     incTime();
00057f dfb6      	RCALL _incTime
                 ; 0003 003A     if(inPowerLoop) return;
000580 fc21      	SBRC R2,1
000581 c08f      	RJMP _0x60069
                 ; 0003 003B     inPowerLoop = 1;
000582 9468      	SET
000583 f821      	BLD  R2,1
                 ; 0003 003C 
                 ; 0003 003D     notLED = !((elapsed_sec % 3 == 0) && (elapsed_ms < 50));
000584 d493      	RCALL SUBOPT_0x14
000585 e0e3      	LDI  R30,LOW(3)
000586 e0f0      	LDI  R31,HIGH(3)
000587 d7ef      	RCALL __MODW21U
000588 9730      	SBIW R30,0
000589 f429      	BRNE _0x60011
00058a d541      	RCALL SUBOPT_0x3D
00058b 97d2      	SBIW R26,50
00058c f410      	BRSH _0x60011
00058d e0e1      	LDI  R30,1
00058e c001      	RJMP _0x60012
                 _0x60011:
00058f e0e0      	LDI  R30,0
                 _0x60012:
000590 30e0      	CPI  R30,0
000591 f011      	BREQ _0x60013
000592 98c2      	CBI  0x18,2
000593 c001      	RJMP _0x60014
                 _0x60013:
000594 9ac2      	SBI  0x18,2
                 _0x60014:
                 ; 0003 003E     if (cpuHaltAllowed)
000595 91e0 0163 	LDS  R30,_cpuHaltAllowed
000597 30e0      	CPI  R30,0
000598 f0d9      	BREQ _0x60015
                 ; 0003 003F     {
                 ; 0003 0040         mV = a2v(read_adc(0)) * 1000;
000599 e0a0      	LDI  R26,LOW(0)
00059a de92      	RCALL _read_adc
00059b 2766      	CLR  R22
00059c 2777      	CLR  R23
00059d d615      	RCALL __CDF1
                +
00059e e5ae     +LDI R26 , LOW ( 0x3BF82B5E )
00059f e2bb     +LDI R27 , HIGH ( 0x3BF82B5E )
0005a0 ef88     +LDI R24 , BYTE3 ( 0x3BF82B5E )
0005a1 e39b     +LDI R25 , BYTE4 ( 0x3BF82B5E )
                 	__GETD2N 0x3BF82B5E
0005a2 d695      	RCALL __MULF12
0005a3 d4e3      	RCALL SUBOPT_0x2E
                +
0005a4 e8e6     +LDI R30 , LOW ( 0x3FAFBC86 )
0005a5 ebfc     +LDI R31 , HIGH ( 0x3FAFBC86 )
0005a6 ea6f     +LDI R22 , BYTE3 ( 0x3FAFBC86 )
0005a7 e37f     +LDI R23 , BYTE4 ( 0x3FAFBC86 )
                 	__GETD1N 0x3FAFBC86
0005a8 d81d      	RCALL __SWAPD12
0005a9 d63c      	RCALL __SUBF12
                +
0005aa e0a0     +LDI R26 , LOW ( 0x447A0000 )
0005ab e0b0     +LDI R27 , HIGH ( 0x447A0000 )
0005ac e78a     +LDI R24 , BYTE3 ( 0x447A0000 )
0005ad e494     +LDI R25 , BYTE4 ( 0x447A0000 )
                 	__GETD2N 0x447A0000
0005ae d689      	RCALL __MULF12
0005af e6a1      	LDI  R26,LOW(_mV)
0005b0 e0b1      	LDI  R27,HIGH(_mV)
0005b1 d5ca      	RCALL __CFD1
0005b2 93ed      	ST   X+,R30
0005b3 93fc      	ST   X,R31
                 ; 0003 0041     }
                 ; 0003 0042 
                 ; 0003 0043 
                 ; 0003 0044     if (powerMode is FORCE_CHARGE)
                 _0x60015:
0005b4 91a0 0164 	LDS  R26,_powerMode
0005b6 30a7      	CPI  R26,LOW(0x7)
0005b7 f419      	BRNE _0x60016
                 ; 0003 0045     {
                 ; 0003 0046         charging be ON;
0005b8 9ac0      	SBI  0x18,0
                 ; 0003 0047         normalizeContrast();
0005b9 df66      	RCALL _normalizeContrast
                 ; 0003 0048     }
                 ; 0003 0049     else if (mV > maxRated)
0005ba c04f      	RJMP _0x60019
                 _0x60016:
0005bb d46e      	RCALL SUBOPT_0x19
0005bc 37ad      	CPI  R26,LOW(0x157D)
0005bd e1e5      	LDI  R30,HIGH(0x157D)
0005be 07be      	CPC  R27,R30
0005bf f02c      	BRLT _0x6001A
                 ; 0003 004A     {
                 ; 0003 004B         powerMode = POWER_OVERFLOW;
0005c0 e0e5      	LDI  R30,LOW(5)
0005c1 d50f      	RCALL SUBOPT_0x3E
                 ; 0003 004C         // just try to reduce the power by overloading
                 ; 0003 004D         charging be ON;
0005c2 9ac0      	SBI  0x18,0
                 ; 0003 004E         OCR2 = 0;
0005c3 e0e0      	LDI  R30,LOW(0)
0005c4 c044      	RJMP _0x60065
                 ; 0003 004F     }
                 ; 0003 0050     else if (mV > batteryFull)
                 _0x6001A:
0005c5 d4e3      	RCALL SUBOPT_0x36
0005c6 f0ac      	BRLT _0x6001E
                 ; 0003 0051     {
                 ; 0003 0052         if (powerMode == 0) // system start
0005c7 91e0 0164 	LDS  R30,_powerMode
0005c9 30e0      	CPI  R30,0
0005ca f429      	BRNE _0x6001F
                 ; 0003 0053         {
                 ; 0003 0054             charging be ON;
0005cb 9ac0      	SBI  0x18,0
                 ; 0003 0055             OCR2 = 160;
0005cc eae0      	LDI  R30,LOW(160)
0005cd bde3      	OUT  0x23,R30
                 ; 0003 0056             powerMode be ON_CHARGING;
0005ce e0e2      	LDI  R30,LOW(2)
0005cf c009      	RJMP _0x60066
                 ; 0003 0057         }
                 ; 0003 0058         else
                 _0x6001F:
                 ; 0003 0059         {
                 ; 0003 005A             if (charging is ON)
0005d0 9bc0      	SBIS 0x18,0
0005d1 c006      	RJMP _0x60023
                 ; 0003 005B             {
                 ; 0003 005C                 //Battery full, disconnect
                 ; 0003 005D                 charging be OFF;
0005d2 98c0      	CBI  0x18,0
                 ; 0003 005E                 powerMode = ON_EXTERNAL;
0005d3 e0e1      	LDI  R30,LOW(1)
0005d4 d4fc      	RCALL SUBOPT_0x3E
                 ; 0003 005F                 OCR2 = 0;
0005d5 e0e0      	LDI  R30,LOW(0)
0005d6 bde3      	OUT  0x23,R30
                 ; 0003 0060             }
                 ; 0003 0061             else    // over charged Battery, can't do anything
0005d7 c003      	RJMP _0x60026
                 _0x60023:
                 ; 0003 0062                 powerMode = ON_EXTERNAL;
0005d8 e0e1      	LDI  R30,LOW(1)
                 _0x60066:
0005d9 93e0 0164 	STS  _powerMode,R30
                 ; 0003 0063         }
                 _0x60026:
                 ; 0003 0064     }
                 ; 0003 0065     else if (mV > onBattery)
0005db c02e      	RJMP _0x60027
                 _0x6001E:
0005dc d4d1      	RCALL SUBOPT_0x37
0005dd f06c      	BRLT _0x60028
                 ; 0003 0066     {
                 ; 0003 0067         charging be ON;
0005de 9ac0      	SBI  0x18,0
                 ; 0003 0068         //either discharging in high state or charging normally, lets c
                 ; 0003 0069         if (mV > noExternal) //was not discharging
0005df d44a      	RCALL SUBOPT_0x19
0005e0 39a5      	CPI  R26,LOW(0x1195)
0005e1 e1e1      	LDI  R30,HIGH(0x1195)
0005e2 07be      	CPC  R27,R30
0005e3 f014      	BRLT _0x6002B
                 ; 0003 006A             powerMode = ON_CHARGING;
0005e4 e0e2      	LDI  R30,LOW(2)
0005e5 c001      	RJMP _0x60067
                 ; 0003 006B         else
                 _0x6002B:
                 ; 0003 006C             powerMode = ON_BATTERY;
0005e6 e0e3      	LDI  R30,LOW(3)
                 _0x60067:
0005e7 93e0 0164 	STS  _powerMode,R30
                 ; 0003 006D         //let the contrast adjust on next cycle
                 ; 0003 006E 
                 ; 0003 006F         //only if returns in same branch
                 ; 0003 0070         normalizeContrast();
0005e9 df36      	RCALL _normalizeContrast
                 ; 0003 0071     }
                 ; 0003 0072     else if (mV > batteryLow)
0005ea c01f      	RJMP _0x6002D
                 _0x60028:
0005eb d43e      	RCALL SUBOPT_0x19
0005ec 3da9      	CPI  R26,LOW(0xED9)
0005ed e0ee      	LDI  R30,HIGH(0xED9)
0005ee 07be      	CPC  R27,R30
0005ef f06c      	BRLT _0x6002E
                 ; 0003 0073     {
                 ; 0003 0074         if (charging is ON)
0005f0 99c0      	SBIC 0x18,0
                 ; 0003 0075         {
                 ; 0003 0076             //either too low battery or discharging already
                 ; 0003 0077             powerMode = ON_BATTERY;
0005f1 c007      	RJMP _0x60068
                 ; 0003 0078         }
                 ; 0003 0079         else
                 ; 0003 007A         {
                 ; 0003 007B             //power falure
                 ; 0003 007C             charging be ON;
0005f2 9ac0      	SBI  0x18,0
                 ; 0003 007D 
                 ; 0003 007E             if (powerMode != ON_BATTERY) //first time in branch
0005f3 91a0 0164 	LDS  R26,_powerMode
0005f5 30a3      	CPI  R26,LOW(0x3)
0005f6 f011      	BREQ _0x60033
                 ; 0003 007F             {
                 ; 0003 0080                 OCR2 = 200;
0005f7 ece8      	LDI  R30,LOW(200)
0005f8 bde3      	OUT  0x23,R30
                 ; 0003 0081                 //soundPowerFailure();
                 ; 0003 0082             }
                 ; 0003 0083             powerMode = ON_BATTERY;
                 _0x60033:
                 _0x60068:
0005f9 e0e3      	LDI  R30,LOW(3)
0005fa d4d6      	RCALL SUBOPT_0x3E
                 ; 0003 0084         }
                 ; 0003 0085         normalizeContrast();
0005fb df24      	RCALL _normalizeContrast
                 ; 0003 0086     }
                 ; 0003 0087     else // battery too low.
0005fc c00d      	RJMP _0x60034
                 _0x6002E:
                 ; 0003 0088     {
                 ; 0003 0089         if (powerMode is ON_BATTERY)
0005fd 91a0 0164 	LDS  R26,_powerMode
0005ff 30a3      	CPI  R26,LOW(0x3)
000600 f421      	BRNE _0x60035
                 ; 0003 008A         {
                 ; 0003 008B             charging be ON;
000601 9ac0      	SBI  0x18,0
                 ; 0003 008C             powerMode = BATTERY_LOW;
000602 e0e4      	LDI  R30,LOW(4)
000603 d4cd      	RCALL SUBOPT_0x3E
                 ; 0003 008D             //soundBatteryLow();
                 ; 0003 008E         }
                 ; 0003 008F         else
000604 c005      	RJMP _0x60038
                 _0x60035:
                 ; 0003 0090         //power failed
                 ; 0003 0091         {
                 ; 0003 0092             charging be ON;
000605 9ac0      	SBI  0x18,0
                 ; 0003 0093             powerMode = ON_BATTERY;
000606 e0e3      	LDI  R30,LOW(3)
000607 d4c9      	RCALL SUBOPT_0x3E
                 ; 0003 0094             OCR2 = 210;
000608 ede2      	LDI  R30,LOW(210)
                 _0x60065:
000609 bde3      	OUT  0x23,R30
                 ; 0003 0095             //soundPowerFailure();
                 ; 0003 0096         }
                 _0x60038:
                 ; 0003 0097     }
                 _0x60034:
                 _0x6002D:
                 _0x60027:
                 _0x60019:
                 ; 0003 0098     if (!dontWDR)
00060a 91e0 0167 	LDS  R30,_dontWDR
00060c 30e0      	CPI  R30,0
00060d f409      	BRNE _0x6003B
                 ; 0003 0099         #asm("WDR")
00060e 95a8      	WDR
                 ; 0003 009A     inPowerLoop = 0;
                 _0x6003B:
00060f 94e8      	CLT
000610 f821      	BLD  R2,1
                 ; 0003 009B }
                 _0x60069:
000611 91e9      	LD   R30,Y+
000612 bfef      	OUT  SREG,R30
000613 91f9      	LD   R31,Y+
000614 91e9      	LD   R30,Y+
000615 91b9      	LD   R27,Y+
000616 91a9      	LD   R26,Y+
000617 9199      	LD   R25,Y+
000618 9189      	LD   R24,Y+
000619 9179      	LD   R23,Y+
00061a 9169      	LD   R22,Y+
00061b 90f9      	LD   R15,Y+
00061c 9019      	LD   R1,Y+
00061d 9009      	LD   R0,Y+
00061e 9518      	RETI
                 ;
                 ;
                 ;void controller_init(void)
                 ; 0003 009F {
                 _controller_init:
                 ; 0003 00A0     delay_ms(100);
00061f d4b4      	RCALL SUBOPT_0x3F
                 ; 0003 00A1     //OSCCAL = 0xFF; // double the internal oscillator speed
                 ; 0003 00A2     cpuHaltAllowed = 0;
000620 e0e0      	LDI  R30,LOW(0)
000621 d4b5      	RCALL SUBOPT_0x40
                 ; 0003 00A3     adc_init();
000622 de73      	RCALL _adc_init
                 ; 0003 00A4     lcd_init(16);
000623 e1a0      	LDI  R26,LOW(16)
000624 d352      	RCALL _lcd_init
                 ; 0003 00A5     uart_init();
000625 deef      	RCALL _uart_init
                 ; 0003 00A6 
                 ; 0003 00A7     init_fingerPrint_char();
000626 d2b4      	RCALL _init_fingerPrint_char
                 ; 0003 00A8     init_battery_char();
000627 d2b8      	RCALL _init_battery_char
                 ; 0003 00A9     init_switch_char();
000628 d2bc      	RCALL _init_switch_char
                 ; 0003 00AA     init_locked_char();
000629 d2c0      	RCALL _init_locked_char
                 ; 0003 00AB     init_unlocked_char();
00062a d2c4      	RCALL _init_unlocked_char
                 ; 0003 00AC     init_smilie_char();
00062b d2c8      	RCALL _init_smilie_char
                 ; 0003 00AD     dontWDR = 0;
00062c e0e0      	LDI  R30,LOW(0)
00062d 93e0 0167 	STS  _dontWDR,R30
                 ; 0003 00AE 
                 ; 0003 00AF     DDRB.0 = 1;     //battery charge
00062f 9ab8      	SBI  0x17,0
                 ; 0003 00B0     PORTB.0 = 0;    //battery charge
000630 98c0      	CBI  0x18,0
                 ; 0003 00B1 
                 ; 0003 00B2     DDRB.1 = 1; //buzzer
000631 9ab9      	SBI  0x17,1
                 ; 0003 00B3     PORTB.1 = 0;
000632 98c1      	CBI  0x18,1
                 ; 0003 00B4 
                 ; 0003 00B5     DDRB.2 = 1;     //not LED
000633 9aba      	SBI  0x17,2
                 ; 0003 00B6     DDRB.2 = 1;     //not LED
000634 9aba      	SBI  0x17,2
                 ; 0003 00B7 
                 ; 0003 00B8     DDRB.3 = 1;     //chargepump
000635 9abb      	SBI  0x17,3
                 ; 0003 00B9 
                 ; 0003 00BA     DDRB.7 = 1;     //motor
000636 9abf      	SBI  0x17,7
                 ; 0003 00BB     PORTB.7 = 0;
000637 98c7      	CBI  0x18,7
                 ; 0003 00BC 
                 ; 0003 00BD 
                 ; 0003 00BE     DDRC.0 = 0;     //VCC/Vref
000638 98a0      	CBI  0x14,0
                 ; 0003 00BF     PORTC.0 = 0;
000639 98a8      	CBI  0x15,0
                 ; 0003 00C0 
                 ; 0003 00C1     DDRD &= ~0xE0; // buttons
00063a b3e1      	IN   R30,0x11
00063b 71ef      	ANDI R30,LOW(0x1F)
00063c bbe1      	OUT  0x11,R30
                 ; 0003 00C2     PORTD |= 0xE0; // buttons
00063d b3e2      	IN   R30,0x12
00063e 6ee0      	ORI  R30,LOW(0xE0)
00063f bbe2      	OUT  0x12,R30
                 ; 0003 00C3 
                 ; 0003 00C4     DDRD.0 = 0; //uart
000640 9888      	CBI  0x11,0
                 ; 0003 00C5     DDRD.1 = 1;
000641 9a89      	SBI  0x11,1
                 ; 0003 00C6     PORTD.0 = 0;
000642 9890      	CBI  0x12,0
                 ; 0003 00C7     PORTD.1 = 1;
000643 9a91      	SBI  0x12,1
                 ; 0003 00C8 
                 ; 0003 00C9     DDRD.2 = 1;  //FPS power
000644 9a8a      	SBI  0x11,2
                 ; 0003 00CA     PORTD.2 = 0; //FPS power
000645 9892      	CBI  0x12,2
                 ; 0003 00CB 
                 ; 0003 00CC     DDRD.3 = 0;  //IRD
000646 988b      	CBI  0x11,3
                 ; 0003 00CD     PORTD.3 = 0;
000647 9893      	CBI  0x12,3
                 ; 0003 00CE 
                 ; 0003 00CF     //LCD contrast
                 ; 0003 00D0 
                 ; 0003 00D1     // Timer/Counter 2 initialization
                 ; 0003 00D2     // Clock source: System Clock
                 ; 0003 00D3     // Clock value: 1000.000 kHz
                 ; 0003 00D4     // Mode: Fast PWM top=0xFF
                 ; 0003 00D5     // OC2 output: Inverted PWM
                 ; 0003 00D6     ASSR=0x00;
000648 e0e0      	LDI  R30,LOW(0)
000649 bde2      	OUT  0x22,R30
                 ; 0003 00D7     TCCR2=0x7B;
00064a e7eb      	LDI  R30,LOW(123)
00064b bde5      	OUT  0x25,R30
                 ; 0003 00D8     TCNT2=0x00;
00064c e0e0      	LDI  R30,LOW(0)
00064d bde4      	OUT  0x24,R30
                 ; 0003 00D9     OCR2=0x7F;
00064e e7ef      	LDI  R30,LOW(127)
00064f bde3      	OUT  0x23,R30
                 ; 0003 00DA 
                 ; 0003 00DB     // Timer/Counter 0 initialization
                 ; 0003 00DC     // Clock source: System Clock
                 ; 0003 00DD     // Clock value: 31.250 kHz
                 ; 0003 00DE     TCCR0=0x04;
000650 e0e4      	LDI  R30,LOW(4)
000651 bfe3      	OUT  0x33,R30
                 ; 0003 00DF     TCNT0=0x00;
000652 e0e0      	LDI  R30,LOW(0)
000653 bfe2      	OUT  0x32,R30
                 ; 0003 00E0     TIMSK |= 0x01;
000654 b7e9      	IN   R30,0x39
000655 60e1      	ORI  R30,1
000656 bfe9      	OUT  0x39,R30
                 ; 0003 00E1 
                 ; 0003 00E2     lcd_clear();
000657 d2e7      	RCALL _lcd_clear
                 ; 0003 00E3     cpuHaltAllowed = 1;
000658 e0e1      	LDI  R30,LOW(1)
000659 d47d      	RCALL SUBOPT_0x40
                 ; 0003 00E4     notLED be iOFF;
00065a 9ac2      	SBI  0x18,2
                 ; 0003 00E5     powerMode = FORCE_CHARGE;
00065b e0e7      	LDI  R30,LOW(7)
00065c d474      	RCALL SUBOPT_0x3E
                 ; 0003 00E6 
                 ; 0003 00E7     // Watchdog Timer initialization
                 ; 0003 00E8     // Watchdog Timer Prescaler: OSC/512k
                 ; 0003 00E9     #pragma optsize-
                 ; 0003 00EA     WDTCR=0x1F;
00065d e1ef      	LDI  R30,LOW(31)
00065e bde1      	OUT  0x21,R30
                 ; 0003 00EB     WDTCR=0x0F;
00065f e0ef      	LDI  R30,LOW(15)
000660 bde1      	OUT  0x21,R30
                 ; 0003 00EC     #ifdef _OPTIMIZE_SIZE_
                 ; 0003 00ED     #pragma optsize+
                 ; 0003 00EE     #endif
                 ; 0003 00EF 
                 ; 0003 00F0 
                 ; 0003 00F1     #asm("sei");
000661 9478      	sei
                 ; 0003 00F2 
                 ; 0003 00F3     lcd_putsf("techCREATIONS");
                +
000662 edaa     +LDI R26 , LOW ( 2 * _0x60000 + ( 0 ) )
000663 e0b1     +LDI R27 , HIGH ( 2 * _0x60000 + ( 0 ) )
                 	__POINTW2FN _0x60000,0
000664 d300      	RCALL _lcd_putsf
                 ; 0003 00F4     delay_ms(500);
000665 d3f1      	RCALL SUBOPT_0x24
                 ; 0003 00F5     failedCount = 0;
000666 d372      	RCALL SUBOPT_0x6
                 ; 0003 00F6     powerMode = ON_CHARGING;
000667 e0e2      	LDI  R30,LOW(2)
000668 d468      	RCALL SUBOPT_0x3E
                 ; 0003 00F7     lcd_clear();
000669 d2d5      	RCALL _lcd_clear
                 ; 0003 00F8     delay_ms(10);
00066a e0aa      	LDI  R26,LOW(10)
00066b d46e      	RCALL SUBOPT_0x41
00066c c1a8      	RJMP _0x20C0008
                 ; 0003 00F9 }
                 ;#include "GPS_GT511x_comDefs.h"
                 ;#include "projDefines.h"
                 ;#include "projHeaders.h"
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdint.h>
                 ;#include <stdbool.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;#include <alcd.h>
                 ;
                 ;#define lowByte(u16) (u16 % 256)
                 ;#define highByte(u16) ((u16 >> 8) % 256)
                 ;#define UseLCDDebug 0
                 ;
                 ;uint8_t txPacket []= 	{0x55, 0xAA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0, 0x00, 0x0, 0x00};
                 
                 	.DSEG
                 ;uint8_t rxPacket [12];
                 ;
                 ;#define rxData (x_)  rxPacket[4 + x_]
                 ;void getCommand(uint16_t com, uint32_t data)
                 ; 0004 0015 {
                 
                 	.CSEG
                 _getCommand:
                 ; 0004 0016 	uint16_t chkSum_ = 0, rd_data = 0, i;
                 ; 0004 0017     cpuHaltAllowed = 0;
00066d d753      	RCALL __PUTPARD2
00066e d41b      	RCALL SUBOPT_0x2F
                 ;	com -> Y+10
                 ;	data -> Y+6
                 ;	chkSum_ -> R16,R17
                 ;	rd_data -> R18,R19
                 ;	i -> R20,R21
00066f e0e0      	LDI  R30,LOW(0)
000670 d466      	RCALL SUBOPT_0x40
                 ; 0004 0018 #if UseLCDDebug
                 ; 0004 0019 	lcd_clear();
                 ; 0004 001A     lcd_putsf("Sent\n");
                 ; 0004 001B #endif
                 ; 0004 001C 	for (i = 0; i < 4; i++)
000671 d46a      	RCALL SUBOPT_0x42
                 _0x80005:
                +
000672 3044     +CPI R20 , LOW ( 4 )
000673 e0e0     +LDI R30 , HIGH ( 4 )
000674 075e     +CPC R21 , R30
                 	__CPWRN 20,21,4
000675 f4a8      	BRSH _0x80006
                 ; 0004 001D 	{
                 ; 0004 001E 		txPacket[4 + i] = data % 256; data /= 256;
000676 01fa      	MOVW R30,R20
                +
000677 56ee     +SUBI R30 , LOW ( - _txPacket - ( 4 ) )
000678 4ffe     +SBCI R31 , HIGH ( - _txPacket - ( 4 ) )
                 	__ADDW1MN _txPacket,4
000679 01df      	MOVW R26,R30
00067a 81ee      	LDD  R30,Y+6
00067b 93ec      	ST   X,R30
                +
00067c 81ae     +LDD R26 , Y + 6
00067d 81bf     +LDD R27 , Y + 6 + 1
00067e 8588     +LDD R24 , Y + 6 + 2
00067f 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
                +
000680 e0e0     +LDI R30 , LOW ( 0x100 )
000681 e0f1     +LDI R31 , HIGH ( 0x100 )
000682 e060     +LDI R22 , BYTE3 ( 0x100 )
000683 e070     +LDI R23 , BYTE4 ( 0x100 )
                 	__GETD1N 0x100
000684 d6c8      	RCALL __DIVD21U
                +
000685 83ee     +STD Y + 6 , R30
000686 83ff     +STD Y + 6 + 1 , R31
000687 8768     +STD Y + 6 + 2 , R22
000688 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                 ; 0004 001F 	}
000689 d455      	RCALL SUBOPT_0x43
00068a cfe7      	RJMP _0x80005
                 _0x80006:
                 ; 0004 0020 	txPacket[8] = com % 256; com /= 256;
00068b 85ea      	LDD  R30,Y+10
                +
00068c 93e0 0196+STS _txPacket + ( 8 ) , R30
                 	__PUTB1MN _txPacket,8
00068e 85eb      	LDD  R30,Y+11
00068f 70f0      	ANDI R31,HIGH(0x0)
000690 87ea      	STD  Y+10,R30
000691 87fb      	STD  Y+10+1,R31
                 ; 0004 0021 	txPacket[9] = com % 256;
000692 85ea      	LDD  R30,Y+10
                +
000693 93e0 0197+STS _txPacket + ( 9 ) , R30
                 	__PUTB1MN _txPacket,9
                 ; 0004 0022 
                 ; 0004 0023 	for(i = 0; i < 10; i++)
000695 d446      	RCALL SUBOPT_0x42
                 _0x80008:
                +
000696 304a     +CPI R20 , LOW ( 10 )
000697 e0e0     +LDI R30 , HIGH ( 10 )
000698 075e     +CPC R21 , R30
                 	__CPWRN 20,21,10
000699 f438      	BRSH _0x80009
                 ; 0004 0024 		chkSum_ += txPacket[i];
00069a d447      	RCALL SUBOPT_0x44
00069b 91ec      	LD   R30,X
00069c d371      	RCALL SUBOPT_0x11
                +
00069d 0f0e     +ADD R16 , R30
00069e 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
00069f d43f      	RCALL SUBOPT_0x43
0006a0 cff5      	RJMP _0x80008
                 _0x80009:
                 ; 0004 0025 txPacket[10] = chkSum_ % 256; chkSum_ /= 256;
0006a1 2fe0      	MOV  R30,R16
                +
0006a2 93e0 0198+STS _txPacket + ( 10 ) , R30
                 	__PUTB1MN _txPacket,10
0006a4 2f01      	MOV  R16,R17
0006a5 2711      	CLR  R17
                 ; 0004 0026 	txPacket[11] = chkSum_ ;
                +
0006a6 9300 0199+STS _txPacket + ( 11 ) , R16
                 	__PUTBMRN _txPacket,11,16
                 ; 0004 0027 
                 ; 0004 0028 	for(i = 0; i < 12; i++)
0006a8 d433      	RCALL SUBOPT_0x42
                 _0x8000B:
                +
0006a9 304c     +CPI R20 , LOW ( 12 )
0006aa e0e0     +LDI R30 , HIGH ( 12 )
0006ab 075e     +CPC R21 , R30
                 	__CPWRN 20,21,12
0006ac f428      	BRSH _0x8000C
                 ; 0004 0029 	{
                 ; 0004 002A 		putchar(txPacket[i]);
0006ad d434      	RCALL SUBOPT_0x44
0006ae 91ac      	LD   R26,X
0006af de4b      	RCALL _putchar
                 ; 0004 002B 	}
0006b0 d42e      	RCALL SUBOPT_0x43
0006b1 cff7      	RJMP _0x8000B
                 _0x8000C:
                 ; 0004 002C #if UseLCDDebug
                 ; 0004 002D 	lcd_clear();
                 ; 0004 002E 	lcd_putsf("Got Back.");
                 ; 0004 002F #endif
                 ; 0004 0030 	for (i = 0; i < 12; i++)
0006b2 d429      	RCALL SUBOPT_0x42
                 _0x8000E:
                +
0006b3 304c     +CPI R20 , LOW ( 12 )
0006b4 e0e0     +LDI R30 , HIGH ( 12 )
0006b5 075e     +CPC R21 , R30
                 	__CPWRN 20,21,12
0006b6 f448      	BRSH _0x8000F
                 ; 0004 0031 	{
                 ; 0004 0032 		//while(rx_counter == 0);
                 ; 0004 0033 		rd_data = getchar();
0006b7 de0f      	RCALL _getchar
0006b8 2f2e      	MOV  R18,R30
0006b9 2733      	CLR  R19
                 ; 0004 0034 
                 ; 0004 0035 		rxPacket[i] = rd_data;
0006ba 01fa      	MOVW R30,R20
0006bb 56e6      	SUBI R30,LOW(-_rxPacket)
0006bc 4ffe      	SBCI R31,HIGH(-_rxPacket)
0006bd 8320      	ST   Z,R18
                 ; 0004 0036 	}
0006be d420      	RCALL SUBOPT_0x43
0006bf cff3      	RJMP _0x8000E
                 _0x8000F:
                 ; 0004 0037     cpuHaltAllowed = 1;
0006c0 e0e1      	LDI  R30,LOW(1)
0006c1 d415      	RCALL SUBOPT_0x40
                 ; 0004 0038 }
0006c2 d74e      	RCALL __LOADLOCR6
0006c3 c045      	RJMP _0x20C000C
                 ;
                 ;uint8_t setCmosLED(uint8_t state_)
                 ; 0004 003B {
                 _setCmosLED:
                 ; 0004 003C 	getCommand(CmosLed, state_);
0006c4 93aa      	ST   -Y,R26
                 ;	state_ -> Y+0
0006c5 e1e2      	LDI  R30,LOW(18)
0006c6 e0f0      	LDI  R31,HIGH(18)
0006c7 d41f      	RCALL SUBOPT_0x45
0006c8 d421      	RCALL SUBOPT_0x46
                 ; 0004 003D 	return rxPacket[10] == 0x30; // ACK
0006c9 d425      	RCALL SUBOPT_0x47
0006ca c2d5      	RJMP _0x20C0001
                 ; 0004 003E }
                 ;
                 ;uint8_t FPS_open(void)
                 ; 0004 0041 {
                 _FPS_open:
                 ; 0004 0042     delay_ms(100);
0006cb d408      	RCALL SUBOPT_0x3F
                 ; 0004 0043 	getCommand(FPSOpen, 0);
0006cc e0e1      	LDI  R30,LOW(1)
0006cd e0f0      	LDI  R31,HIGH(1)
0006ce c002      	RJMP _0x20C000D
                 ; 0004 0044 	return rxPacket[10] == 0x30; // ACK
                 ; 0004 0045 }
                 ;uint8_t FPS_close(void)
                 ; 0004 0047 {
                 _FPS_close:
                 ; 0004 0048 	getCommand(FPSClose, 0);
0006cf e0e2      	LDI  R30,LOW(2)
0006d0 e0f0      	LDI  R31,HIGH(2)
                 _0x20C000D:
0006d1 93fa      	ST   -Y,R31
0006d2 93ea      	ST   -Y,R30
0006d3 d420      	RCALL SUBOPT_0x48
                 ; 0004 0049 	return rxPacket[10] == 0x30; // ACK
0006d4 d41a      	RCALL SUBOPT_0x47
0006d5 9508      	RET
                 ; 0004 004A }
                 ;void FPS_reset(void)
                 ; 0004 004C {
                 _FPS_reset:
                 ; 0004 004D 	FPS_open();
0006d6 dff4      	RCALL _FPS_open
                 ; 0004 004E     delay_ms(1000);
0006d7 d314      	RCALL SUBOPT_0xB
                 ; 0004 004F 	FPS_close();
0006d8 dff6      	RCALL _FPS_close
                 ; 0004 0050 }
0006d9 9508      	RET
                 ;uint32_t FPS_getInt(uint32_t com)
                 ; 0004 0052 {
                 _FPS_getInt:
                 ; 0004 0053 	uint32_t ans = 0, i = 0;
                 ; 0004 0054 	getCommand(com, 0);
0006da d6e6      	RCALL __PUTPARD2
0006db 9728      	SBIW R28,8
0006dc e0e0      	LDI  R30,LOW(0)
0006dd 83e8      	ST   Y,R30
0006de d336      	RCALL SUBOPT_0x13
0006df d386      	RCALL SUBOPT_0x28
0006e0 e0e0      	LDI  R30,LOW(0)
0006e1 83ec      	STD  Y+4,R30
0006e2 83ed      	STD  Y+5,R30
0006e3 83ee      	STD  Y+6,R30
0006e4 d3ab      	RCALL SUBOPT_0x30
                 ;	com -> Y+8
                 ;	ans -> Y+4
                 ;	i -> Y+0
0006e5 85e8      	LDD  R30,Y+8
0006e6 85f9      	LDD  R31,Y+8+1
0006e7 d411      	RCALL SUBOPT_0x49
                 ; 0004 0055 	for (i = 0; i < 4; i++)
0006e8 e0e0      	LDI  R30,LOW(0)
0006e9 d6d2      	RCALL __CLRD1S0
                 _0x80011:
0006ea d6c7      	RCALL __GETD2S0
                +
0006eb 30a4     +CPI R26 , LOW ( 0x4 )
0006ec e0e0     +LDI R30 , HIGH ( 0x4 )
0006ed 07be     +CPC R27 , R30
0006ee e0e0     +LDI R30 , BYTE3 ( 0x4 )
0006ef 078e     +CPC R24 , R30
0006f0 e0e0     +LDI R30 , BYTE4 ( 0x4 )
0006f1 079e     +CPC R25 , R30
                 	__CPD2N 0x4
0006f2 f4a8      	BRSH _0x80012
                 ; 0004 0056 	{
                 ; 0004 0057 		ans += rxPacket[4 + i] << (8 * i);
0006f3 81e8      	LD   R30,Y
0006f4 81f9      	LDD  R31,Y+1
                +
0006f5 56e2     +SUBI R30 , LOW ( - _rxPacket - ( 4 ) )
0006f6 4ffe     +SBCI R31 , HIGH ( - _rxPacket - ( 4 ) )
                 	__ADDW1MN _rxPacket,4
0006f7 81a0      	LD   R26,Z
0006f8 d3e1      	RCALL SUBOPT_0x41
0006f9 81e8      	LD   R30,Y
0006fa 0fee      	LSL  R30
0006fb 0fee      	LSL  R30
0006fc 0fee      	LSL  R30
0006fd d5fb      	RCALL __CWD2
0006fe d5e2      	RCALL __LSLD12
0006ff d36a      	RCALL SUBOPT_0x29
000700 d36e      	RCALL SUBOPT_0x2A
                 ; 0004 0058 	}
000701 d3f9      	RCALL SUBOPT_0x4A
                +
000702 5fef     +SUBI R30 , LOW ( - 1 )
000703 4fff     +SBCI R31 , HIGH ( - 1 )
000704 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000705 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
000706 d3f6      	RCALL SUBOPT_0x4B
000707 cfe2      	RJMP _0x80011
                 _0x80012:
                 ; 0004 0059 	return ans;
000708 d376      	RCALL SUBOPT_0x2C
                 _0x20C000C:
000709 962c      	ADIW R28,12
00070a 9508      	RET
                 ; 0004 005A }
                 ;uint8_t fingerPressed(void)
                 ; 0004 005C {
                 _fingerPressed:
                 ; 0004 005D 	getCommand(IsPressFinger, 0);
00070b e2e6      	LDI  R30,LOW(38)
00070c e0f0      	LDI  R31,HIGH(38)
00070d d3eb      	RCALL SUBOPT_0x49
                 ; 0004 005E 	return rxPacket[4] ? 0: 1;
00070e d3f0      	RCALL SUBOPT_0x4C
00070f f011      	BREQ _0x80013
000710 e0e0      	LDI  R30,LOW(0)
000711 c001      	RJMP _0x80014
                 _0x80013:
000712 e0e1      	LDI  R30,LOW(1)
                 _0x80014:
000713 9508      	RET
                 ; 0004 005F }
                 ;uint32_t getEnrolledCount(void)
                 ; 0004 0061 {
                 _getEnrolledCount:
                 ; 0004 0062 	return FPS_getInt(GetEnrollCount);
                +
000714 e2a0     +LDI R26 , LOW ( 0x20 )
000715 e0b0     +LDI R27 , HIGH ( 0x20 )
000716 e080     +LDI R24 , BYTE3 ( 0x20 )
000717 e090     +LDI R25 , BYTE4 ( 0x20 )
                 	__GETD2N 0x20
000718 dfc1      	RCALL _FPS_getInt
000719 9508      	RET
                 ; 0004 0063 }
                 ;uint8_t isEnrolled(uint8_t id)
                 ; 0004 0065 {
                 _isEnrolled:
                 ; 0004 0066 #if UseLCDDebug
                 ; 0004 0067 	lcd_clear();
                 ; 0004 0068 	lcd_putsf("CheckEnrolled");
                 ; 0004 0069 #endif
                 ; 0004 006A 	getCommand(CheckEnrolled, id);
00071a 93aa      	ST   -Y,R26
                 ;	id -> Y+0
00071b e2e1      	LDI  R30,LOW(33)
00071c e0f0      	LDI  R31,HIGH(33)
00071d d3c9      	RCALL SUBOPT_0x45
00071e d3cb      	RCALL SUBOPT_0x46
                 ; 0004 006B 	return rxPacket[4] ? 0: 1;
00071f d3df      	RCALL SUBOPT_0x4C
000720 f011      	BREQ _0x80016
000721 e0e0      	LDI  R30,LOW(0)
000722 c001      	RJMP _0x80017
                 _0x80016:
000723 e0e1      	LDI  R30,LOW(1)
                 _0x80017:
000724 c27b      	RJMP _0x20C0001
                 ; 0004 006C }
                 ;uint8_t deleteID(uint8_t id)
                 ; 0004 006E {
                 _deleteID:
                 ; 0004 006F #if UseLCDDebug
                 ; 0004 0070 	lcd_clear();
                 ; 0004 0071 	lcd_putsf("delete ID");
                 ; 0004 0072 #endif
                 ; 0004 0073 	getCommand(DeleteID, id);
000725 93aa      	ST   -Y,R26
                 ;	id -> Y+0
000726 e4e0      	LDI  R30,LOW(64)
000727 e0f0      	LDI  R31,HIGH(64)
000728 d3be      	RCALL SUBOPT_0x45
000729 d3c0      	RCALL SUBOPT_0x46
                 ; 0004 0074 	return rxPacket[4] ? 0: 1;
00072a d3d4      	RCALL SUBOPT_0x4C
00072b f011      	BREQ _0x80019
00072c e0e0      	LDI  R30,LOW(0)
00072d c001      	RJMP _0x8001A
                 _0x80019:
00072e e0e1      	LDI  R30,LOW(1)
                 _0x8001A:
00072f c270      	RJMP _0x20C0001
                 ; 0004 0075 }
                 ;uint8_t getFingerId(void)
                 ; 0004 0077 {
                 _getFingerId:
                 ; 0004 0078 	uint32_t ans = 0;
                 ; 0004 0079 	//lcd_clear();
                 ; 0004 007A 	//lcd_putsf("Place your finger.");
                 ; 0004 007B 	setCmosLED(1);
000730 d331      	RCALL SUBOPT_0x27
000731 d334      	RCALL SUBOPT_0x28
                 ;	ans -> Y+0
000732 d2ab      	RCALL SUBOPT_0x7
                 ; 0004 007C 	while (!fingerPressed());
                 _0x8001C:
000733 d2ac      	RCALL SUBOPT_0x8
000734 f3f1      	BREQ _0x8001C
                 ; 0004 007D 	ans = FPS_getInt(Identify1_N);
                +
000735 e5a1     +LDI R26 , LOW ( 0x51 )
000736 e0b0     +LDI R27 , HIGH ( 0x51 )
000737 e080     +LDI R24 , BYTE3 ( 0x51 )
000738 e090     +LDI R25 , BYTE4 ( 0x51 )
                 	__GETD2N 0x51
000739 dfa0      	RCALL _FPS_getInt
00073a d3c2      	RCALL SUBOPT_0x4B
                 ; 0004 007E 	setCmosLED(0);
00073b e0a0      	LDI  R26,LOW(0)
00073c df87      	RCALL _setCmosLED
                 ; 0004 007F 	if (rxPacket[10] == Nack)
00073d d3c5      	RCALL SUBOPT_0x4D
00073e f431      	BRNE _0x8001F
                 ; 0004 0080 	{
                 ; 0004 0081 	    lcd_clear();
00073f d1ff      	RCALL _lcd_clear
                 ; 0004 0082 	    lcd_putsf("Failed");
                +
000740 eeac     +LDI R26 , LOW ( 2 * _0x80000 + ( 0 ) )
000741 e0b1     +LDI R27 , HIGH ( 2 * _0x80000 + ( 0 ) )
                 	__POINTW2FN _0x80000,0
000742 d222      	RCALL _lcd_putsf
                 ; 0004 0083 		return 21;
000743 e1e5      	LDI  R30,LOW(21)
000744 c001      	RJMP _0x20C000B
                 ; 0004 0084 	}
                 ; 0004 0085 	return ans;
                 _0x8001F:
000745 81e8      	LD   R30,Y
                 _0x20C000B:
000746 9624      	ADIW R28,4
000747 9508      	RET
                 ; 0004 0086 }
                 ;uint8_t deleteAllIds(void)
                 ; 0004 0088 {
                 ; 0004 0089 	uint32_t ans = 0;
                 ; 0004 008A 
                 ; 0004 008B 	ans = FPS_getInt(DeleteAll);
                 ;	ans -> Y+0
                 ; 0004 008C 
                 ; 0004 008D     if (rxPacket[10] == Nack)
                 ; 0004 008E 	{
                 ; 0004 008F 	    lcd_clear();
                 ; 0004 0090 	    lcd_putsf("Failed");
                 ; 0004 0091 		return 21;
                 ; 0004 0092 	}
                 ; 0004 0093 	return ans;
                 ; 0004 0094 }
                 ;
                 ;uint8_t getAFreeId(void)
                 ; 0004 0097 {
                 _getAFreeId:
                 ; 0004 0098 	uint8_t i = 0;
                 ; 0004 0099 	for (i = 0; i < 8; i++)
000748 931a      	ST   -Y,R17
                 ;	i -> R17
000749 e010      	LDI  R17,0
00074a e010      	LDI  R17,LOW(0)
                 _0x80022:
00074b 3018      	CPI  R17,8
00074c f438      	BRSH _0x80023
                 ; 0004 009A 	{
                 ; 0004 009B 		if (!isEnrolled(i))
00074d 2fa1      	MOV  R26,R17
00074e dfcb      	RCALL _isEnrolled
00074f 30e0      	CPI  R30,0
000750 f409      	BRNE _0x80024
                 ; 0004 009C 			return i;
000751 c084      	RJMP _0x20C0009
                 ; 0004 009D 	}
                 _0x80024:
000752 5f1f      	SUBI R17,-1
000753 cff7      	RJMP _0x80022
                 _0x80023:
                 ; 0004 009E 	return i;
000754 c081      	RJMP _0x20C0009
                 ; 0004 009F }
                 ;uint8_t enrollAFinger(uint8_t id)
                 ; 0004 00A1 {
                 _enrollAFinger:
                 ; 0004 00A2 	lcd_clear();
000755 93aa      	ST   -Y,R26
                 ;	id -> Y+0
000756 d1e8      	RCALL _lcd_clear
                 ; 0004 00A3     bips(4);
000757 e0a4      	LDI  R26,LOW(4)
000758 d0db      	RCALL _bips
                 ; 0004 00A4 	lcd_putsf("Place finger ");
000759 d3ad      	RCALL SUBOPT_0x4E
                 ; 0004 00A5     lcd_gotoxy(0,1);
                 ; 0004 00A6     lcd_putsf("(1/3)");
                +
00075a e0a1     +LDI R26 , LOW ( 2 * _0x80000 + ( 21 ) )
00075b e0b2     +LDI R27 , HIGH ( 2 * _0x80000 + ( 21 ) )
                 	__POINTW2FN _0x80000,21
00075c d267      	RCALL SUBOPT_0x1
                 ; 0004 00A7     delay_ms(1000);
                 ; 0004 00A8 	setCmosLED(1);
00075d d280      	RCALL SUBOPT_0x7
                 ; 0004 00A9 	while (!fingerPressed()) {if (cancel_PB is pressed) return 2;}
                 _0x80025:
00075e d281      	RCALL SUBOPT_0x8
00075f f429      	BRNE _0x80027
000760 9985      	SBIC 0x10,5
000761 c002      	RJMP _0x80028
000762 e0e2      	LDI  R30,LOW(2)
000763 c23c      	RJMP _0x20C0001
                 _0x80028:
000764 cff9      	RJMP _0x80025
                 _0x80027:
                 ; 0004 00AA 	delay_ms(1000);
000765 d286      	RCALL SUBOPT_0xB
                 ; 0004 00AB 
                 ; 0004 00AC 	getCommand(EnrollStart, id);
000766 e2e2      	LDI  R30,LOW(34)
000767 e0f0      	LDI  R31,HIGH(34)
000768 d37e      	RCALL SUBOPT_0x45
000769 d380      	RCALL SUBOPT_0x46
                 ; 0004 00AD 	getCommand(Enroll1, 0);
00076a e2e3      	LDI  R30,LOW(35)
00076b e0f0      	LDI  R31,HIGH(35)
00076c d38c      	RCALL SUBOPT_0x49
                 ; 0004 00AE 	if (rxPacket[10] == Nack)
00076d d395      	RCALL SUBOPT_0x4D
00076e f441      	BRNE _0x80029
                 ; 0004 00AF 	{
                 ; 0004 00B0 	    lcd_clear();
00076f d1cf      	RCALL _lcd_clear
                 ; 0004 00B1 	    lcd_putsf("Failed. ");
                +
000770 e0a7     +LDI R26 , LOW ( 2 * _0x80000 + ( 27 ) )
000771 e0b2     +LDI R27 , HIGH ( 2 * _0x80000 + ( 27 ) )
                 	__POINTW2FN _0x80000,27
000772 d24c      	RCALL SUBOPT_0x0
                 ; 0004 00B2         lcd_gotoxy(0,1);
                 ; 0004 00B3         lcd_putsf("Reseting FPS.");
                +
000773 e1a0     +LDI R26 , LOW ( 2 * _0x80000 + ( 36 ) )
000774 e0b2     +LDI R27 , HIGH ( 2 * _0x80000 + ( 36 ) )
                 	__POINTW2FN _0x80000,36
000775 d394      	RCALL SUBOPT_0x4F
                 ; 0004 00B4 		FPS_reset();
                 ; 0004 00B5 		return 0;
000776 c229      	RJMP _0x20C0001
                 ; 0004 00B6 	}
                 ; 0004 00B7     delay_ms(1000);
                 _0x80029:
000777 d274      	RCALL SUBOPT_0xB
                 ; 0004 00B8 	lcd_clear();
000778 d395      	RCALL SUBOPT_0x50
                 ; 0004 00B9 
                 ; 0004 00BA 	lcd_putsf("Take of the ");
                 ; 0004 00BB     lcd_gotoxy(0,1);
                 ; 0004 00BC     lcd_putsf("finger.");
000779 d398      	RCALL SUBOPT_0x51
                 ; 0004 00BD     soundOK();
                 ; 0004 00BE 	while (fingerPressed()){if (cancel_PB is pressed) return 2;}
                 _0x8002A:
00077a d265      	RCALL SUBOPT_0x8
00077b f029      	BREQ _0x8002C
00077c 9985      	SBIC 0x10,5
00077d c002      	RJMP _0x8002D
00077e e0e2      	LDI  R30,LOW(2)
00077f c220      	RJMP _0x20C0001
                 _0x8002D:
000780 cff9      	RJMP _0x8002A
                 _0x8002C:
                 ; 0004 00BF 
                 ; 0004 00C0 
                 ; 0004 00C1 	lcd_clear();
000781 d1bd      	RCALL _lcd_clear
                 ; 0004 00C2     bip();
000782 d0c0      	RCALL _bip
                 ; 0004 00C3 	lcd_putsf("Place finger ");
000783 d383      	RCALL SUBOPT_0x4E
                 ; 0004 00C4     lcd_gotoxy(0,1);
                 ; 0004 00C5     lcd_putsf("(2/3)");
                +
000784 e3a3     +LDI R26 , LOW ( 2 * _0x80000 + ( 71 ) )
000785 e0b2     +LDI R27 , HIGH ( 2 * _0x80000 + ( 71 ) )
                 	__POINTW2FN _0x80000,71
000786 d23d      	RCALL SUBOPT_0x1
                 ; 0004 00C6     delay_ms(1000);
                 ; 0004 00C7 	while (!fingerPressed()) {if (cancel_PB is pressed) return 2;}
                 _0x8002E:
000787 d258      	RCALL SUBOPT_0x8
000788 f429      	BRNE _0x80030
000789 9985      	SBIC 0x10,5
00078a c002      	RJMP _0x80031
00078b e0e2      	LDI  R30,LOW(2)
00078c c213      	RJMP _0x20C0001
                 _0x80031:
00078d cff9      	RJMP _0x8002E
                 _0x80030:
                 ; 0004 00C8 	delay_ms(1000);
00078e d25d      	RCALL SUBOPT_0xB
                 ; 0004 00C9 
                 ; 0004 00CA 	getCommand(Enroll2, 0);
00078f e2e4      	LDI  R30,LOW(36)
000790 e0f0      	LDI  R31,HIGH(36)
000791 d367      	RCALL SUBOPT_0x49
                 ; 0004 00CB 	if (rxPacket[10] == Nack)
000792 d370      	RCALL SUBOPT_0x4D
000793 f429      	BRNE _0x80032
                 ; 0004 00CC 	{
                 ; 0004 00CD 	    lcd_clear();
000794 d381      	RCALL SUBOPT_0x52
                 ; 0004 00CE 	    lcd_putsf("Failed. Reseting ");
                 ; 0004 00CF         lcd_gotoxy(0,1);
                 ; 0004 00D0         lcd_putsf("FPS.");
                +
000795 e1a9     +LDI R26 , LOW ( 2 * _0x80000 + ( 45 ) )
000796 e0b2     +LDI R27 , HIGH ( 2 * _0x80000 + ( 45 ) )
                 	__POINTW2FN _0x80000,45
000797 d372      	RCALL SUBOPT_0x4F
                 ; 0004 00D1 		FPS_reset();
                 ; 0004 00D2 		return 0;
000798 c207      	RJMP _0x20C0001
                 ; 0004 00D3 	}
                 ; 0004 00D4     delay_ms(1000);
                 _0x80032:
000799 d252      	RCALL SUBOPT_0xB
                 ; 0004 00D5 	lcd_clear();
00079a d373      	RCALL SUBOPT_0x50
                 ; 0004 00D6 	lcd_putsf("Take of the ");
                 ; 0004 00D7     lcd_gotoxy(0,1);
                 ; 0004 00D8     lcd_putsf("finger.");
00079b d376      	RCALL SUBOPT_0x51
                 ; 0004 00D9     soundOK();
                 ; 0004 00DA 	while (fingerPressed()){if (cancel_PB is pressed) return 2;}
                 _0x80033:
00079c d243      	RCALL SUBOPT_0x8
00079d f029      	BREQ _0x80035
00079e 9985      	SBIC 0x10,5
00079f c002      	RJMP _0x80036
0007a0 e0e2      	LDI  R30,LOW(2)
0007a1 c1fe      	RJMP _0x20C0001
                 _0x80036:
0007a2 cff9      	RJMP _0x80033
                 _0x80035:
                 ; 0004 00DB 
                 ; 0004 00DC 	lcd_clear();
0007a3 d19b      	RCALL _lcd_clear
                 ; 0004 00DD     bip();
0007a4 d09e      	RCALL _bip
                 ; 0004 00DE 	lcd_putsf("Place finger ");
0007a5 d361      	RCALL SUBOPT_0x4E
                 ; 0004 00DF     lcd_gotoxy(0,1);
                 ; 0004 00E0     lcd_putsf("(3/3)");
                +
0007a6 e4ab     +LDI R26 , LOW ( 2 * _0x80000 + ( 95 ) )
0007a7 e0b2     +LDI R27 , HIGH ( 2 * _0x80000 + ( 95 ) )
                 	__POINTW2FN _0x80000,95
0007a8 d24b      	RCALL SUBOPT_0xD
                 ; 0004 00E1     delay_ms(2000);
                 ; 0004 00E2 	while (!fingerPressed()) {if (cancel_PB is pressed) return 2;}
                 _0x80037:
0007a9 d236      	RCALL SUBOPT_0x8
0007aa f429      	BRNE _0x80039
0007ab 9985      	SBIC 0x10,5
0007ac c002      	RJMP _0x8003A
0007ad e0e2      	LDI  R30,LOW(2)
0007ae c1f1      	RJMP _0x20C0001
                 _0x8003A:
0007af cff9      	RJMP _0x80037
                 _0x80039:
                 ; 0004 00E3 	delay_ms(1000);
0007b0 d23b      	RCALL SUBOPT_0xB
                 ; 0004 00E4 
                 ; 0004 00E5 	getCommand(Enroll3, 0);
0007b1 e2e5      	LDI  R30,LOW(37)
0007b2 e0f0      	LDI  R31,HIGH(37)
0007b3 d345      	RCALL SUBOPT_0x49
                 ; 0004 00E6 	if (rxPacket[10] == Nack)
0007b4 d34e      	RCALL SUBOPT_0x4D
0007b5 f429      	BRNE _0x8003B
                 ; 0004 00E7 	{
                 ; 0004 00E8 	    lcd_clear();
0007b6 d35f      	RCALL SUBOPT_0x52
                 ; 0004 00E9 	    lcd_putsf("Failed. Reseting ");
                 ; 0004 00EA         lcd_gotoxy(0,1);
                 ; 0004 00EB         lcd_putsf("FPS.");
                +
0007b7 e1a9     +LDI R26 , LOW ( 2 * _0x80000 + ( 45 ) )
0007b8 e0b2     +LDI R27 , HIGH ( 2 * _0x80000 + ( 45 ) )
                 	__POINTW2FN _0x80000,45
0007b9 d350      	RCALL SUBOPT_0x4F
                 ; 0004 00EC 		FPS_reset();
                 ; 0004 00ED 		return 0;
0007ba c1e5      	RJMP _0x20C0001
                 ; 0004 00EE 	}
                 ; 0004 00EF     delay_ms(1000);
                 _0x8003B:
0007bb d230      	RCALL SUBOPT_0xB
                 ; 0004 00F0 	lcd_clear();
0007bc d351      	RCALL SUBOPT_0x50
                 ; 0004 00F1 	lcd_putsf("Take of the ");
                 ; 0004 00F2     lcd_gotoxy(0,1);
                 ; 0004 00F3     lcd_putsf("finger.");
0007bd d354      	RCALL SUBOPT_0x51
                 ; 0004 00F4     soundOK();
                 ; 0004 00F5 	while (fingerPressed()){if (cancel_PB is pressed) return 2;}
                 _0x8003C:
0007be d221      	RCALL SUBOPT_0x8
0007bf f029      	BREQ _0x8003E
0007c0 9985      	SBIC 0x10,5
0007c1 c002      	RJMP _0x8003F
0007c2 e0e2      	LDI  R30,LOW(2)
0007c3 c1dc      	RJMP _0x20C0001
                 _0x8003F:
0007c4 cff9      	RJMP _0x8003C
                 _0x8003E:
                 ; 0004 00F6 	setCmosLED(0);
0007c5 e0a0      	LDI  R26,LOW(0)
0007c6 defd      	RCALL _setCmosLED
                 ; 0004 00F7 	lcd_clear();
0007c7 d177      	RCALL _lcd_clear
                 ; 0004 00F8 	lcd_putsf("Enrollment ");
                +
0007c8 e5a1     +LDI R26 , LOW ( 2 * _0x80000 + ( 101 ) )
0007c9 e0b2     +LDI R27 , HIGH ( 2 * _0x80000 + ( 101 ) )
                 	__POINTW2FN _0x80000,101
0007ca d19a      	RCALL _lcd_putsf
                 ; 0004 00F9     delay_ms(500);
0007cb d28b      	RCALL SUBOPT_0x24
                 ; 0004 00FA 	return 1;
0007cc e0e1      	LDI  R30,LOW(1)
0007cd c1d2      	RJMP _0x20C0001
                 ; 0004 00FB }
                 ;#include <delay.h>
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "projDefines.h"
                 ;#include "projHeaders.h"
                 ;#include <math.h>
                 ;
                 ;unsigned char getProximity()
                 ; 0005 0008 {
                 
                 	.CSEG
                 _getProximity:
                 ; 0005 0009     char i = 0;
                 ; 0005 000A //    IRLED be iON;
                 ; 0005 000B     delay_ms(1);
0007ce 931a      	ST   -Y,R17
                 ;	i -> R17
0007cf e010      	LDI  R17,0
0007d0 e0a1      	LDI  R26,LOW(1)
0007d1 d348      	RCALL SUBOPT_0x53
                 ; 0005 000C     i = IRD;
0007d2 e0e0      	LDI  R30,0
0007d3 9983      	SBIC 0x10,3
0007d4 e0e1      	LDI  R30,1
0007d5 2f1e      	MOV  R17,R30
                 ; 0005 000D //    IRLED be iOFF;
                 ; 0005 000E     return i;
                 _0x20C0009:
0007d6 2fe1      	MOV  R30,R17
                 _0x20C000A:
0007d7 9119      	LD   R17,Y+
0007d8 9508      	RET
                 ; 0005 000F }
                 ;eeprom char resetByWDT;
                 ;void controllerReset(void)
                 ; 0005 0012 {
                 _controllerReset:
                 ; 0005 0013     resetByWDT = 0;
0007d9 e0a0      	LDI  R26,LOW(_resetByWDT)
0007da e0b0      	LDI  R27,HIGH(_resetByWDT)
0007db e0e0      	LDI  R30,LOW(0)
0007dc d60e      	RCALL __EEPROMWRB
                 ; 0005 0014     TIMSK = 0;
0007dd bfe9      	OUT  0x39,R30
                 ; 0005 0015     while(1);
                 _0xA0003:
0007de cfff      	RJMP _0xA0003
                 ; 0005 0016 }
                 ;void lockMotorRoutine(void)
                 ; 0005 0018 {
                 _lockMotorRoutine:
                 ; 0005 0019     fpsCount ++;
0007df e0a2      	LDI  R26,LOW(_fpsCount)
0007e0 e0b0      	LDI  R27,HIGH(_fpsCount)
0007e1 d5f1      	RCALL __EEPROMRDW
0007e2 9631      	ADIW R30,1
0007e3 d5ff      	RCALL __EEPROMWRW
0007e4 9731      	SBIW R30,1
                 ; 0005 001A     if (mV < 4000)
0007e5 d244      	RCALL SUBOPT_0x19
0007e6 3aa0      	CPI  R26,LOW(0xFA0)
0007e7 e0ef      	LDI  R30,HIGH(0xFA0)
0007e8 07be      	CPC  R27,R30
0007e9 f414      	BRGE _0xA0006
                 ; 0005 001B         soundBatteryLow();
0007ea d014      	RCALL _soundBatteryLow
                 ; 0005 001C     else
0007eb c012      	RJMP _0xA0007
                 _0xA0006:
                 ; 0005 001D     {
                 ; 0005 001E         resetByWDT = 1;
0007ec e0a0      	LDI  R26,LOW(_resetByWDT)
0007ed e0b0      	LDI  R27,HIGH(_resetByWDT)
0007ee e0e1      	LDI  R30,LOW(1)
0007ef d5fb      	RCALL __EEPROMWRB
                 ; 0005 001F         TIMSK &= ~0x01;
0007f0 b7e9      	IN   R30,0x39
0007f1 7fee      	ANDI R30,0xFE
0007f2 bfe9      	OUT  0x39,R30
                 ; 0005 0020         OCR2 = 249;
0007f3 efe9      	LDI  R30,LOW(249)
0007f4 bde3      	OUT  0x23,R30
                 ; 0005 0021         lockMotor be ON;
0007f5 9ac7      	SBI  0x18,7
                 ; 0005 0022         delay_ms(1500);
0007f6 edac      	LDI  R26,LOW(1500)
0007f7 e0b5      	LDI  R27,HIGH(1500)
0007f8 d34a      	RCALL _delay_ms
                 ; 0005 0023         lockMotor be OFF;
0007f9 98c7      	CBI  0x18,7
                 ; 0005 0024         TIMSK |= 0x01;
0007fa b7e9      	IN   R30,0x39
0007fb 60e1      	ORI  R30,1
0007fc bfe9      	OUT  0x39,R30
                 ; 0005 0025         #asm("WDR")
0007fd 95a8      	WDR
                 ; 0005 0026     }
                 _0xA0007:
                 ; 0005 0027 }
0007fe 9508      	RET
                 ;void soundBatteryLow(void)
                 ; 0005 0029 {
                 _soundBatteryLow:
                 ; 0005 002A     beepSwipe(900, 300, 200);
0007ff e8e4      	LDI  R30,LOW(900)
000800 e0f3      	LDI  R31,HIGH(900)
000801 d31a      	RCALL SUBOPT_0x54
                 ; 0005 002B     delay_ms(100);
                 ; 0005 002C     beepSwipe(3000, 300, 200);
000802 d321      	RCALL SUBOPT_0x55
000803 d318      	RCALL SUBOPT_0x54
                 ; 0005 002D     delay_ms(100);
                 ; 0005 002E     beepSwipe(3000, 300, 200);
000804 d322      	RCALL SUBOPT_0x56
000805 e2ec      	LDI  R30,LOW(300)
000806 e0f1      	LDI  R31,HIGH(300)
000807 c026      	RJMP _0x20C0007
                 ; 0005 002F }
                 ;void soundPowerFailure(void)
                 ; 0005 0031 {
                 ; 0005 0032     beepSwipe(900, 300, 200);
                 ; 0005 0033     beep(300, 500);
                 ; 0005 0034 }
                 ;
                 ;void soundPowerOverFlow(void)
                 ; 0005 0037 {
                 ; 0005 0038     beepSwipe(400, 800, 500);
                 ; 0005 0039 }
                 ;
                 ;void soundOK(void)
                 ; 0005 003C {
                 _soundOK:
                 ; 0005 003D     beepSwipe(400 , 3000, 200);
000808 d320      	RCALL SUBOPT_0x57
000809 d31a      	RCALL SUBOPT_0x55
00080a c023      	RJMP _0x20C0007
                 ; 0005 003E }
                 ;void soundQuestion(void)
                 ; 0005 0040 {
                 _soundQuestion:
                 ; 0005 0041     beepSwipe(400,400, 500);
00080b d31d      	RCALL SUBOPT_0x57
00080c d31c      	RCALL SUBOPT_0x57
00080d efa4      	LDI  R26,LOW(500)
00080e e0b1      	LDI  R27,HIGH(500)
00080f c022      	RJMP _0x20C0006
                 ; 0005 0042 }
                 ;void soundAlarm(void)
                 ; 0005 0044 {
                 _soundAlarm:
                 ; 0005 0045     buzzer be ON;
000810 9ac1      	SBI  0x18,1
                 ; 0005 0046     delay_ms(500);
000811 d245      	RCALL SUBOPT_0x24
                 ; 0005 0047     buzzer be OFF;
000812 98c1      	CBI  0x18,1
                 ; 0005 0048     delay_ms(300);
000813 e2ac      	LDI  R26,LOW(300)
000814 e0b1      	LDI  R27,HIGH(300)
                 _0x20C0008:
000815 d32d      	RCALL _delay_ms
                 ; 0005 0049 }
000816 9508      	RET
                 ;void soundSuccess(void)
                 ; 0005 004B {
                 _soundSuccess:
                 ; 0005 004C     beep(400,70);
000817 d311      	RCALL SUBOPT_0x57
000818 e4a6      	LDI  R26,LOW(70)
000819 d2c0      	RCALL SUBOPT_0x41
00081a d049      	RCALL _beep
                 ; 0005 004D     delay_ms(100);
00081b d2b8      	RCALL SUBOPT_0x3F
                 ; 0005 004E     beep(400,750);
00081c d30c      	RCALL SUBOPT_0x57
00081d eeae      	LDI  R26,LOW(750)
00081e e0b2      	LDI  R27,HIGH(750)
00081f d044      	RCALL _beep
                 ; 0005 004F     beepSwipe(400, 3000, 250);
000820 d308      	RCALL SUBOPT_0x57
000821 d305      	RCALL SUBOPT_0x56
000822 efaa      	LDI  R26,LOW(250)
000823 c00d      	RJMP _0x20C0005
                 ; 0005 0050 }
                 ;void soundError(void)
                 ; 0005 0052 {
                 _soundError:
                 ; 0005 0053     beepSwipe(3000 , 400, 200);
000824 d302      	RCALL SUBOPT_0x56
000825 d303      	RCALL SUBOPT_0x57
000826 eca8      	LDI  R26,LOW(200)
000827 d2b2      	RCALL SUBOPT_0x41
000828 d071      	RCALL _beepSwipe
                 ; 0005 0054     beepSwipe(3000 , 400, 200);
                 ; 0005 0055 }
                 ;void soundCancel(void)
                 ; 0005 0057 {
                 _soundCancel:
                 ; 0005 0058     beepSwipe(3000 , 400, 200);
                 _0x20C0004:
000829 ebe8      	LDI  R30,LOW(3000)
00082a e0fb      	LDI  R31,HIGH(3000)
00082b d2bb      	RCALL SUBOPT_0x45
00082c e9e0      	LDI  R30,LOW(400)
00082d e0f1      	LDI  R31,HIGH(400)
                 _0x20C0007:
00082e 93fa      	ST   -Y,R31
00082f 93ea      	ST   -Y,R30
000830 eca8      	LDI  R26,LOW(200)
                 _0x20C0005:
000831 e0b0      	LDI  R27,0
                 _0x20C0006:
000832 d067      	RCALL _beepSwipe
                 ; 0005 0059 }
000833 9508      	RET
                 ;
                 ;void bips(unsigned char count)
                 ; 0005 005C {
                 _bips:
                 ; 0005 005D     while (count > 0)
000834 93aa      	ST   -Y,R26
                 ;	count -> Y+0
                 _0xA0010:
000835 81a8      	LD   R26,Y
000836 30a1      	CPI  R26,LOW(0x1)
000837 f050      	BRLO _0xA0012
                 ; 0005 005E     {
                 ; 0005 005F         buzzer be ON;
000838 9ac1      	SBI  0x18,1
                 ; 0005 0060         delay_ms(75);
000839 e4ab      	LDI  R26,LOW(75)
00083a d2df      	RCALL SUBOPT_0x53
                 ; 0005 0061         buzzer be OFF;
00083b 98c1      	CBI  0x18,1
                 ; 0005 0062         delay_ms(75);
00083c e4ab      	LDI  R26,LOW(75)
00083d d2dc      	RCALL SUBOPT_0x53
                 ; 0005 0063         count --;
00083e 81e8      	LD   R30,Y
00083f 50e1      	SUBI R30,LOW(1)
000840 83e8      	ST   Y,R30
                 ; 0005 0064     }
000841 cff3      	RJMP _0xA0010
                 _0xA0012:
                 ; 0005 0065 }
000842 c15d      	RJMP _0x20C0001
                 ;void bip(void)
                 ; 0005 0067 {
                 _bip:
                 ; 0005 0068     buzzer be ON;
000843 9ac1      	SBI  0x18,1
                 ; 0005 0069     delay_ms(100);
000844 d28f      	RCALL SUBOPT_0x3F
                 ; 0005 006A     buzzer be OFF;
000845 98c1      	CBI  0x18,1
                 ; 0005 006B }
000846 9508      	RET
                 ;void soundTick(void)
                 ; 0005 006D {
                 _soundTick:
                 ; 0005 006E     beep(300, 50);
000847 e2ec      	LDI  R30,LOW(300)
000848 e0f1      	LDI  R31,HIGH(300)
000849 d29d      	RCALL SUBOPT_0x45
00084a e3a2      	LDI  R26,LOW(50)
00084b d28e      	RCALL SUBOPT_0x41
00084c d017      	RCALL _beep
                 ; 0005 006F     delay_ms(20);
00084d e1a4      	LDI  R26,LOW(20)
00084e d2cb      	RCALL SUBOPT_0x53
                 ; 0005 0070     beep(3000,50);
00084f d2d7      	RCALL SUBOPT_0x56
000850 e3a2      	LDI  R26,LOW(50)
000851 d288      	RCALL SUBOPT_0x41
000852 d011      	RCALL _beep
                 ; 0005 0071 }
000853 9508      	RET
                 ;void delay_ms_v(int ms)
                 ; 0005 0073 {
                 _delay_ms_v:
                 ; 0005 0074     while(ms > 0)
000854 d2d7      	RCALL SUBOPT_0x58
                 ;	ms -> Y+0
                 _0xA001B:
000855 81a8      	LD   R26,Y
000856 81b9      	LDD  R27,Y+1
000857 d5a4      	RCALL __CPW02
000858 f454      	BRGE _0xA001D
                 ; 0005 0075     {
                 ; 0005 0076         delay_us(998);
                +
000859 ec8c     +LDI R24 , LOW ( 1996 )
00085a e097     +LDI R25 , HIGH ( 1996 )
                +__DELAY_USW_LOOP :
00085b 9701     +SBIW R24 , 1
00085c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1996
                 ; 0005 0077         ms--;
00085d 81e8      	LD   R30,Y
00085e 81f9      	LDD  R31,Y+1
00085f 9731      	SBIW R30,1
000860 83e8      	ST   Y,R30
000861 83f9      	STD  Y+1,R31
                 ; 0005 0078     }
000862 cff2      	RJMP _0xA001B
                 _0xA001D:
                 ; 0005 0079 
                 ; 0005 007A }
000863 c0d9      	RJMP _0x20C0002
                 ;void beep(unsigned int f_khz, unsigned int period_ms)
                 ; 0005 007C {
                 _beep:
                 ; 0005 007D     float tp = 0;
                 ; 0005 007E     f_khz = min(f_khz, 12600);
000864 d2c7      	RCALL SUBOPT_0x58
000865 d1fc      	RCALL SUBOPT_0x27
000866 d1ff      	RCALL SUBOPT_0x28
                 ;	f_khz -> Y+6
                 ;	period_ms -> Y+4
                 ;	tp -> Y+0
000867 81ee      	LDD  R30,Y+6
000868 81ff      	LDD  R31,Y+6+1
000869 d27d      	RCALL SUBOPT_0x45
00086a e3a8      	LDI  R26,LOW(12600)
00086b e3b1      	LDI  R27,HIGH(12600)
00086c d148      	RCALL _min
00086d d2c1      	RCALL SUBOPT_0x59
                 ; 0005 007F     f_khz = max(f_khz, 260);
00086e d278      	RCALL SUBOPT_0x45
00086f e0a4      	LDI  R26,LOW(260)
000870 e0b1      	LDI  R27,HIGH(260)
000871 d139      	RCALL _max
000872 d2bc      	RCALL SUBOPT_0x59
                 ; 0005 0080     tp = (float)1000000 / (float)f_khz; // tp in us
000873 2766      	CLR  R22
000874 2777      	CLR  R23
000875 d33d      	RCALL __CDF1
                +
000876 e0a0     +LDI R26 , LOW ( 0x49742400 )
000877 e2b4     +LDI R27 , HIGH ( 0x49742400 )
000878 e784     +LDI R24 , BYTE3 ( 0x49742400 )
000879 e499     +LDI R25 , BYTE4 ( 0x49742400 )
                 	__GETD2N 0x49742400
00087a d40b      	RCALL __DIVF21
00087b d281      	RCALL SUBOPT_0x4B
                 ; 0005 0081     //now, if ICR = 8, tp = 1us, 16 for 2us
                 ; 0005 0082     TCCR1A=0x82;
00087c e8e2      	LDI  R30,LOW(130)
00087d bdef      	OUT  0x2F,R30
                 ; 0005 0083     TCCR1B=0x19;
00087e e1e9      	LDI  R30,LOW(25)
00087f bdee      	OUT  0x2E,R30
                 ; 0005 0084     ICR1 = max((int)tp * 8 , 600);
000880 d27a      	RCALL SUBOPT_0x4A
000881 d2fa      	RCALL __CFD1
000882 d46a      	RCALL __LSLW3
000883 d263      	RCALL SUBOPT_0x45
000884 e5a8      	LDI  R26,LOW(600)
000885 e0b2      	LDI  R27,HIGH(600)
000886 d124      	RCALL _max
000887 bdf7      	OUT  0x26+1,R31
000888 bde6      	OUT  0x26,R30
                 ; 0005 0085     OCR1A = 400;
000889 e9e0      	LDI  R30,LOW(400)
00088a e0f1      	LDI  R31,HIGH(400)
00088b bdfb      	OUT  0x2A+1,R31
00088c bdea      	OUT  0x2A,R30
                 ; 0005 0086     delay_ms_v(period_ms);
00088d 81ac      	LDD  R26,Y+4
00088e 81bd      	LDD  R27,Y+4+1
00088f dfc4      	RCALL _delay_ms_v
                 ; 0005 0087     TCCR1A=0;
000890 e0e0      	LDI  R30,LOW(0)
000891 bdef      	OUT  0x2F,R30
                 ; 0005 0088     TCCR1B=0;
000892 bdee      	OUT  0x2E,R30
                 ; 0005 0089     ICR1 = 0;
000893 e0e0      	LDI  R30,LOW(0)
000894 e0f0      	LDI  R31,HIGH(0)
000895 bdf7      	OUT  0x26+1,R31
000896 bde6      	OUT  0x26,R30
                 ; 0005 008A     buzzer be OFF;
000897 98c1      	CBI  0x18,1
                 ; 0005 008B }
000898 9628      	ADIW R28,8
000899 9508      	RET
                 ;void beepSwipe(unsigned int f_khz1, unsigned int f_khz2, unsigned int period_ms)
                 ; 0005 008D {
                 _beepSwipe:
                 ; 0005 008E     signed char i = 0, steps = 50;
                 ; 0005 008F     signed int inc = ((signed int)f_khz2 - (signed int)f_khz1) / steps;
                 ; 0005 0090     for (i = 0; i < steps; i++)
00089a d291      	RCALL SUBOPT_0x58
00089b d570      	RCALL __SAVELOCR4
                 ;	f_khz1 -> Y+8
                 ;	f_khz2 -> Y+6
                 ;	period_ms -> Y+4
                 ;	i -> R17
                 ;	steps -> R16
                 ;	inc -> R18,R19
00089c e010      	LDI  R17,0
00089d e302      	LDI  R16,50
00089e 85a8      	LDD  R26,Y+8
00089f 85b9      	LDD  R27,Y+8+1
0008a0 81ee      	LDD  R30,Y+6
0008a1 81ff      	LDD  R31,Y+6+1
0008a2 1bea      	SUB  R30,R26
0008a3 0bfb      	SBC  R31,R27
0008a4 01df      	MOVW R26,R30
0008a5 d28c      	RCALL SUBOPT_0x5A
0008a6 d4a1      	RCALL __DIVW21
0008a7 019f      	MOVW R18,R30
0008a8 e010      	LDI  R17,LOW(0)
                 _0xA0021:
0008a9 1710      	CP   R17,R16
0008aa f49c      	BRGE _0xA0022
                 ; 0005 0091         beep(f_khz1 +  (signed int)(i * inc), period_ms / steps);
0008ab 2fa1      	MOV  R26,R17
0008ac e0b0      	LDI  R27,0
0008ad fda7      	SBRC R26,7
0008ae efbf      	SER  R27
0008af 01f9      	MOVW R30,R18
0008b0 d47a      	RCALL __MULW12
0008b1 85a8      	LDD  R26,Y+8
0008b2 85b9      	LDD  R27,Y+8+1
0008b3 0fea      	ADD  R30,R26
0008b4 1ffb      	ADC  R31,R27
0008b5 d231      	RCALL SUBOPT_0x45
0008b6 d27b      	RCALL SUBOPT_0x5A
0008b7 81ae      	LDD  R26,Y+6
0008b8 81bf      	LDD  R27,Y+6+1
0008b9 d47b      	RCALL __DIVW21U
0008ba 01df      	MOVW R26,R30
0008bb dfa8      	RCALL _beep
0008bc 5f1f      	SUBI R17,-1
0008bd cfeb      	RJMP _0xA0021
                 _0xA0022:
                 ; 0005 0092 }
0008be d554      	RCALL __LOADLOCR4
0008bf 962a      	ADIW R28,10
0008c0 9508      	RET
                 ;#include <alcd.h>
                 ;void define_char(unsigned char flash *pc,unsigned char char_code)
                 ; 0006 0003 {
                 
                 	.CSEG
                 _define_char:
                 ; 0006 0004     unsigned char i,address;
                 ; 0006 0005     address=(char_code<<3)|0x40;
0008c1 93aa      	ST   -Y,R26
0008c2 d54b      	RCALL __SAVELOCR2
                 ;	*pc -> Y+3
                 ;	char_code -> Y+2
                 ;	i -> R17
                 ;	address -> R16
0008c3 81ea      	LDD  R30,Y+2
0008c4 0fee      	LSL  R30
0008c5 0fee      	LSL  R30
0008c6 0fee      	LSL  R30
0008c7 64e0      	ORI  R30,0x40
0008c8 2f0e      	MOV  R16,R30
                 ; 0006 0006     for (i=0; i<8; i++) lcd_write_byte(address++,*pc++);
0008c9 e010      	LDI  R17,LOW(0)
                 _0xC0004:
0008ca 3018      	CPI  R17,8
0008cb f460      	BRSH _0xC0005
0008cc 930a      	ST   -Y,R16
0008cd 9503      	INC  R16
0008ce 81ec      	LDD  R30,Y+4
0008cf 81fd      	LDD  R31,Y+4+1
0008d0 9631      	ADIW R30,1
0008d1 83ec      	STD  Y+4,R30
0008d2 83fd      	STD  Y+4+1,R31
0008d3 9731      	SBIW R30,1
0008d4 91a4      	LPM  R26,Z
0008d5 d055      	RCALL _lcd_write_byte
0008d6 5f1f      	SUBI R17,-1
0008d7 cff2      	RJMP _0xC0004
                 _0xC0005:
                 ; 0006 0007 }
0008d8 d53c      	RCALL __LOADLOCR2
0008d9 9625      	ADIW R28,5
0008da 9508      	RET
                 ;flash unsigned char fingerPrint_charTable[8]=
                 ;{
                 ;	0b1001110,
                 ;	0b1010001,
                 ;	0b1010101,
                 ;	0b1010100,
                 ;	0b1010111,
                 ;	0b1010000,
                 ;	0b1001111,
                 ;	0b11000000};
                 ;
                 ;void init_fingerPrint_char(void)
                 ; 0006 0014 {
                 _init_fingerPrint_char:
                 ; 0006 0015 	define_char(fingerPrint_charTable, 0);
0008db e2e6      	LDI  R30,LOW(_fingerPrint_charTable*2)
0008dc e0f0      	LDI  R31,HIGH(_fingerPrint_charTable*2)
0008dd d209      	RCALL SUBOPT_0x45
0008de e0a0      	LDI  R26,LOW(0)
0008df c018      	RJMP _0x20C0003
                 ; 0006 0016 }
                 ;
                 ;flash unsigned char power_charTable[8]=
                 ;{
                 ;    0b1000010,
                 ;    0b1000100,
                 ;    0b1001000,
                 ;    0b1001110,
                 ;    0b1000010,
                 ;    0b1000100,
                 ;    0b1001000,
                 ;    0b11000000};
                 ;
                 ;void init_power_char(void)
                 ; 0006 0024 {
                 ; 0006 0025     define_char(power_charTable, 1);
                 ; 0006 0026 }
                 ;
                 ;flash unsigned char battery_charTable[8]=
                 ;{
                 ;    0b1001110,
                 ;    0b1010001,
                 ;    0b1010001,
                 ;    0b1011111,
                 ;    0b1011111,
                 ;    0b1011111,
                 ;    0b1011111,
                 ;    0b11000000};
                 ;
                 ;void init_battery_char(void)
                 ; 0006 0034 {
                 _init_battery_char:
                 ; 0006 0035     define_char(battery_charTable, 2);
0008e0 e3e6      	LDI  R30,LOW(_battery_charTable*2)
0008e1 e0f0      	LDI  R31,HIGH(_battery_charTable*2)
0008e2 d204      	RCALL SUBOPT_0x45
0008e3 e0a2      	LDI  R26,LOW(2)
0008e4 c013      	RJMP _0x20C0003
                 ; 0006 0036 }
                 ;
                 ;flash unsigned char switch_charTable[8]=
                 ;{
                 ;    0b1000010,
                 ;    0b1001001,
                 ;    0b1000110,
                 ;    0b1000001,
                 ;    0b1000110,
                 ;    0b1001000,
                 ;    0b1000100,
                 ;    0b11000000};
                 ;
                 ;void init_switch_char(void)
                 ; 0006 0044 {
                 _init_switch_char:
                 ; 0006 0045     define_char(switch_charTable, 3);
0008e5 e3ee      	LDI  R30,LOW(_switch_charTable*2)
0008e6 e0f0      	LDI  R31,HIGH(_switch_charTable*2)
0008e7 d1ff      	RCALL SUBOPT_0x45
0008e8 e0a3      	LDI  R26,LOW(3)
0008e9 c00e      	RJMP _0x20C0003
                 ; 0006 0046 }
                 ;
                 ;flash unsigned char locked_charTable[8]=
                 ;{
                 ;    0b1001110,
                 ;    0b1010001,
                 ;    0b1010001,
                 ;    0b1011111,
                 ;    0b1011011,
                 ;    0b1011011,
                 ;    0b1011111,
                 ;    0b11000000};
                 ;
                 ;void init_locked_char(void)
                 ; 0006 0054 {
                 _init_locked_char:
                 ; 0006 0055     define_char(locked_charTable, 4);
0008ea e4e6      	LDI  R30,LOW(_locked_charTable*2)
0008eb e0f0      	LDI  R31,HIGH(_locked_charTable*2)
0008ec d1fa      	RCALL SUBOPT_0x45
0008ed e0a4      	LDI  R26,LOW(4)
0008ee c009      	RJMP _0x20C0003
                 ; 0006 0056 }
                 ;
                 ;flash unsigned char unlocked_charTable[8]=
                 ;{
                 ;    0b1001110,
                 ;    0b1010000,
                 ;    0b1010000,
                 ;    0b1011110,
                 ;    0b1011011,
                 ;    0b1011011,
                 ;    0b1011111,
                 ;    0b11000000};
                 ;
                 ;void init_unlocked_char(void)
                 ; 0006 0064 {
                 _init_unlocked_char:
                 ; 0006 0065     define_char(unlocked_charTable, 5);
0008ef e4ee      	LDI  R30,LOW(_unlocked_charTable*2)
0008f0 e0f0      	LDI  R31,HIGH(_unlocked_charTable*2)
0008f1 d1f5      	RCALL SUBOPT_0x45
0008f2 e0a5      	LDI  R26,LOW(5)
0008f3 c004      	RJMP _0x20C0003
                 ; 0006 0066 }
                 ;
                 ;flash unsigned char smilie_charTable[8]=
                 ;{
                 ;    0b1000000,
                 ;    0b1001010,
                 ;    0b1000000,
                 ;    0b1000000,
                 ;    0b1010001,
                 ;    0b1001110,
                 ;    0b1000000,
                 ;    0b11000000};
                 ;
                 ;void init_smilie_char(void)
                 ; 0006 0074 {
                 _init_smilie_char:
                 ; 0006 0075     define_char(smilie_charTable, 6);
0008f4 e5e6      	LDI  R30,LOW(_smilie_charTable*2)
0008f5 e0f0      	LDI  R31,HIGH(_smilie_charTable*2)
0008f6 d1f0      	RCALL SUBOPT_0x45
0008f7 e0a6      	LDI  R26,LOW(6)
                 _0x20C0003:
0008f8 dfc8      	RCALL _define_char
                 ; 0006 0076 }
0008f9 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
0008fa 93aa      	ST   -Y,R26
0008fb 81e8      	LD   R30,Y
0008fc 71e0      	ANDI R30,LOW(0x10)
0008fd f011      	BREQ _0x2020004
0008fe 9aaa      	SBI  0x15,2
0008ff c001      	RJMP _0x2020005
                 _0x2020004:
000900 98aa      	CBI  0x15,2
                 _0x2020005:
000901 81e8      	LD   R30,Y
000902 72e0      	ANDI R30,LOW(0x20)
000903 f011      	BREQ _0x2020006
000904 9aab      	SBI  0x15,3
000905 c001      	RJMP _0x2020007
                 _0x2020006:
000906 98ab      	CBI  0x15,3
                 _0x2020007:
000907 81e8      	LD   R30,Y
000908 74e0      	ANDI R30,LOW(0x40)
000909 f011      	BREQ _0x2020008
00090a 9aac      	SBI  0x15,4
00090b c001      	RJMP _0x2020009
                 _0x2020008:
00090c 98ac      	CBI  0x15,4
                 _0x2020009:
00090d 81e8      	LD   R30,Y
00090e 78e0      	ANDI R30,LOW(0x80)
00090f f011      	BREQ _0x202000A
000910 9aad      	SBI  0x15,5
000911 c001      	RJMP _0x202000B
                 _0x202000A:
000912 98ad      	CBI  0x15,5
                 _0x202000B:
                +
000913 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000914 958a     +DEC R24
000915 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000916 9aa9      	SBI  0x15,1
                +
000917 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000918 958a     +DEC R24
000919 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00091a 98a9      	CBI  0x15,1
                +
00091b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00091c 958a     +DEC R24
00091d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00091e c081      	RJMP _0x20C0001
                 __lcd_write_data:
00091f 93aa      	ST   -Y,R26
000920 81a8      	LD   R26,Y
000921 dfd8      	RCALL __lcd_write_nibble_G101
000922 81e8          ld    r30,y
000923 95e2          swap  r30
000924 83e8          st    y,r30
000925 81a8      	LD   R26,Y
000926 dfd3      	RCALL __lcd_write_nibble_G101
                +
000927 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000928 958a     +DEC R24
000929 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00092a c075      	RJMP _0x20C0001
                 _lcd_write_byte:
00092b 93aa      	ST   -Y,R26
00092c 81a9      	LDD  R26,Y+1
00092d dff1      	RCALL __lcd_write_data
00092e d208      	RCALL SUBOPT_0x5B
00092f c00d      	RJMP _0x20C0002
                 _lcd_gotoxy:
000930 93aa      	ST   -Y,R26
000931 81e8      	LD   R30,Y
000932 d0db      	RCALL SUBOPT_0x11
000933 55ea      	SUBI R30,LOW(-__base_y_G101)
000934 4ffe      	SBCI R31,HIGH(-__base_y_G101)
000935 81e0      	LD   R30,Z
000936 81a9      	LDD  R26,Y+1
000937 0fae      	ADD  R26,R30
000938 dfe6      	RCALL __lcd_write_data
000939 80c9      	LDD  R12,Y+1
00093a 81e8      	LD   R30,Y
00093b 93e0 01aa 	STS  __lcd_y,R30
                 _0x20C0002:
00093d 9622      	ADIW R28,2
00093e 9508      	RET
                 _lcd_clear:
00093f e0a2      	LDI  R26,LOW(2)
000940 dfde      	RCALL __lcd_write_data
000941 e0a3      	LDI  R26,LOW(3)
000942 d1d7      	RCALL SUBOPT_0x53
000943 e0ac      	LDI  R26,LOW(12)
000944 dfda      	RCALL __lcd_write_data
000945 e0a1      	LDI  R26,LOW(1)
000946 dfd8      	RCALL __lcd_write_data
000947 e0a3      	LDI  R26,LOW(3)
000948 d1d1      	RCALL SUBOPT_0x53
000949 e0e0      	LDI  R30,LOW(0)
00094a 93e0 01aa 	STS  __lcd_y,R30
00094c 2ece      	MOV  R12,R30
00094d 9508      	RET
                 _lcd_putchar:
00094e 93aa      	ST   -Y,R26
00094f 81a8      	LD   R26,Y
000950 30aa      	CPI  R26,LOW(0xA)
000951 f021      	BREQ _0x2020011
000952 91e0 01ab 	LDS  R30,__lcd_maxx
000954 16ce      	CP   R12,R30
000955 f060      	BRLO _0x2020010
                 _0x2020011:
000956 e0e0      	LDI  R30,LOW(0)
000957 93ea      	ST   -Y,R30
000958 91a0 01aa 	LDS  R26,__lcd_y
00095a 5faf      	SUBI R26,-LOW(1)
00095b 93a0 01aa 	STS  __lcd_y,R26
00095d dfd2      	RCALL _lcd_gotoxy
00095e 81a8      	LD   R26,Y
00095f 30aa      	CPI  R26,LOW(0xA)
000960 f409      	BRNE _0x2020013
000961 c03e      	RJMP _0x20C0001
                 _0x2020013:
                 _0x2020010:
000962 94c3      	INC  R12
000963 d1d3      	RCALL SUBOPT_0x5B
000964 c03b      	RJMP _0x20C0001
                 _lcd_putsf:
000965 d1c6      	RCALL SUBOPT_0x58
000966 931a      	ST   -Y,R17
                 _0x2020017:
000967 81e9      	LDD  R30,Y+1
000968 81fa      	LDD  R31,Y+1+1
000969 9631      	ADIW R30,1
00096a 83e9      	STD  Y+1,R30
00096b 83fa      	STD  Y+1+1,R31
00096c 9731      	SBIW R30,1
00096d 91e4      	LPM  R30,Z
00096e 2f1e      	MOV  R17,R30
00096f 30e0      	CPI  R30,0
000970 f019      	BREQ _0x2020019
000971 2fa1      	MOV  R26,R17
000972 dfdb      	RCALL _lcd_putchar
000973 cff3      	RJMP _0x2020017
                 _0x2020019:
000974 8118      	LDD  R17,Y+0
000975 9623      	ADIW R28,3
000976 9508      	RET
                 _lcd_init:
000977 93aa      	ST   -Y,R26
000978 9aa2      	SBI  0x14,2
000979 9aa3      	SBI  0x14,3
00097a 9aa4      	SBI  0x14,4
00097b 9aa5      	SBI  0x14,5
00097c 9aa1      	SBI  0x14,1
00097d 9abc      	SBI  0x17,4
00097e 9abd      	SBI  0x17,5
00097f 98a9      	CBI  0x15,1
000980 98c4      	CBI  0x18,4
000981 98c5      	CBI  0x18,5
000982 81e8      	LD   R30,Y
000983 93e0 01ab 	STS  __lcd_maxx,R30
000985 58e0      	SUBI R30,-LOW(128)
                +
000986 93e0 01a8+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000988 81e8      	LD   R30,Y
000989 54e0      	SUBI R30,-LOW(192)
                +
00098a 93e0 01a9+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00098c e1a4      	LDI  R26,LOW(20)
00098d d18c      	RCALL SUBOPT_0x53
00098e d1ad      	RCALL SUBOPT_0x5C
00098f d1ac      	RCALL SUBOPT_0x5C
000990 d1ab      	RCALL SUBOPT_0x5C
000991 e2a0      	LDI  R26,LOW(32)
000992 df67      	RCALL __lcd_write_nibble_G101
                +
000993 ec88     +LDI R24 , LOW ( 200 )
000994 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000995 9701     +SBIW R24 , 1
000996 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000997 e2a8      	LDI  R26,LOW(40)
000998 df86      	RCALL __lcd_write_data
000999 e0a4      	LDI  R26,LOW(4)
00099a df84      	RCALL __lcd_write_data
00099b e8a5      	LDI  R26,LOW(133)
00099c df82      	RCALL __lcd_write_data
00099d e0a6      	LDI  R26,LOW(6)
00099e df80      	RCALL __lcd_write_data
00099f df9f      	RCALL _lcd_clear
                 _0x20C0001:
0009a0 9621      	ADIW R28,1
0009a1 9508      	RET
                 
                 	.CSEG
                 _abs:
0009a2 d189      	RCALL SUBOPT_0x58
0009a3 91e9          ld   r30,y+
0009a4 91f9          ld   r31,y+
0009a5 9730          sbiw r30,0
0009a6 f41a          brpl __abs0
0009a7 95e0          com  r30
0009a8 95f0          com  r31
0009a9 9631          adiw r30,1
                 __abs0:
0009aa 9508          ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _max:
0009ab d180      	RCALL SUBOPT_0x58
0009ac 91a9          ld   r26,y+
0009ad 91b9          ld   r27,y+
0009ae 91e9          ld   r30,y+
0009af 91f9          ld   r31,y+
0009b0 17ae          cp   r26,r30
0009b1 07bf          cpc  r27,r31
0009b2 f00c          brlt __max0
0009b3 01fd          movw r30,r26
                 __max0:
0009b4 9508          ret
                 _min:
0009b5 d176      	RCALL SUBOPT_0x58
0009b6 91a9          ld   r26,y+
0009b7 91b9          ld   r27,y+
0009b8 91e9          ld   r30,y+
0009b9 91f9          ld   r31,y+
0009ba 17ea          cp   r30,r26
0009bb 07fb          cpc  r31,r27
0009bc f00c          brlt __min0
0009bd 01fd          movw r30,r26
                 __min0:
0009be 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_counter:
000160           	.BYTE 0x1
                 _mV:
000161           	.BYTE 0x2
                 _cpuHaltAllowed:
000163           	.BYTE 0x1
                 _powerMode:
000164           	.BYTE 0x1
                 
                 	.ESEG
                 _resetByWDT:
000000           	.BYTE 0x1
                 _failedCount:
000001           	.BYTE 0x1
                 
                 	.DSEG
                 _junkFreeTimer:
000165           	.BYTE 0x1
                 _autoSleepTimer:
000166           	.BYTE 0x1
                 _dontWDR:
000167           	.BYTE 0x1
                 
                 	.ESEG
                 _fpsCount:
000002           	.BYTE 0x2
                 
                 	.DSEG
                 _elapsed_sec:
000168           	.BYTE 0x2
                 
                 	.ESEG
                 _securityMethod:
000004           	.BYTE 0x1
                 
                 	.DSEG
                 _rx_buffer:
00016a           	.BYTE 0x10
                 _tx_buffer:
00017a           	.BYTE 0x10
                 _elapsed_us:
00018a           	.BYTE 0x2
                 _elapsed_ms:
00018c           	.BYTE 0x2
                 _txPacket:
00018e           	.BYTE 0xC
                 _rxPacket:
00019a           	.BYTE 0xC
                 __base_y_G101:
0001a6           	.BYTE 0x4
                 __lcd_y:
0001aa           	.BYTE 0x1
                 __lcd_maxx:
0001ab           	.BYTE 0x1
                 __seed_G102:
0001ac           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:54 WORDS
                 SUBOPT_0x0:
0009bf dfa5      	RCALL _lcd_putsf
0009c0 e0e0      	LDI  R30,LOW(0)
0009c1 93ea      	ST   -Y,R30
0009c2 e0a1      	LDI  R26,LOW(1)
0009c3 cf6c      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
0009c4 dfa0      	RCALL _lcd_putsf
0009c5 eea8      	LDI  R26,LOW(1000)
0009c6 e0b3      	LDI  R27,HIGH(1000)
0009c7 c17b      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0009c8 e0e3      	LDI  R30,LOW(3)
0009c9 93ea      	ST   -Y,R30
0009ca e0a0      	LDI  R26,LOW(0)
0009cb d7ba      	RCALL _getIdFinally
0009cc 2f1e      	MOV  R17,R30
0009cd 3018      	CPI  R17,8
0009ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0009cf 81ec      	LDD  R30,Y+4
0009d0 30e0      	CPI  R30,0
0009d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0009d2 9a92      	SBI  0x12,2
0009d3 ccf7      	RJMP _FPS_open
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0009d4 e0a1      	LDI  R26,LOW(_failedCount)
0009d5 e0b0      	LDI  R27,HIGH(_failedCount)
0009d6 d400      	RCALL __EEPROMRDB
0009d7 30e5      	CPI  R30,LOW(0x5)
0009d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0009d9 e0a1      	LDI  R26,LOW(_failedCount)
0009da e0b0      	LDI  R27,HIGH(_failedCount)
0009db e0e0      	LDI  R30,LOW(0)
0009dc d40e      	RCALL __EEPROMWRB
0009dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0009de e0a1      	LDI  R26,LOW(1)
0009df cce4      	RJMP _setCmosLED
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
0009e0 dd2a      	RCALL _fingerPressed
0009e1 30e0      	CPI  R30,0
0009e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
0009e3 e0a0      	LDI  R26,0
0009e4 9985      	SBIC 0x10,5
0009e5 e0a1      	LDI  R26,1
0009e6 30a0      	CPI  R26,LOW(0x0)
0009e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0009e8 df7c      	RCALL _lcd_putsf
0009e9 2fa0      	MOV  R26,R16
0009ea 5da0      	SUBI R26,-LOW(48)
0009eb cf62      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0xB:
0009ec eea8      	LDI  R26,LOW(1000)
0009ed e0b3      	LDI  R27,HIGH(1000)
0009ee c154      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
0009ef d3e7      	RCALL __EEPROMRDB
0009f0 5fef      	SUBI R30,-LOW(1)
0009f1 d3f9      	RCALL __EEPROMWRB
0009f2 50e1      	SUBI R30,LOW(1)
0009f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
0009f4 df70      	RCALL _lcd_putsf
0009f5 eda0      	LDI  R26,LOW(2000)
0009f6 e0b7      	LDI  R27,HIGH(2000)
0009f7 c14b      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
0009f8 e0ea      	LDI  R30,LOW(10)
0009f9 e0f0      	LDI  R31,HIGH(10)
0009fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
0009fb df69      	RCALL _lcd_putsf
0009fc 2fa1      	MOV  R26,R17
0009fd 5da0      	SUBI R26,-LOW(48)
0009fe df4f      	RCALL _lcd_putchar
0009ff e0e0      	LDI  R30,LOW(0)
000a00 93ea      	ST   -Y,R30
000a01 e0a1      	LDI  R26,LOW(1)
000a02 df2d      	RCALL _lcd_gotoxy
                +
000a03 eeaa     +LDI R26 , LOW ( 2 * _0x0 + ( 118 ) )
000a04 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 118 ) )
                 	__POINTW2FN _0x0,118
000a05 df5f      	RCALL _lcd_putsf
000a06 e0e8      	LDI  R30,LOW(8)
000a07 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
000a08 5de0      	SUBI R30,-LOW(48)
000a09 2fae      	MOV  R26,R30
000a0a df43      	RCALL _lcd_putchar
000a0b eda0      	LDI  R26,LOW(2000)
000a0c e0b7      	LDI  R27,HIGH(2000)
000a0d c135      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:36 WORDS
                 SUBOPT_0x11:
000a0e e0f0      	LDI  R31,0
000a0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000a10 e0a0      	LDI  R26,0
000a11 9987      	SBIC 0x10,7
000a12 e0a1      	LDI  R26,1
000a13 30a0      	CPI  R26,LOW(0x0)
000a14 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000a15 e0e0      	LDI  R30,LOW(0)
000a16 83e9      	STD  Y+1,R30
000a17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
000a18 91a0 0168 	LDS  R26,_elapsed_sec
000a1a 91b0 0169 	LDS  R27,_elapsed_sec+1
000a1c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x15:
000a1d dfda      	RCALL SUBOPT_0xE
000a1e d358      	RCALL __MODW21U
000a1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
000a20 e0e1      	LDI  R30,LOW(1)
000a21 2e4e      	MOV  R4,R30
000a22 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000a23 2de5      	MOV  R30,R5
000a24 e0f0      	LDI  R31,0
000a25 fde7      	SBRC R30,7
000a26 efff      	SER  R31
000a27 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
000a28 e0a0      	LDI  R26,LOW(0)
000a29 cf06      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:40 WORDS
                 SUBOPT_0x19:
000a2a 91a0 0161 	LDS  R26,_mV
000a2c 91b0 0162 	LDS  R27,_mV+1
000a2e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000a2f 930a      	ST   -Y,R16
000a30 cff7      	RJMP SUBOPT_0x18
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
000a31 dff8      	RCALL SUBOPT_0x19
000a32 3cad      	CPI  R26,LOW(0x10CD)
000a33 e1e0      	LDI  R30,HIGH(0x10CD)
000a34 07be      	CPC  R27,R30
000a35 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1C:
000a36 e0a4      	LDI  R26,LOW(_securityMethod)
000a37 e0b0      	LDI  R27,HIGH(_securityMethod)
000a38 d39e      	RCALL __EEPROMRDB
000a39 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
000a3a 30e1      	CPI  R30,LOW(0x1)
000a3b e0a0      	LDI  R26,HIGH(0x1)
000a3c 07fa      	CPC  R31,R26
000a3d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1E:
000a3e 30e2      	CPI  R30,LOW(0x2)
000a3f e0a0      	LDI  R26,HIGH(0x2)
000a40 07fa      	CPC  R31,R26
000a41 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1F:
000a42 30e3      	CPI  R30,LOW(0x3)
000a43 e0a0      	LDI  R26,HIGH(0x3)
000a44 07fa      	CPC  R31,R26
000a45 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x20:
000a46 2fa1      	MOV  R26,R17
000a47 27bb      	CLR  R27
000a48 e0e4      	LDI  R30,LOW(4)
000a49 e0f0      	LDI  R31,HIGH(4)
000a4a d32f      	RCALL __MODW21
000a4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x21:
000a4c 5de0      	SUBI R30,-LOW(48)
000a4d 2fae      	MOV  R26,R30
000a4e ceff      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
000a4f eee8      	LDI  R30,LOW(1000)
000a50 e0f3      	LDI  R31,HIGH(1000)
000a51 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x23:
000a52 d2f5      	RCALL __DIVW21
000a53 01df      	MOVW R26,R30
000a54 dfa3      	RCALL SUBOPT_0xE
000a55 d324      	RCALL __MODW21
000a56 cff5      	RJMP SUBOPT_0x21
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x24:
000a57 efa4      	LDI  R26,LOW(500)
000a58 e0b1      	LDI  R27,HIGH(500)
000a59 c0e9      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x25:
000a5a e0a2      	LDI  R26,LOW(_fpsCount)
000a5b e0b0      	LDI  R27,HIGH(_fpsCount)
000a5c d376      	RCALL __EEPROMRDW
000a5d 01df      	MOVW R26,R30
000a5e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x26:
000a5f d2d5      	RCALL __DIVW21U
000a60 01df      	MOVW R26,R30
000a61 cfbb      	RJMP SUBOPT_0x15
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x27:
000a62 9724      	SBIW R28,4
000a63 e0e0      	LDI  R30,LOW(0)
000a64 83e8      	ST   Y,R30
000a65 cfaf      	RJMP SUBOPT_0x13
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x28:
000a66 e0e0      	LDI  R30,LOW(0)
000a67 83ea      	STD  Y+2,R30
000a68 83eb      	STD  Y+3,R30
000a69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x29:
                +
000a6a 81ac     +LDD R26 , Y + 4
000a6b 81bd     +LDD R27 , Y + 4 + 1
000a6c 818e     +LDD R24 , Y + 4 + 2
000a6d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000a6e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2A:
000a6f d25b      	RCALL __ADDD12
                +
000a70 83ec     +STD Y + 4 , R30
000a71 83fd     +STD Y + 4 + 1 , R31
000a72 836e     +STD Y + 4 + 2 , R22
000a73 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000a74 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x2B:
                +
000a75 e0ea     +LDI R30 , LOW ( 0xA )
000a76 e0f0     +LDI R31 , HIGH ( 0xA )
000a77 e060     +LDI R22 , BYTE3 ( 0xA )
000a78 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000a79 d2f8      	RCALL __DIVD21
                +
000a7a 83ec     +STD Y + 4 , R30
000a7b 83fd     +STD Y + 4 + 1 , R31
000a7c 836e     +STD Y + 4 + 2 , R22
000a7d 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000a7e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2C:
                +
000a7f 81ec     +LDD R30 , Y + 4
000a80 81fd     +LDD R31 , Y + 4 + 1
000a81 816e     +LDD R22 , Y + 4 + 2
000a82 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000a83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
000a84 d26f      	RCALL __CWD1
000a85 d24a      	RCALL __ADDD21
000a86 cfee      	RJMP SUBOPT_0x2B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
000a87 01df      	MOVW R26,R30
000a88 01cb      	MOVW R24,R22
000a89 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2F:
000a8a d37f      	RCALL __SAVELOCR6
                +
000a8b e000     +LDI R16 , LOW ( 0 )
000a8c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000a8d e020     +LDI R18 , LOW ( 0 )
000a8e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000a8f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x30:
000a90 e0e0      	LDI  R30,LOW(0)
000a91 83ef      	STD  Y+7,R30
000a92 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
000a93 81af      	LDD  R26,Y+7
000a94 30a5      	CPI  R26,LOW(0x5)
000a95 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x32:
000a96 81ef      	LDD  R30,Y+7
000a97 df76      	RCALL SUBOPT_0x11
000a98 01de      	MOVW R26,R28
000a99 961a      	ADIW R26,10
000a9a 0fee      	LSL  R30
000a9b 1fff      	ROL  R31
000a9c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x33:
000a9d 81ef      	LDD  R30,Y+7
000a9e 5fef      	SUBI R30,-LOW(1)
000a9f 83ef      	STD  Y+7,R30
000aa0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x34:
000aa1 0fae      	ADD  R26,R30
000aa2 1fbf      	ADC  R27,R31
000aa3 d305      	RCALL __GETW1P
000aa4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x35:
000aa5 1be0      	SUB  R30,R16
000aa6 0bf1      	SBC  R31,R17
000aa7 01df      	MOVW R26,R30
000aa8 cef9      	RJMP _abs
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
000aa9 df80      	RCALL SUBOPT_0x19
000aaa 3ca1      	CPI  R26,LOW(0x12C1)
000aab e1e2      	LDI  R30,HIGH(0x12C1)
000aac 07be      	CPC  R27,R30
000aad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
000aae df7b      	RCALL SUBOPT_0x19
000aaf 30a5      	CPI  R26,LOW(0x1005)
000ab0 e1e0      	LDI  R30,HIGH(0x1005)
000ab1 07be      	CPC  R27,R30
000ab2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
000ab3 93e0 018a 	STS  _elapsed_us,R30
000ab5 93f0 018b 	STS  _elapsed_us+1,R31
000ab7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
000ab8 93e0 018c 	STS  _elapsed_ms,R30
000aba 93f0 018d 	STS  _elapsed_ms+1,R31
000abc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
000abd 91a0 018a 	LDS  R26,_elapsed_us
000abf 91b0 018b 	LDS  R27,_elapsed_us+1
000ac1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3B:
000ac2 3ea8      	CPI  R26,LOW(0x3E8)
000ac3 e0e3      	LDI  R30,HIGH(0x3E8)
000ac4 07be      	CPC  R27,R30
000ac5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3C:
000ac6 91ed      	LD   R30,X+
000ac7 91fd      	LD   R31,X+
000ac8 9631      	ADIW R30,1
000ac9 93fe      	ST   -X,R31
000aca 93ee      	ST   -X,R30
000acb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3D:
000acc 91a0 018c 	LDS  R26,_elapsed_ms
000ace 91b0 018d 	LDS  R27,_elapsed_ms+1
000ad0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3E:
000ad1 93e0 0164 	STS  _powerMode,R30
000ad3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x3F:
000ad4 e6a4      	LDI  R26,LOW(100)
000ad5 e0b0      	LDI  R27,0
000ad6 c06c      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x40:
000ad7 93e0 0163 	STS  _cpuHaltAllowed,R30
000ad9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0x41:
000ada e0b0      	LDI  R27,0
000adb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x42:
                +
000adc e040     +LDI R20 , LOW ( 0 )
000add e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000ade 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x43:
                +
000adf 5f4f     +SUBI R20 , LOW ( - 1 )
000ae0 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000ae1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x44:
000ae2 e8ae      	LDI  R26,LOW(_txPacket)
000ae3 e0b1      	LDI  R27,HIGH(_txPacket)
000ae4 0fa4      	ADD  R26,R20
000ae5 1fb5      	ADC  R27,R21
000ae6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 36 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x45:
000ae7 93fa      	ST   -Y,R31
000ae8 93ea      	ST   -Y,R30
000ae9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x46:
000aea 81ea      	LDD  R30,Y+2
000aeb df22      	RCALL SUBOPT_0x11
000aec d207      	RCALL __CWD1
000aed df99      	RCALL SUBOPT_0x2E
000aee cb7e      	RJMP _getCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x47:
                +
000aef 91a0 01a4+LDS R26 , _rxPacket + ( 10 )
                 	__GETB2MN _rxPacket,10
000af1 e3e0      	LDI  R30,LOW(48)
000af2 d20b      	RCALL __EQB12
000af3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x48:
                +
000af4 e0a0     +LDI R26 , LOW ( 0x0 )
000af5 e0b0     +LDI R27 , HIGH ( 0x0 )
000af6 e080     +LDI R24 , BYTE3 ( 0x0 )
000af7 e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
000af8 cb74      	RJMP _getCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x49:
000af9 dfed      	RCALL SUBOPT_0x45
000afa cff9      	RJMP SUBOPT_0x48
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4A:
000afb d2b1      	RCALL __GETD1S0
000afc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4B:
000afd d2b9      	RCALL __PUTD1S0
000afe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4C:
                +
000aff 91e0 019e+LDS R30 , _rxPacket + ( 4 )
                 	__GETB1MN _rxPacket,4
000b01 30e0      	CPI  R30,0
000b02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4D:
                +
000b03 91a0 01a4+LDS R26 , _rxPacket + ( 10 )
                 	__GETB2MN _rxPacket,10
000b05 33a1      	CPI  R26,LOW(0x31)
000b06 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4E:
                +
000b07 efa3     +LDI R26 , LOW ( 2 * _0x80000 + ( 7 ) )
000b08 e0b1     +LDI R27 , HIGH ( 2 * _0x80000 + ( 7 ) )
                 	__POINTW2FN _0x80000,7
000b09 ceb5      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4F:
000b0a de5a      	RCALL _lcd_putsf
000b0b dbca      	RCALL _FPS_reset
000b0c e0e0      	LDI  R30,LOW(0)
000b0d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x50:
000b0e de30      	RCALL _lcd_clear
                +
000b0f e1ae     +LDI R26 , LOW ( 2 * _0x80000 + ( 50 ) )
000b10 e0b2     +LDI R27 , HIGH ( 2 * _0x80000 + ( 50 ) )
                 	__POINTW2FN _0x80000,50
000b11 cead      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x51:
                +
000b12 e2ab     +LDI R26 , LOW ( 2 * _0x80000 + ( 63 ) )
000b13 e0b2     +LDI R27 , HIGH ( 2 * _0x80000 + ( 63 ) )
                 	__POINTW2FN _0x80000,63
000b14 de50      	RCALL _lcd_putsf
000b15 ccf2      	RJMP _soundOK
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x52:
000b16 de28      	RCALL _lcd_clear
                +
000b17 e3a9     +LDI R26 , LOW ( 2 * _0x80000 + ( 77 ) )
000b18 e0b2     +LDI R27 , HIGH ( 2 * _0x80000 + ( 77 ) )
                 	__POINTW2FN _0x80000,77
000b19 cea5      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x53:
000b1a dfbf      	RCALL SUBOPT_0x41
000b1b c027      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x54:
000b1c dfca      	RCALL SUBOPT_0x45
000b1d e2ec      	LDI  R30,LOW(300)
000b1e e0f1      	LDI  R31,HIGH(300)
000b1f dfc7      	RCALL SUBOPT_0x45
000b20 eca8      	LDI  R26,LOW(200)
000b21 dfb8      	RCALL SUBOPT_0x41
000b22 dd77      	RCALL _beepSwipe
000b23 cfb0      	RJMP SUBOPT_0x3F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x55:
000b24 ebe8      	LDI  R30,LOW(3000)
000b25 e0fb      	LDI  R31,HIGH(3000)
000b26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x56:
000b27 dffc      	RCALL SUBOPT_0x55
000b28 cfbe      	RJMP SUBOPT_0x45
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x57:
000b29 e9e0      	LDI  R30,LOW(400)
000b2a e0f1      	LDI  R31,HIGH(400)
000b2b cfbb      	RJMP SUBOPT_0x45
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x58:
000b2c 93ba      	ST   -Y,R27
000b2d 93aa      	ST   -Y,R26
000b2e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x59:
000b2f 83ee      	STD  Y+6,R30
000b30 83ff      	STD  Y+6+1,R31
000b31 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5A:
000b32 2fe0      	MOV  R30,R16
000b33 e0f0      	LDI  R31,0
000b34 fde7      	SBRC R30,7
000b35 efff      	SER  R31
000b36 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5B:
000b37 9ac4      	SBI  0x18,4
000b38 81a8      	LD   R26,Y
000b39 dde5      	RCALL __lcd_write_data
000b3a 98c4      	CBI  0x18,4
000b3b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x5C:
000b3c e3a0      	LDI  R26,LOW(48)
000b3d ddbc      	RCALL __lcd_write_nibble_G101
                +
000b3e ec88     +LDI R24 , LOW ( 200 )
000b3f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000b40 9701     +SBIW R24 , 1
000b41 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000b42 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000b43 9610      	adiw r26,0
000b44 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000b45 ed80     +LDI R24 , LOW ( 0x7D0 )
000b46 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000b47 9701     +SBIW R24 , 1
000b48 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000b49 95a8      	wdr
000b4a 9711      	sbiw r26,1
000b4b f7c9      	brne __delay_ms0
                 __delay_ms1:
000b4c 9508      	ret
                 
                 __ROUND_REPACK:
000b4d 2355      	TST  R21
000b4e f442      	BRPL __REPACK
000b4f 3850      	CPI  R21,0x80
000b50 f411      	BRNE __ROUND_REPACK0
000b51 ffe0      	SBRS R30,0
000b52 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000b53 9631      	ADIW R30,1
000b54 1f69      	ADC  R22,R25
000b55 1f79      	ADC  R23,R25
000b56 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000b57 e850      	LDI  R21,0x80
000b58 2757      	EOR  R21,R23
000b59 f411      	BRNE __REPACK0
000b5a 935f      	PUSH R21
000b5b c0ca      	RJMP __ZERORES
                 __REPACK0:
000b5c 3f5f      	CPI  R21,0xFF
000b5d f031      	BREQ __REPACK1
000b5e 0f66      	LSL  R22
000b5f 0c00      	LSL  R0
000b60 9557      	ROR  R21
000b61 9567      	ROR  R22
000b62 2f75      	MOV  R23,R21
000b63 9508      	RET
                 __REPACK1:
000b64 935f      	PUSH R21
000b65 2000      	TST  R0
000b66 f00a      	BRMI __REPACK2
000b67 c0ca      	RJMP __MAXRES
                 __REPACK2:
000b68 c0c3      	RJMP __MINRES
                 
                 __UNPACK:
000b69 e850      	LDI  R21,0x80
000b6a 2e19      	MOV  R1,R25
000b6b 2215      	AND  R1,R21
000b6c 0f88      	LSL  R24
000b6d 1f99      	ROL  R25
000b6e 2795      	EOR  R25,R21
000b6f 0f55      	LSL  R21
000b70 9587      	ROR  R24
                 
                 __UNPACK1:
000b71 e850      	LDI  R21,0x80
000b72 2e07      	MOV  R0,R23
000b73 2205      	AND  R0,R21
000b74 0f66      	LSL  R22
000b75 1f77      	ROL  R23
000b76 2775      	EOR  R23,R21
000b77 0f55      	LSL  R21
000b78 9567      	ROR  R22
000b79 9508      	RET
                 
                 __CFD1U:
000b7a 9468      	SET
000b7b c001      	RJMP __CFD1U0
                 __CFD1:
000b7c 94e8      	CLT
                 __CFD1U0:
000b7d 935f      	PUSH R21
000b7e dff2      	RCALL __UNPACK1
000b7f 3870      	CPI  R23,0x80
000b80 f018      	BRLO __CFD10
000b81 3f7f      	CPI  R23,0xFF
000b82 f408      	BRCC __CFD10
000b83 c0a2      	RJMP __ZERORES
                 __CFD10:
000b84 e156      	LDI  R21,22
000b85 1b57      	SUB  R21,R23
000b86 f4aa      	BRPL __CFD11
000b87 9551      	NEG  R21
000b88 3058      	CPI  R21,8
000b89 f40e      	BRTC __CFD19
000b8a 3059      	CPI  R21,9
                 __CFD19:
000b8b f030      	BRLO __CFD17
000b8c efef      	SER  R30
000b8d efff      	SER  R31
000b8e ef6f      	SER  R22
000b8f e77f      	LDI  R23,0x7F
000b90 f977      	BLD  R23,7
000b91 c01a      	RJMP __CFD15
                 __CFD17:
000b92 2777      	CLR  R23
000b93 2355      	TST  R21
000b94 f0b9      	BREQ __CFD15
                 __CFD18:
000b95 0fee      	LSL  R30
000b96 1fff      	ROL  R31
000b97 1f66      	ROL  R22
000b98 1f77      	ROL  R23
000b99 955a      	DEC  R21
000b9a f7d1      	BRNE __CFD18
000b9b c010      	RJMP __CFD15
                 __CFD11:
000b9c 2777      	CLR  R23
                 __CFD12:
000b9d 3058      	CPI  R21,8
000b9e f028      	BRLO __CFD13
000b9f 2fef      	MOV  R30,R31
000ba0 2ff6      	MOV  R31,R22
000ba1 2f67      	MOV  R22,R23
000ba2 5058      	SUBI R21,8
000ba3 cff9      	RJMP __CFD12
                 __CFD13:
000ba4 2355      	TST  R21
000ba5 f031      	BREQ __CFD15
                 __CFD14:
000ba6 9576      	LSR  R23
000ba7 9567      	ROR  R22
000ba8 95f7      	ROR  R31
000ba9 95e7      	ROR  R30
000baa 955a      	DEC  R21
000bab f7d1      	BRNE __CFD14
                 __CFD15:
000bac 2000      	TST  R0
000bad f40a      	BRPL __CFD16
000bae d12a      	RCALL __ANEGD1
                 __CFD16:
000baf 915f      	POP  R21
000bb0 9508      	RET
                 
                 __CDF1U:
000bb1 9468      	SET
000bb2 c001      	RJMP __CDF1U0
                 __CDF1:
000bb3 94e8      	CLT
                 __CDF1U0:
000bb4 9730      	SBIW R30,0
000bb5 4060      	SBCI R22,0
000bb6 4070      	SBCI R23,0
000bb7 f0b1      	BREQ __CDF10
000bb8 2400      	CLR  R0
000bb9 f026      	BRTS __CDF11
000bba 2377      	TST  R23
000bbb f412      	BRPL __CDF11
000bbc 9400      	COM  R0
000bbd d11b      	RCALL __ANEGD1
                 __CDF11:
000bbe 2e17      	MOV  R1,R23
000bbf e17e      	LDI  R23,30
000bc0 2011      	TST  R1
                 __CDF12:
000bc1 f032      	BRMI __CDF13
000bc2 957a      	DEC  R23
000bc3 0fee      	LSL  R30
000bc4 1fff      	ROL  R31
000bc5 1f66      	ROL  R22
000bc6 1c11      	ROL  R1
000bc7 cff9      	RJMP __CDF12
                 __CDF13:
000bc8 2fef      	MOV  R30,R31
000bc9 2ff6      	MOV  R31,R22
000bca 2d61      	MOV  R22,R1
000bcb 935f      	PUSH R21
000bcc df8a      	RCALL __REPACK
000bcd 915f      	POP  R21
                 __CDF10:
000bce 9508      	RET
                 
                 __SWAPACC:
000bcf 934f      	PUSH R20
000bd0 01af      	MOVW R20,R30
000bd1 01fd      	MOVW R30,R26
000bd2 01da      	MOVW R26,R20
000bd3 01ab      	MOVW R20,R22
000bd4 01bc      	MOVW R22,R24
000bd5 01ca      	MOVW R24,R20
000bd6 2d40      	MOV  R20,R0
000bd7 2c01      	MOV  R0,R1
000bd8 2e14      	MOV  R1,R20
000bd9 914f      	POP  R20
000bda 9508      	RET
                 
                 __UADD12:
000bdb 0fea      	ADD  R30,R26
000bdc 1ffb      	ADC  R31,R27
000bdd 1f68      	ADC  R22,R24
000bde 9508      	RET
                 
                 __NEGMAN1:
000bdf 95e0      	COM  R30
000be0 95f0      	COM  R31
000be1 9560      	COM  R22
000be2 5fef      	SUBI R30,-1
000be3 4fff      	SBCI R31,-1
000be4 4f6f      	SBCI R22,-1
000be5 9508      	RET
                 
                 __SUBF12:
000be6 935f      	PUSH R21
000be7 df81      	RCALL __UNPACK
000be8 3890      	CPI  R25,0x80
000be9 f149      	BREQ __ADDF129
000bea e850      	LDI  R21,0x80
000beb 2615      	EOR  R1,R21
                 
                 __ADDF120:
000bec 3870      	CPI  R23,0x80
000bed f121      	BREQ __ADDF128
                 __ADDF121:
000bee 2f57      	MOV  R21,R23
000bef 1b59      	SUB  R21,R25
000bf0 f12b      	BRVS __ADDF1211
000bf1 f412      	BRPL __ADDF122
000bf2 dfdc      	RCALL __SWAPACC
000bf3 cffa      	RJMP __ADDF121
                 __ADDF122:
000bf4 3158      	CPI  R21,24
000bf5 f018      	BRLO __ADDF123
000bf6 27aa      	CLR  R26
000bf7 27bb      	CLR  R27
000bf8 2788      	CLR  R24
                 __ADDF123:
000bf9 3058      	CPI  R21,8
000bfa f028      	BRLO __ADDF124
000bfb 2fab      	MOV  R26,R27
000bfc 2fb8      	MOV  R27,R24
000bfd 2788      	CLR  R24
000bfe 5058      	SUBI R21,8
000bff cff9      	RJMP __ADDF123
                 __ADDF124:
000c00 2355      	TST  R21
000c01 f029      	BREQ __ADDF126
                 __ADDF125:
000c02 9586      	LSR  R24
000c03 95b7      	ROR  R27
000c04 95a7      	ROR  R26
000c05 955a      	DEC  R21
000c06 f7d9      	BRNE __ADDF125
                 __ADDF126:
000c07 2d50      	MOV  R21,R0
000c08 2551      	EOR  R21,R1
000c09 f072      	BRMI __ADDF127
000c0a dfd0      	RCALL __UADD12
000c0b f438      	BRCC __ADDF129
000c0c 9567      	ROR  R22
000c0d 95f7      	ROR  R31
000c0e 95e7      	ROR  R30
000c0f 9573      	INC  R23
000c10 f413      	BRVC __ADDF129
000c11 c020      	RJMP __MAXRES
                 __ADDF128:
000c12 dfbc      	RCALL __SWAPACC
                 __ADDF129:
000c13 df43      	RCALL __REPACK
000c14 915f      	POP  R21
000c15 9508      	RET
                 __ADDF1211:
000c16 f7d8      	BRCC __ADDF128
000c17 cffb      	RJMP __ADDF129
                 __ADDF127:
000c18 1bea      	SUB  R30,R26
000c19 0bfb      	SBC  R31,R27
000c1a 0b68      	SBC  R22,R24
000c1b f051      	BREQ __ZERORES
000c1c f410      	BRCC __ADDF1210
000c1d 9400      	COM  R0
000c1e dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
000c1f 2366      	TST  R22
000c20 f392      	BRMI __ADDF129
000c21 0fee      	LSL  R30
000c22 1fff      	ROL  R31
000c23 1f66      	ROL  R22
000c24 957a      	DEC  R23
000c25 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000c26 27ee      	CLR  R30
000c27 27ff      	CLR  R31
000c28 2766      	CLR  R22
000c29 2777      	CLR  R23
000c2a 915f      	POP  R21
000c2b 9508      	RET
                 
                 __MINRES:
000c2c efef      	SER  R30
000c2d efff      	SER  R31
000c2e e76f      	LDI  R22,0x7F
000c2f ef7f      	SER  R23
000c30 915f      	POP  R21
000c31 9508      	RET
                 
                 __MAXRES:
000c32 efef      	SER  R30
000c33 efff      	SER  R31
000c34 e76f      	LDI  R22,0x7F
000c35 e77f      	LDI  R23,0x7F
000c36 915f      	POP  R21
000c37 9508      	RET
                 
                 __MULF12:
000c38 935f      	PUSH R21
000c39 df2f      	RCALL __UNPACK
000c3a 3870      	CPI  R23,0x80
000c3b f351      	BREQ __ZERORES
000c3c 3890      	CPI  R25,0x80
000c3d f341      	BREQ __ZERORES
000c3e 2401      	EOR  R0,R1
000c3f 9408      	SEC
000c40 1f79      	ADC  R23,R25
000c41 f423      	BRVC __MULF124
000c42 f31c      	BRLT __ZERORES
                 __MULF125:
000c43 2000      	TST  R0
000c44 f33a      	BRMI __MINRES
000c45 cfec      	RJMP __MAXRES
                 __MULF124:
000c46 920f      	PUSH R0
000c47 931f      	PUSH R17
000c48 932f      	PUSH R18
000c49 933f      	PUSH R19
000c4a 934f      	PUSH R20
000c4b 2711      	CLR  R17
000c4c 2722      	CLR  R18
000c4d 2799      	CLR  R25
000c4e 9f68      	MUL  R22,R24
000c4f 01a0      	MOVW R20,R0
000c50 9f8f      	MUL  R24,R31
000c51 2d30      	MOV  R19,R0
000c52 0d41      	ADD  R20,R1
000c53 1f59      	ADC  R21,R25
000c54 9f6b      	MUL  R22,R27
000c55 0d30      	ADD  R19,R0
000c56 1d41      	ADC  R20,R1
000c57 1f59      	ADC  R21,R25
000c58 9f8e      	MUL  R24,R30
000c59 d027      	RCALL __MULF126
000c5a 9fbf      	MUL  R27,R31
000c5b d025      	RCALL __MULF126
000c5c 9f6a      	MUL  R22,R26
000c5d d023      	RCALL __MULF126
000c5e 9fbe      	MUL  R27,R30
000c5f d01d      	RCALL __MULF127
000c60 9faf      	MUL  R26,R31
000c61 d01b      	RCALL __MULF127
000c62 9fae      	MUL  R26,R30
000c63 0d11      	ADD  R17,R1
000c64 1f29      	ADC  R18,R25
000c65 1f39      	ADC  R19,R25
000c66 1f49      	ADC  R20,R25
000c67 1f59      	ADC  R21,R25
000c68 2fe3      	MOV  R30,R19
000c69 2ff4      	MOV  R31,R20
000c6a 2f65      	MOV  R22,R21
000c6b 2f52      	MOV  R21,R18
000c6c 914f      	POP  R20
000c6d 913f      	POP  R19
000c6e 912f      	POP  R18
000c6f 911f      	POP  R17
000c70 900f      	POP  R0
000c71 2366      	TST  R22
000c72 f02a      	BRMI __MULF122
000c73 0f55      	LSL  R21
000c74 1fee      	ROL  R30
000c75 1fff      	ROL  R31
000c76 1f66      	ROL  R22
000c77 c002      	RJMP __MULF123
                 __MULF122:
000c78 9573      	INC  R23
000c79 f24b      	BRVS __MULF125
                 __MULF123:
000c7a ded2      	RCALL __ROUND_REPACK
000c7b 915f      	POP  R21
000c7c 9508      	RET
                 
                 __MULF127:
000c7d 0d10      	ADD  R17,R0
000c7e 1d21      	ADC  R18,R1
000c7f 1f39      	ADC  R19,R25
000c80 c002      	RJMP __MULF128
                 __MULF126:
000c81 0d20      	ADD  R18,R0
000c82 1d31      	ADC  R19,R1
                 __MULF128:
000c83 1f49      	ADC  R20,R25
000c84 1f59      	ADC  R21,R25
000c85 9508      	RET
                 
                 __DIVF21:
000c86 935f      	PUSH R21
000c87 dee1      	RCALL __UNPACK
000c88 3870      	CPI  R23,0x80
000c89 f421      	BRNE __DIVF210
000c8a 2011      	TST  R1
                 __DIVF211:
000c8b f40a      	BRPL __DIVF219
000c8c cf9f      	RJMP __MINRES
                 __DIVF219:
000c8d cfa4      	RJMP __MAXRES
                 __DIVF210:
000c8e 3890      	CPI  R25,0x80
000c8f f409      	BRNE __DIVF218
                 __DIVF217:
000c90 cf95      	RJMP __ZERORES
                 __DIVF218:
000c91 2401      	EOR  R0,R1
000c92 9408      	SEC
000c93 0b97      	SBC  R25,R23
000c94 f41b      	BRVC __DIVF216
000c95 f3d4      	BRLT __DIVF217
000c96 2000      	TST  R0
000c97 cff3      	RJMP __DIVF211
                 __DIVF216:
000c98 2f79      	MOV  R23,R25
000c99 931f      	PUSH R17
000c9a 932f      	PUSH R18
000c9b 933f      	PUSH R19
000c9c 934f      	PUSH R20
000c9d 2411      	CLR  R1
000c9e 2711      	CLR  R17
000c9f 2722      	CLR  R18
000ca0 2733      	CLR  R19
000ca1 2744      	CLR  R20
000ca2 2755      	CLR  R21
000ca3 e290      	LDI  R25,32
                 __DIVF212:
000ca4 17ae      	CP   R26,R30
000ca5 07bf      	CPC  R27,R31
000ca6 0786      	CPC  R24,R22
000ca7 0741      	CPC  R20,R17
000ca8 f030      	BRLO __DIVF213
000ca9 1bae      	SUB  R26,R30
000caa 0bbf      	SBC  R27,R31
000cab 0b86      	SBC  R24,R22
000cac 0b41      	SBC  R20,R17
000cad 9408      	SEC
000cae c001      	RJMP __DIVF214
                 __DIVF213:
000caf 9488      	CLC
                 __DIVF214:
000cb0 1f55      	ROL  R21
000cb1 1f22      	ROL  R18
000cb2 1f33      	ROL  R19
000cb3 1c11      	ROL  R1
000cb4 1faa      	ROL  R26
000cb5 1fbb      	ROL  R27
000cb6 1f88      	ROL  R24
000cb7 1f44      	ROL  R20
000cb8 959a      	DEC  R25
000cb9 f751      	BRNE __DIVF212
000cba 01f9      	MOVW R30,R18
000cbb 2d61      	MOV  R22,R1
000cbc 914f      	POP  R20
000cbd 913f      	POP  R19
000cbe 912f      	POP  R18
000cbf 911f      	POP  R17
000cc0 2366      	TST  R22
000cc1 f032      	BRMI __DIVF215
000cc2 0f55      	LSL  R21
000cc3 1fee      	ROL  R30
000cc4 1fff      	ROL  R31
000cc5 1f66      	ROL  R22
000cc6 957a      	DEC  R23
000cc7 f243      	BRVS __DIVF217
                 __DIVF215:
000cc8 de84      	RCALL __ROUND_REPACK
000cc9 915f      	POP  R21
000cca 9508      	RET
                 
                 __ADDD12:
000ccb 0fea      	ADD  R30,R26
000ccc 1ffb      	ADC  R31,R27
000ccd 1f68      	ADC  R22,R24
000cce 1f79      	ADC  R23,R25
000ccf 9508      	RET
                 
                 __ADDD21:
000cd0 0fae      	ADD  R26,R30
000cd1 1fbf      	ADC  R27,R31
000cd2 1f86      	ADC  R24,R22
000cd3 1f97      	ADC  R25,R23
000cd4 9508      	RET
                 
                 __ANEGW1:
000cd5 95f1      	NEG  R31
000cd6 95e1      	NEG  R30
000cd7 40f0      	SBCI R31,0
000cd8 9508      	RET
                 
                 __ANEGD1:
000cd9 95f0      	COM  R31
000cda 9560      	COM  R22
000cdb 9570      	COM  R23
000cdc 95e1      	NEG  R30
000cdd 4fff      	SBCI R31,-1
000cde 4f6f      	SBCI R22,-1
000cdf 4f7f      	SBCI R23,-1
000ce0 9508      	RET
                 
                 __LSLD12:
000ce1 23ee      	TST  R30
000ce2 2e0e      	MOV  R0,R30
000ce3 01fd      	MOVW R30,R26
000ce4 01bc      	MOVW R22,R24
000ce5 f031      	BREQ __LSLD12R
                 __LSLD12L:
000ce6 0fee      	LSL  R30
000ce7 1fff      	ROL  R31
000ce8 1f66      	ROL  R22
000ce9 1f77      	ROL  R23
000cea 940a      	DEC  R0
000ceb f7d1      	BRNE __LSLD12L
                 __LSLD12R:
000cec 9508      	RET
                 
                 __LSLW3:
000ced 0fee      	LSL  R30
000cee 1fff      	ROL  R31
                 __LSLW2:
000cef 0fee      	LSL  R30
000cf0 1fff      	ROL  R31
000cf1 0fee      	LSL  R30
000cf2 1fff      	ROL  R31
000cf3 9508      	RET
                 
                 __CWD1:
000cf4 2f6f      	MOV  R22,R31
000cf5 0f66      	ADD  R22,R22
000cf6 0b66      	SBC  R22,R22
000cf7 2f76      	MOV  R23,R22
000cf8 9508      	RET
                 
                 __CWD2:
000cf9 2f8b      	MOV  R24,R27
000cfa 0f88      	ADD  R24,R24
000cfb 0b88      	SBC  R24,R24
000cfc 2f98      	MOV  R25,R24
000cfd 9508      	RET
                 
                 __EQB12:
000cfe 17ea      	CP   R30,R26
000cff e0e1      	LDI  R30,1
000d00 f009      	BREQ __EQB12T
000d01 27ee      	CLR  R30
                 __EQB12T:
000d02 9508      	RET
                 
                 __MULW12U:
000d03 9ffa      	MUL  R31,R26
000d04 2df0      	MOV  R31,R0
000d05 9feb      	MUL  R30,R27
000d06 0df0      	ADD  R31,R0
000d07 9fea      	MUL  R30,R26
000d08 2de0      	MOV  R30,R0
000d09 0df1      	ADD  R31,R1
000d0a 9508      	RET
                 
                 __MULD12U:
000d0b 9f7a      	MUL  R23,R26
000d0c 2d70      	MOV  R23,R0
000d0d 9f6b      	MUL  R22,R27
000d0e 0d70      	ADD  R23,R0
000d0f 9ff8      	MUL  R31,R24
000d10 0d70      	ADD  R23,R0
000d11 9fe9      	MUL  R30,R25
000d12 0d70      	ADD  R23,R0
000d13 9f6a      	MUL  R22,R26
000d14 2d60      	MOV  R22,R0
000d15 0d71      	ADD  R23,R1
000d16 9ffb      	MUL  R31,R27
000d17 0d60      	ADD  R22,R0
000d18 1d71      	ADC  R23,R1
000d19 9fe8      	MUL  R30,R24
000d1a 0d60      	ADD  R22,R0
000d1b 1d71      	ADC  R23,R1
000d1c 2788      	CLR  R24
000d1d 9ffa      	MUL  R31,R26
000d1e 2df0      	MOV  R31,R0
000d1f 0d61      	ADD  R22,R1
000d20 1f78      	ADC  R23,R24
000d21 9feb      	MUL  R30,R27
000d22 0df0      	ADD  R31,R0
000d23 1d61      	ADC  R22,R1
000d24 1f78      	ADC  R23,R24
000d25 9fea      	MUL  R30,R26
000d26 2de0      	MOV  R30,R0
000d27 0df1      	ADD  R31,R1
000d28 1f68      	ADC  R22,R24
000d29 1f78      	ADC  R23,R24
000d2a 9508      	RET
                 
                 __MULW12:
000d2b d05c      	RCALL __CHKSIGNW
000d2c dfd6      	RCALL __MULW12U
000d2d f40e      	BRTC __MULW121
000d2e dfa6      	RCALL __ANEGW1
                 __MULW121:
000d2f 9508      	RET
                 
                 __MULD12:
000d30 d065      	RCALL __CHKSIGND
000d31 dfd9      	RCALL __MULD12U
000d32 f40e      	BRTC __MULD121
000d33 dfa5      	RCALL __ANEGD1
                 __MULD121:
000d34 9508      	RET
                 
                 __DIVW21U:
000d35 2400      	CLR  R0
000d36 2411      	CLR  R1
000d37 e190      	LDI  R25,16
                 __DIVW21U1:
000d38 0faa      	LSL  R26
000d39 1fbb      	ROL  R27
000d3a 1c00      	ROL  R0
000d3b 1c11      	ROL  R1
000d3c 1a0e      	SUB  R0,R30
000d3d 0a1f      	SBC  R1,R31
000d3e f418      	BRCC __DIVW21U2
000d3f 0e0e      	ADD  R0,R30
000d40 1e1f      	ADC  R1,R31
000d41 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000d42 60a1      	SBR  R26,1
                 __DIVW21U3:
000d43 959a      	DEC  R25
000d44 f799      	BRNE __DIVW21U1
000d45 01fd      	MOVW R30,R26
000d46 01d0      	MOVW R26,R0
000d47 9508      	RET
                 
                 __DIVW21:
000d48 d03f      	RCALL __CHKSIGNW
000d49 dfeb      	RCALL __DIVW21U
000d4a f40e      	BRTC __DIVW211
000d4b df89      	RCALL __ANEGW1
                 __DIVW211:
000d4c 9508      	RET
                 
                 __DIVD21U:
000d4d 933f      	PUSH R19
000d4e 934f      	PUSH R20
000d4f 935f      	PUSH R21
000d50 2400      	CLR  R0
000d51 2411      	CLR  R1
000d52 2744      	CLR  R20
000d53 2755      	CLR  R21
000d54 e230      	LDI  R19,32
                 __DIVD21U1:
000d55 0faa      	LSL  R26
000d56 1fbb      	ROL  R27
000d57 1f88      	ROL  R24
000d58 1f99      	ROL  R25
000d59 1c00      	ROL  R0
000d5a 1c11      	ROL  R1
000d5b 1f44      	ROL  R20
000d5c 1f55      	ROL  R21
000d5d 1a0e      	SUB  R0,R30
000d5e 0a1f      	SBC  R1,R31
000d5f 0b46      	SBC  R20,R22
000d60 0b57      	SBC  R21,R23
000d61 f428      	BRCC __DIVD21U2
000d62 0e0e      	ADD  R0,R30
000d63 1e1f      	ADC  R1,R31
000d64 1f46      	ADC  R20,R22
000d65 1f57      	ADC  R21,R23
000d66 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000d67 60a1      	SBR  R26,1
                 __DIVD21U3:
000d68 953a      	DEC  R19
000d69 f759      	BRNE __DIVD21U1
000d6a 01fd      	MOVW R30,R26
000d6b 01bc      	MOVW R22,R24
000d6c 01d0      	MOVW R26,R0
000d6d 01ca      	MOVW R24,R20
000d6e 915f      	POP  R21
000d6f 914f      	POP  R20
000d70 913f      	POP  R19
000d71 9508      	RET
                 
                 __DIVD21:
000d72 d023      	RCALL __CHKSIGND
000d73 dfd9      	RCALL __DIVD21U
000d74 f40e      	BRTC __DIVD211
000d75 df63      	RCALL __ANEGD1
                 __DIVD211:
000d76 9508      	RET
                 
                 __MODW21U:
000d77 dfbd      	RCALL __DIVW21U
000d78 01fd      	MOVW R30,R26
000d79 9508      	RET
                 
                 __MODW21:
000d7a 94e8      	CLT
000d7b ffb7      	SBRS R27,7
000d7c c004      	RJMP __MODW211
000d7d 95a0      	COM  R26
000d7e 95b0      	COM  R27
000d7f 9611      	ADIW R26,1
000d80 9468      	SET
                 __MODW211:
000d81 fdf7      	SBRC R31,7
000d82 df52      	RCALL __ANEGW1
000d83 dfb1      	RCALL __DIVW21U
000d84 01fd      	MOVW R30,R26
000d85 f40e      	BRTC __MODW212
000d86 df4e      	RCALL __ANEGW1
                 __MODW212:
000d87 9508      	RET
                 
                 __CHKSIGNW:
000d88 94e8      	CLT
000d89 fff7      	SBRS R31,7
000d8a c002      	RJMP __CHKSW1
000d8b df49      	RCALL __ANEGW1
000d8c 9468      	SET
                 __CHKSW1:
000d8d ffb7      	SBRS R27,7
000d8e c006      	RJMP __CHKSW2
000d8f 95a0      	COM  R26
000d90 95b0      	COM  R27
000d91 9611      	ADIW R26,1
000d92 f800      	BLD  R0,0
000d93 9403      	INC  R0
000d94 fa00      	BST  R0,0
                 __CHKSW2:
000d95 9508      	RET
                 
                 __CHKSIGND:
000d96 94e8      	CLT
000d97 ff77      	SBRS R23,7
000d98 c002      	RJMP __CHKSD1
000d99 df3f      	RCALL __ANEGD1
000d9a 9468      	SET
                 __CHKSD1:
000d9b ff97      	SBRS R25,7
000d9c c00b      	RJMP __CHKSD2
000d9d 2400      	CLR  R0
000d9e 95a0      	COM  R26
000d9f 95b0      	COM  R27
000da0 9580      	COM  R24
000da1 9590      	COM  R25
000da2 9611      	ADIW R26,1
000da3 1d80      	ADC  R24,R0
000da4 1d90      	ADC  R25,R0
000da5 f800      	BLD  R0,0
000da6 9403      	INC  R0
000da7 fa00      	BST  R0,0
                 __CHKSD2:
000da8 9508      	RET
                 
                 __GETW1P:
000da9 91ed      	LD   R30,X+
000daa 91fc      	LD   R31,X
000dab 9711      	SBIW R26,1
000dac 9508      	RET
                 
                 __GETD1S0:
000dad 81e8      	LD   R30,Y
000dae 81f9      	LDD  R31,Y+1
000daf 816a      	LDD  R22,Y+2
000db0 817b      	LDD  R23,Y+3
000db1 9508      	RET
                 
                 __GETD2S0:
000db2 81a8      	LD   R26,Y
000db3 81b9      	LDD  R27,Y+1
000db4 818a      	LDD  R24,Y+2
000db5 819b      	LDD  R25,Y+3
000db6 9508      	RET
                 
                 __PUTD1S0:
000db7 83e8      	ST   Y,R30
000db8 83f9      	STD  Y+1,R31
000db9 836a      	STD  Y+2,R22
000dba 837b      	STD  Y+3,R23
000dbb 9508      	RET
                 
                 __CLRD1S0:
000dbc 83e8      	ST   Y,R30
000dbd 83e9      	STD  Y+1,R30
000dbe 83ea      	STD  Y+2,R30
000dbf 83eb      	STD  Y+3,R30
000dc0 9508      	RET
                 
                 __PUTPARD2:
000dc1 939a      	ST   -Y,R25
000dc2 938a      	ST   -Y,R24
000dc3 93ba      	ST   -Y,R27
000dc4 93aa      	ST   -Y,R26
000dc5 9508      	RET
                 
                 __SWAPD12:
000dc6 2e18      	MOV  R1,R24
000dc7 2f86      	MOV  R24,R22
000dc8 2d61      	MOV  R22,R1
000dc9 2e19      	MOV  R1,R25
000dca 2f97      	MOV  R25,R23
000dcb 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000dcc 2e1b      	MOV  R1,R27
000dcd 2fbf      	MOV  R27,R31
000dce 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000dcf 2e1a      	MOV  R1,R26
000dd0 2fae      	MOV  R26,R30
000dd1 2de1      	MOV  R30,R1
000dd2 9508      	RET
                 
                 __EEPROMRDW:
000dd3 9611      	ADIW R26,1
000dd4 d002      	RCALL __EEPROMRDB
000dd5 2ffe      	MOV  R31,R30
000dd6 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000dd7 99e1      	SBIC EECR,EEWE
000dd8 cffe      	RJMP __EEPROMRDB
000dd9 93ff      	PUSH R31
000dda b7ff      	IN   R31,SREG
000ddb 94f8      	CLI
000ddc bbae      	OUT  EEARL,R26
000ddd bbbf      	OUT  EEARH,R27
000dde 9ae0      	SBI  EECR,EERE
000ddf b3ed      	IN   R30,EEDR
000de0 bfff      	OUT  SREG,R31
000de1 91ff      	POP  R31
000de2 9508      	RET
                 
                 __EEPROMWRW:
000de3 d007      	RCALL __EEPROMWRB
000de4 9611      	ADIW R26,1
000de5 93ef      	PUSH R30
000de6 2fef      	MOV  R30,R31
000de7 d003      	RCALL __EEPROMWRB
000de8 91ef      	POP  R30
000de9 9711      	SBIW R26,1
000dea 9508      	RET
                 
                 __EEPROMWRB:
000deb 9be1      	SBIS EECR,EEWE
000dec c002      	RJMP __EEPROMWRB1
000ded 95a8      	WDR
000dee cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000def b79f      	IN   R25,SREG
000df0 94f8      	CLI
000df1 bbae      	OUT  EEARL,R26
000df2 bbbf      	OUT  EEARH,R27
000df3 9ae0      	SBI  EECR,EERE
000df4 b38d      	IN   R24,EEDR
000df5 17e8      	CP   R30,R24
000df6 f019      	BREQ __EEPROMWRB0
000df7 bbed      	OUT  EEDR,R30
000df8 9ae2      	SBI  EECR,EEMWE
000df9 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000dfa bf9f      	OUT  SREG,R25
000dfb 9508      	RET
                 
                 __CPW02:
000dfc 2400      	CLR  R0
000dfd 160a      	CP   R0,R26
000dfe 060b      	CPC  R0,R27
000dff 9508      	RET
                 
                 __CPD12:
000e00 17ea      	CP   R30,R26
000e01 07fb      	CPC  R31,R27
000e02 0768      	CPC  R22,R24
000e03 0779      	CPC  R23,R25
000e04 9508      	RET
                 
                 __CPD21:
000e05 17ae      	CP   R26,R30
000e06 07bf      	CPC  R27,R31
000e07 0786      	CPC  R24,R22
000e08 0797      	CPC  R25,R23
000e09 9508      	RET
                 
                 __SAVELOCR6:
000e0a 935a      	ST   -Y,R21
                 __SAVELOCR5:
000e0b 934a      	ST   -Y,R20
                 __SAVELOCR4:
000e0c 933a      	ST   -Y,R19
                 __SAVELOCR3:
000e0d 932a      	ST   -Y,R18
                 __SAVELOCR2:
000e0e 931a      	ST   -Y,R17
000e0f 930a      	ST   -Y,R16
000e10 9508      	RET
                 
                 __LOADLOCR6:
000e11 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000e12 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000e13 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000e14 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e15 8119      	LDD  R17,Y+1
000e16 8108      	LD   R16,Y
000e17 9508      	RET
                 
                 __LOADLOCR2P:
000e18 9109      	LD   R16,Y+
000e19 9119      	LD   R17,Y+
000e1a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8L register use summary:
r0 :  65 r1 :  47 r2 :   4 r3 :   0 r4 :   4 r5 :  12 r6 :   2 r7 :   1 
r8 :   4 r9 :   4 r10:   4 r11:   4 r12:   4 r13:   5 r14:   0 r15:   2 
r16:  42 r17:  84 r18:  27 r19:  38 r20:  46 r21:  80 r22:  84 r23:  76 
r24:  83 r25:  60 r26: 353 r27: 164 r28:  16 r29:   1 r30: 646 r31: 192 
x  :  16 y  : 252 z  :  16 
Registers used: 33 out of 35 (94.3%)

ATmega8L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  44 add   :  32 
adiw  :  25 and   :   2 andi  :   8 asr   :   0 bclr  :   0 bld   :   6 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   0 break :   0 breq  :  47 
brge  :   7 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  23 
brlt  :  15 brmi  :   7 brne  :  85 brpl  :   7 brsh  :  22 brtc  :   6 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   2 cbi   :  33 
cbr   :   2 clc   :   1 clh   :   0 cli   :   5 cln   :   0 clr   :  48 
cls   :   0 clt   :   6 clv   :   0 clz   :   0 com   :  18 cp    :  28 
cpc   :  38 cpi   :  91 cpse  :   0 dec   :  17 des   :   0 eor   :   7 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :  17 
inc   :  12 ld    :  69 ldd   :  76 ldi   : 549 lds   :  32 lpm   :  11 
lsl   :  25 lsr   :   2 mov   :  86 movw  :  51 mul   :  22 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   0 ori   :   5 out   :  62 
pop   :  25 push  :  24 rcall : 648 ret   : 146 reti  :   4 rjmp  : 256 
rol   :  42 ror   :  12 sbc   :  14 sbci  :  27 sbi   :  40 sbic  :  20 
sbis  :   9 sbiw  :  27 sbr   :   3 sbrc  :   5 sbrs  :   6 sec   :   3 
seh   :   0 sei   :   4 sen   :   0 ser   :  11 ses   :   0 set   :   7 
sev   :   0 sez   :   0 sleep :   1 spm   :   0 st    :  90 std   :  40 
sts   :  30 sub   :  10 subi  :  46 swap  :   1 tst   :  18 wdr   :   5 

Instructions used: 77 out of 114 (67.5%)

ATmega8L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001c36   6608    614   7222    8192  88.2%
[.dseg] 0x000060 0x0001b0      0     80     80    1119   7.1%
[.eseg] 0x000000 0x000005      0      5      5     512   1.0%

Assembly complete, 0 errors, 14 warnings
