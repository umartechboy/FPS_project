
AVRASM ver. 2.1.30  D:\Important\Projects\TC\FPS Door Lock\List\cvproj.asm Tue Sep 16 23:39:40 2014

D:\Important\Projects\TC\FPS Door Lock\List\cvproj.asm(1072): warning: Register r5 already defined by the .DEF directive
D:\Important\Projects\TC\FPS Door Lock\List\cvproj.asm(1073): warning: Register r4 already defined by the .DEF directive
D:\Important\Projects\TC\FPS Door Lock\List\cvproj.asm(1074): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16L
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16L
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0056 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _fingerPrint_charTable:
00002a 514e
00002b 5455
00002c 5057
00002d c04f      	.DB  0x4E,0x51,0x55,0x54,0x57,0x50,0x4F,0xC0
                 _power_charTable:
00002e 4442
00002f 4e48
000030 4442
000031 c048      	.DB  0x42,0x44,0x48,0x4E,0x42,0x44,0x48,0xC0
                 _battery_charTable:
000032 514e
000033 5753
000034 5f5f
000035 c05f      	.DB  0x4E,0x51,0x53,0x57,0x5F,0x5F,0x5F,0xC0
                 _switch_charTable:
000036 4942
000037 4146
000038 4846
000039 c044      	.DB  0x42,0x49,0x46,0x41,0x46,0x48,0x44,0xC0
                 _locked_charTable:
00003a 514e
00003b 5f51
00003c 5b5b
00003d c05f      	.DB  0x4E,0x51,0x51,0x5F,0x5B,0x5B,0x5F,0xC0
                 _unlocked_charTable:
00003e 504e
00003f 5e50
000040 5b5b
000041 c05f      	.DB  0x4E,0x50,0x50,0x5E,0x5B,0x5B,0x5F,0xC0
                 _smilie_charTable:
000042 4a40
000043 4040
000044 4e51
000045 c040      	.DB  0x40,0x4A,0x40,0x40,0x51,0x4E,0x40,0xC0
                 
                 _0x0:
000046 7355
000047 7265
000048 6420
000049 6665      	.DB  0x55,0x73,0x65,0x72,0x20,0x64,0x65,0x66
00004a 6e69
00004b 6465
00004c 630a
00004d 6168      	.DB  0x69,0x6E,0x65,0x64,0xA,0x63,0x68,0x61
00004e 2072
00004f 3a30
D:\Important\Projects\TC\FPS Door Lock\List\cvproj.asm(1123): warning: .cseg .db misalignment - padding zero byte
000050 0000      	.DB  0x72,0x20,0x30,0x3A,0x0
                 _0x2000003:
000051 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000052 0002      	.DW  0x02
000053 0160      	.DW  __base_y_G100
000054 00a2      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000055 0000      	.DW  0
                 
                 __RESET:
000056 94f8      	CLI
000057 27ee      	CLR  R30
000058 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000059 e0f1      	LDI  R31,1
00005a bffb      	OUT  GICR,R31
00005b bfeb      	OUT  GICR,R30
00005c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005d e1f8      	LDI  R31,0x18
00005e bdf1      	OUT  WDTCR,R31
00005f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000060 e08d      	LDI  R24,(14-2)+1
000061 e0a2      	LDI  R26,2
000062 27bb      	CLR  R27
                 __CLEAR_REG:
000063 93ed      	ST   X+,R30
000064 958a      	DEC  R24
000065 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000066 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000067 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000068 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000069 93ed      	ST   X+,R30
00006a 9701      	SBIW R24,1
00006b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006c eae4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006e 9185      	LPM  R24,Z+
00006f 9195      	LPM  R25,Z+
000070 9700      	SBIW R24,0
000071 f061      	BREQ __GLOBAL_INI_END
000072 91a5      	LPM  R26,Z+
000073 91b5      	LPM  R27,Z+
000074 9005      	LPM  R0,Z+
000075 9015      	LPM  R1,Z+
000076 01bf      	MOVW R22,R30
000077 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000078 9005      	LPM  R0,Z+
000079 920d      	ST   X+,R0
00007a 9701      	SBIW R24,1
00007b f7e1      	BRNE __GLOBAL_INI_LOOP
00007c 01fb      	MOVW R30,R22
00007d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007f bfed      	OUT  SPL,R30
000080 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000081 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000082 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000083 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000084 940c 0086 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ;  LCD user defined characters demo
                 ;
                 ;  CodeVisionAVR C Compiler
                 ;  (C) 2000-2007 HP InfoTech S.R.L.
                 ;  www.hpinfotech.ro
                 ;
                 ;  Chip: ATmega8515
                 ;  Memory Model: SMALL
                 ;  Data Stack Size: 128 bytes
                 ;
                 ;  Use an 2x16 alphanumeric LCD connected
                 ;  to the STK500 PORTC header as follows:
                 ;
                 ;  [LCD]   [STK500 PORTC HEADER]
                 ;   1 GND- 9  GND
                 ;   2 +5V- 10 VCC
                 ;   3 VLC- LCD contrast control voltage 0..1V
                 ;   4 RS - 1  PC0
                 ;   5 RD - 2  PC1
                 ;   6 EN - 3  PC2
                 ;  11 D4 - 5  PC4
                 ;  12 D5 - 6  PC5
                 ;  13 D6 - 7  PC6
                 ;  14 D7 - 8  PC7
                 ;*/
                 ;
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;// The LCD connections are specified in the
                 ;// Project|Configure|C Compiler|Libraries|Alphanumeric menu
                 ;#include <alcd.h>
                 ;#include "customCharsCG.h"
                 ;
                 ;typedef unsigned char byte;
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0028 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0029 char i ;
                 ; 0000 002A // initialize the LCD for
                 ; 0000 002B // 2 lines & 16 columns
                 ; 0000 002C lcd_init(16);
                 ;	i -> R17
000086 e1a0      	LDI  R26,LOW(16)
000087 d0c6      	RCALL _lcd_init
                 ; 0000 002D 
                 ; 0000 002E init_fingerPrint_char();
000088 d032      	RCALL _init_fingerPrint_char
                 ; 0000 002F init_power_char();
000089 d037      	RCALL _init_power_char
                 ; 0000 0030 init_battery_char();
00008a d03c      	RCALL _init_battery_char
                 ; 0000 0031 init_switch_char();
00008b d041      	RCALL _init_switch_char
                 ; 0000 0032 init_locked_char();
00008c d046      	RCALL _init_locked_char
                 ; 0000 0033 init_unlocked_char();
00008d d04b      	RCALL _init_unlocked_char
                 ; 0000 0034 init_smilie_char();
00008e d050      	RCALL _init_smilie_char
                 ; 0000 0035 
                 ; 0000 0036 
                 ; 0000 0037 // switch to writing in Display RAM
                 ; 0000 0038 lcd_gotoxy(0,0);
00008f e0e0      	LDI  R30,LOW(0)
000090 93ea      	ST   -Y,R30
000091 e0a0      	LDI  R26,LOW(0)
000092 d07c      	RCALL _lcd_gotoxy
                 ; 0000 0039 // display the user defined characters
                 ; 0000 003A lcd_putsf("User defined\nchar 0:");
                +
000093 e8ac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000094 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000095 d0a5      	RCALL _lcd_putsf
                 ; 0000 003B // display the user defined char 0
                 ; 0000 003C 
                 ; 0000 003D for (i = 0; i< 8; i++)
000096 e010      	LDI  R17,LOW(0)
                 _0x4:
000097 3018      	CPI  R17,8
000098 f420      	BRSH _0x5
                 ; 0000 003E lcd_putchar(i);
000099 2fa1      	MOV  R26,R17
00009a d08b      	RCALL _lcd_putchar
00009b 5f1f      	SUBI R17,-1
00009c cffa      	RJMP _0x4
                 _0x5:
                 ; 0000 0040 while (1);
                 _0x6:
00009d cfff      	RJMP _0x6
                 ; 0000 0041 }
                 _0x9:
00009e cfff      	RJMP _0x9
                 ;#include <alcd.h>
                 ;void define_char(unsigned char flash *pc,unsigned char char_code)
                 ; 0001 0003 {
                 
                 	.CSEG
                 _define_char:
                 ; 0001 0004     unsigned char i,address;
                 ; 0001 0005     address=(char_code<<3)|0x40;
00009f 93aa      	ST   -Y,R26
0000a0 931a      	ST   -Y,R17
0000a1 930a      	ST   -Y,R16
                 ;	*pc -> Y+3
                 ;	char_code -> Y+2
                 ;	i -> R17
                 ;	address -> R16
0000a2 81ea      	LDD  R30,Y+2
0000a3 0fee      	LSL  R30
0000a4 0fee      	LSL  R30
0000a5 0fee      	LSL  R30
0000a6 64e0      	ORI  R30,0x40
0000a7 2f0e      	MOV  R16,R30
                 ; 0001 0006     for (i=0; i<8; i++) lcd_write_byte(address++,*pc++);
0000a8 e010      	LDI  R17,LOW(0)
                 _0x20004:
0000a9 3018      	CPI  R17,8
0000aa f460      	BRSH _0x20005
0000ab 930a      	ST   -Y,R16
0000ac 9503      	INC  R16
0000ad 81ec      	LDD  R30,Y+4
0000ae 81fd      	LDD  R31,Y+4+1
0000af 9631      	ADIW R30,1
0000b0 83ec      	STD  Y+4,R30
0000b1 83fd      	STD  Y+4+1,R31
0000b2 9731      	SBIW R30,1
0000b3 91a4      	LPM  R26,Z
0000b4 d052      	RCALL _lcd_write_byte
0000b5 5f1f      	SUBI R17,-1
0000b6 cff2      	RJMP _0x20004
                 _0x20005:
                 ; 0001 0007 }
0000b7 8119      	LDD  R17,Y+1
0000b8 8108      	LDD  R16,Y+0
0000b9 9625      	ADIW R28,5
0000ba 9508      	RET
                 ;flash unsigned char fingerPrint_charTable[8]=
                 ;{
                 ;	0b1001110,
                 ;	0b1010001,
                 ;	0b1010101,
                 ;	0b1010100,
                 ;	0b1010111,
                 ;	0b1010000,
                 ;	0b1001111,
                 ;	0b11000000};
                 ;
                 ;void init_fingerPrint_char(void)
                 ; 0001 0014 {
                 _init_fingerPrint_char:
                 ; 0001 0015 	define_char(fingerPrint_charTable, 0);
0000bb e5e4      	LDI  R30,LOW(_fingerPrint_charTable*2)
0000bc e0f0      	LDI  R31,HIGH(_fingerPrint_charTable*2)
0000bd 93fa      	ST   -Y,R31
0000be 93ea      	ST   -Y,R30
0000bf e0a0      	LDI  R26,LOW(0)
0000c0 c023      	RJMP _0x2020003
                 ; 0001 0016 }
                 ;
                 ;flash unsigned char power_charTable[8]=
                 ;{
                 ;    0b1000010,
                 ;    0b1000100,
                 ;    0b1001000,
                 ;    0b1001110,
                 ;    0b1000010,
                 ;    0b1000100,
                 ;    0b1001000,
                 ;    0b11000000};
                 ;
                 ;void init_power_char(void)
                 ; 0001 0024 {
                 _init_power_char:
                 ; 0001 0025     define_char(power_charTable, 1);
0000c1 e5ec      	LDI  R30,LOW(_power_charTable*2)
0000c2 e0f0      	LDI  R31,HIGH(_power_charTable*2)
0000c3 93fa      	ST   -Y,R31
0000c4 93ea      	ST   -Y,R30
0000c5 e0a1      	LDI  R26,LOW(1)
0000c6 c01d      	RJMP _0x2020003
                 ; 0001 0026 }
                 ;
                 ;flash unsigned char battery_charTable[8]=
                 ;{
                 ;    0b1001110,
                 ;    0b1010001,
                 ;    0b1010011,
                 ;    0b1010111,
                 ;    0b1011111,
                 ;    0b1011111,
                 ;    0b1011111,
                 ;    0b11000000};
                 ;
                 ;void init_battery_char(void)
                 ; 0001 0034 {
                 _init_battery_char:
                 ; 0001 0035     define_char(battery_charTable, 2);
0000c7 e6e4      	LDI  R30,LOW(_battery_charTable*2)
0000c8 e0f0      	LDI  R31,HIGH(_battery_charTable*2)
0000c9 93fa      	ST   -Y,R31
0000ca 93ea      	ST   -Y,R30
0000cb e0a2      	LDI  R26,LOW(2)
0000cc c017      	RJMP _0x2020003
                 ; 0001 0036 }
                 ;
                 ;flash unsigned char switch_charTable[8]=
                 ;{
                 ;    0b1000010,
                 ;    0b1001001,
                 ;    0b1000110,
                 ;    0b1000001,
                 ;    0b1000110,
                 ;    0b1001000,
                 ;    0b1000100,
                 ;    0b11000000};
                 ;
                 ;void init_switch_char(void)
                 ; 0001 0044 {
                 _init_switch_char:
                 ; 0001 0045     define_char(switch_charTable, 3);
0000cd e6ec      	LDI  R30,LOW(_switch_charTable*2)
0000ce e0f0      	LDI  R31,HIGH(_switch_charTable*2)
0000cf 93fa      	ST   -Y,R31
0000d0 93ea      	ST   -Y,R30
0000d1 e0a3      	LDI  R26,LOW(3)
0000d2 c011      	RJMP _0x2020003
                 ; 0001 0046 }
                 ;
                 ;flash unsigned char locked_charTable[8]=
                 ;{
                 ;    0b1001110,
                 ;    0b1010001,
                 ;    0b1010001,
                 ;    0b1011111,
                 ;    0b1011011,
                 ;    0b1011011,
                 ;    0b1011111,
                 ;    0b11000000};
                 ;
                 ;void init_locked_char(void)
                 ; 0001 0054 {
                 _init_locked_char:
                 ; 0001 0055     define_char(locked_charTable, 4);
0000d3 e7e4      	LDI  R30,LOW(_locked_charTable*2)
0000d4 e0f0      	LDI  R31,HIGH(_locked_charTable*2)
0000d5 93fa      	ST   -Y,R31
0000d6 93ea      	ST   -Y,R30
0000d7 e0a4      	LDI  R26,LOW(4)
0000d8 c00b      	RJMP _0x2020003
                 ; 0001 0056 }
                 ;
                 ;flash unsigned char unlocked_charTable[8]=
                 ;{
                 ;    0b1001110,
                 ;    0b1010000,
                 ;    0b1010000,
                 ;    0b1011110,
                 ;    0b1011011,
                 ;    0b1011011,
                 ;    0b1011111,
                 ;    0b11000000};
                 ;
                 ;void init_unlocked_char(void)
                 ; 0001 0064 {
                 _init_unlocked_char:
                 ; 0001 0065     define_char(unlocked_charTable, 5);
0000d9 e7ec      	LDI  R30,LOW(_unlocked_charTable*2)
0000da e0f0      	LDI  R31,HIGH(_unlocked_charTable*2)
0000db 93fa      	ST   -Y,R31
0000dc 93ea      	ST   -Y,R30
0000dd e0a5      	LDI  R26,LOW(5)
0000de c005      	RJMP _0x2020003
                 ; 0001 0066 }
                 ;
                 ;flash unsigned char smilie_charTable[8]=
                 ;{
                 ;    0b1000000,
                 ;    0b1001010,
                 ;    0b1000000,
                 ;    0b1000000,
                 ;    0b1010001,
                 ;    0b1001110,
                 ;    0b1000000,
                 ;    0b11000000};
                 ;
                 ;void init_smilie_char(void)
                 ; 0001 0074 {
                 _init_smilie_char:
                 ; 0001 0075     define_char(smilie_charTable, 6);
0000df e8e4      	LDI  R30,LOW(_smilie_charTable*2)
0000e0 e0f0      	LDI  R31,HIGH(_smilie_charTable*2)
0000e1 93fa      	ST   -Y,R31
0000e2 93ea      	ST   -Y,R30
0000e3 e0a6      	LDI  R26,LOW(6)
                 _0x2020003:
0000e4 dfba      	RCALL _define_char
                 ; 0001 0076 }
0000e5 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
0000e6 93aa      	ST   -Y,R26
0000e7 b3eb      	IN   R30,0x1B
0000e8 70ef      	ANDI R30,LOW(0xF)
0000e9 2fae      	MOV  R26,R30
0000ea 81e8      	LD   R30,Y
0000eb 7fe0      	ANDI R30,LOW(0xF0)
0000ec 2bea      	OR   R30,R26
0000ed bbeb      	OUT  0x1B,R30
                +
0000ee e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
0000ef 958a     +DEC R24
0000f0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
0000f1 9ada      	SBI  0x1B,2
                +
0000f2 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000f3 958a     +DEC R24
0000f4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000f5 98da      	CBI  0x1B,2
                +
0000f6 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000f7 958a     +DEC R24
0000f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000f9 c07d      	RJMP _0x2020001
                 __lcd_write_data:
0000fa 93aa      	ST   -Y,R26
0000fb 81a8      	LD   R26,Y
0000fc dfe9      	RCALL __lcd_write_nibble_G100
0000fd 81e8          ld    r30,y
0000fe 95e2          swap  r30
0000ff 83e8          st    y,r30
000100 81a8      	LD   R26,Y
000101 dfe4      	RCALL __lcd_write_nibble_G100
                +
000102 ec88     +LDI R24 , LOW ( 200 )
000103 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000104 9701     +SBIW R24 , 1
000105 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000106 c070      	RJMP _0x2020001
                 _lcd_write_byte:
000107 93aa      	ST   -Y,R26
000108 81a9      	LDD  R26,Y+1
000109 dff0      	RCALL __lcd_write_data
00010a 9ad8      	SBI  0x1B,0
00010b 81a8      	LD   R26,Y
00010c dfed      	RCALL __lcd_write_data
00010d 98d8      	CBI  0x1B,0
00010e c00b      	RJMP _0x2020002
                 _lcd_gotoxy:
00010f 93aa      	ST   -Y,R26
000110 81e8      	LD   R30,Y
000111 e0f0      	LDI  R31,0
000112 5ae0      	SUBI R30,LOW(-__base_y_G100)
000113 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000114 81e0      	LD   R30,Z
000115 81a9      	LDD  R26,Y+1
000116 0fae      	ADD  R26,R30
000117 dfe2      	RCALL __lcd_write_data
000118 8059      	LDD  R5,Y+1
000119 8048      	LDD  R4,Y+0
                 _0x2020002:
00011a 9622      	ADIW R28,2
00011b 9508      	RET
                 _lcd_clear:
00011c e0a2      	LDI  R26,LOW(2)
00011d d05b      	RCALL SUBOPT_0x0
00011e e0ac      	LDI  R26,LOW(12)
00011f dfda      	RCALL __lcd_write_data
000120 e0a1      	LDI  R26,LOW(1)
000121 d057      	RCALL SUBOPT_0x0
000122 e0e0      	LDI  R30,LOW(0)
000123 2e4e      	MOV  R4,R30
000124 2e5e      	MOV  R5,R30
000125 9508      	RET
                 _lcd_putchar:
000126 93aa      	ST   -Y,R26
000127 81a8      	LD   R26,Y
000128 30aa      	CPI  R26,LOW(0xA)
000129 f011      	BREQ _0x2000005
00012a 1457      	CP   R5,R7
00012b f048      	BRLO _0x2000004
                 _0x2000005:
00012c e0e0      	LDI  R30,LOW(0)
00012d 93ea      	ST   -Y,R30
00012e 9443      	INC  R4
00012f 2da4      	MOV  R26,R4
000130 dfde      	RCALL _lcd_gotoxy
000131 81a8      	LD   R26,Y
000132 30aa      	CPI  R26,LOW(0xA)
000133 f409      	BRNE _0x2000007
000134 c042      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
000135 9453      	INC  R5
000136 9ad8      	SBI  0x1B,0
000137 81a8      	LD   R26,Y
000138 dfc1      	RCALL __lcd_write_data
000139 98d8      	CBI  0x1B,0
00013a c03c      	RJMP _0x2020001
                 _lcd_putsf:
00013b 93ba      	ST   -Y,R27
00013c 93aa      	ST   -Y,R26
00013d 931a      	ST   -Y,R17
                 _0x200000B:
00013e 81e9      	LDD  R30,Y+1
00013f 81fa      	LDD  R31,Y+1+1
000140 9631      	ADIW R30,1
000141 83e9      	STD  Y+1,R30
000142 83fa      	STD  Y+1+1,R31
000143 9731      	SBIW R30,1
000144 91e4      	LPM  R30,Z
000145 2f1e      	MOV  R17,R30
000146 30e0      	CPI  R30,0
000147 f019      	BREQ _0x200000D
000148 2fa1      	MOV  R26,R17
000149 dfdc      	RCALL _lcd_putchar
00014a cff3      	RJMP _0x200000B
                 _0x200000D:
00014b 8118      	LDD  R17,Y+0
00014c 9623      	ADIW R28,3
00014d 9508      	RET
                 _lcd_init:
00014e 93aa      	ST   -Y,R26
00014f b3ea      	IN   R30,0x1A
000150 6fe0      	ORI  R30,LOW(0xF0)
000151 bbea      	OUT  0x1A,R30
000152 9ad2      	SBI  0x1A,2
000153 9ad0      	SBI  0x1A,0
000154 9ad1      	SBI  0x1A,1
000155 98da      	CBI  0x1B,2
000156 98d8      	CBI  0x1B,0
000157 98d9      	CBI  0x1B,1
000158 8078      	LDD  R7,Y+0
000159 81e8      	LD   R30,Y
00015a 58e0      	SUBI R30,-LOW(128)
                +
00015b 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00015d 81e8      	LD   R30,Y
00015e 54e0      	SUBI R30,-LOW(192)
                +
00015f 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000161 e1a4      	LDI  R26,LOW(20)
000162 e0b0      	LDI  R27,0
000163 940e 0185 	CALL _delay_ms
000165 d018      	RCALL SUBOPT_0x1
000166 d017      	RCALL SUBOPT_0x1
000167 d016      	RCALL SUBOPT_0x1
000168 e2a0      	LDI  R26,LOW(32)
000169 df7c      	RCALL __lcd_write_nibble_G100
                +
00016a e980     +LDI R24 , LOW ( 400 )
00016b e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00016c 9701     +SBIW R24 , 1
00016d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
00016e e2a8      	LDI  R26,LOW(40)
00016f df8a      	RCALL __lcd_write_data
000170 e0a4      	LDI  R26,LOW(4)
000171 df88      	RCALL __lcd_write_data
000172 e8a5      	LDI  R26,LOW(133)
000173 df86      	RCALL __lcd_write_data
000174 e0a6      	LDI  R26,LOW(6)
000175 df84      	RCALL __lcd_write_data
000176 dfa5      	RCALL _lcd_clear
                 _0x2020001:
000177 9621      	ADIW R28,1
000178 9508      	RET
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000179 df80      	RCALL __lcd_write_data
00017a e0a3      	LDI  R26,LOW(3)
00017b e0b0      	LDI  R27,0
00017c 940c 0185 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00017e e3a0      	LDI  R26,LOW(48)
00017f df66      	RCALL __lcd_write_nibble_G100
                +
000180 e980     +LDI R24 , LOW ( 400 )
000181 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000182 9701     +SBIW R24 , 1
000183 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000184 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000185 9610      	adiw r26,0
000186 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000187 ea80     +LDI R24 , LOW ( 0xFA0 )
000188 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000189 9701     +SBIW R24 , 1
00018a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00018b 95a8      	wdr
00018c 9711      	sbiw r26,1
00018d f7c9      	brne __delay_ms0
                 __delay_ms1:
00018e 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16L register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:  13 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   6 r26:  51 r27:   6 r28:   5 r29:   1 r30:  76 r31:  25 
x  :   3 y  :  58 z  :  10 
Registers used: 19 out of 35 (54.3%)

ATmega16L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   7 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   1 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   0 cpi   :   5 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  23 ld    :  12 ldd   :  13 ldi   :  68 
lds   :   0 lpm   :  11 lsl   :   3 lsr   :   0 mov   :   8 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  10 pop   :   0 push  :   0 rcall :  35 ret   :   8 
reti  :   0 rjmp  :  17 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   6 sbic  :   0 sbis  :   0 sbiw  :  10 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  33 std   :   4 sts   :   2 sub   :   0 subi  :   5 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 39 out of 116 (33.6%)

ATmega16L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00031e    710     88    798   16384   4.9%
[.dseg] 0x000060 0x000164      0      4      4    1119   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
